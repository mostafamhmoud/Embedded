
FreeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007794  08007794  00008794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b7c  08007b7c  0000902c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007b7c  08007b7c  00008b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b84  08007b84  0000902c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b84  08007b84  00008b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b88  08007b88  00008b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08007b8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ea8  2000002c  08007bb8  0000902c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ed4  08007bb8  00009ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ef2  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003607  00000000  00000000  0001ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00022558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f42  00000000  00000000  000238f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a58  00000000  00000000  0002483a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172df  00000000  00000000  00047292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e074e  00000000  00000000  0005e571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ecbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e0  00000000  00000000  0013ed04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00143ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800777c 	.word	0x0800777c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000030 	.word	0x20000030
 800020c:	0800777c 	.word	0x0800777c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000248:	f000 b988 	b.w	800055c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	468e      	mov	lr, r1
 800026c:	4604      	mov	r4, r0
 800026e:	4688      	mov	r8, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d962      	bls.n	8000340 <__udivmoddi4+0xdc>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 f806 	lsl.w	r8, r1, r6
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	40b7      	lsls	r7, r6
 800028e:	ea43 0808 	orr.w	r8, r3, r8
 8000292:	40b4      	lsls	r4, r6
 8000294:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a0:	0c23      	lsrs	r3, r4, #16
 80002a2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002aa:	fb01 f20c 	mul.w	r2, r1, ip
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002b8:	f080 80ea 	bcs.w	8000490 <__udivmoddi4+0x22c>
 80002bc:	429a      	cmp	r2, r3
 80002be:	f240 80e7 	bls.w	8000490 <__udivmoddi4+0x22c>
 80002c2:	3902      	subs	r1, #2
 80002c4:	443b      	add	r3, r7
 80002c6:	1a9a      	subs	r2, r3, r2
 80002c8:	b2a3      	uxth	r3, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002da:	459c      	cmp	ip, r3
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002e4:	f080 80d6 	bcs.w	8000494 <__udivmoddi4+0x230>
 80002e8:	459c      	cmp	ip, r3
 80002ea:	f240 80d3 	bls.w	8000494 <__udivmoddi4+0x230>
 80002ee:	443b      	add	r3, r7
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba3 030c 	sub.w	r3, r3, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f3      	lsrs	r3, r6
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x14c>
 8000322:	4573      	cmp	r3, lr
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xc8>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 8105 	bhi.w	8000536 <__udivmoddi4+0x2d2>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4690      	mov	r8, r2
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e5      	beq.n	8000306 <__udivmoddi4+0xa2>
 800033a:	e9c5 4800 	strd	r4, r8, [r5]
 800033e:	e7e2      	b.n	8000306 <__udivmoddi4+0xa2>
 8000340:	2a00      	cmp	r2, #0
 8000342:	f000 8090 	beq.w	8000466 <__udivmoddi4+0x202>
 8000346:	fab2 f682 	clz	r6, r2
 800034a:	2e00      	cmp	r6, #0
 800034c:	f040 80a4 	bne.w	8000498 <__udivmoddi4+0x234>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	0c03      	lsrs	r3, r0, #16
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	b280      	uxth	r0, r0
 800035a:	b2bc      	uxth	r4, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000362:	fb0e 221c 	mls	r2, lr, ip, r2
 8000366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036a:	fb04 f20c 	mul.w	r2, r4, ip
 800036e:	429a      	cmp	r2, r3
 8000370:	d907      	bls.n	8000382 <__udivmoddi4+0x11e>
 8000372:	18fb      	adds	r3, r7, r3
 8000374:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x11c>
 800037a:	429a      	cmp	r2, r3
 800037c:	f200 80e0 	bhi.w	8000540 <__udivmoddi4+0x2dc>
 8000380:	46c4      	mov	ip, r8
 8000382:	1a9b      	subs	r3, r3, r2
 8000384:	fbb3 f2fe 	udiv	r2, r3, lr
 8000388:	fb0e 3312 	mls	r3, lr, r2, r3
 800038c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000390:	fb02 f404 	mul.w	r4, r2, r4
 8000394:	429c      	cmp	r4, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x144>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x142>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f200 80ca 	bhi.w	800053a <__udivmoddi4+0x2d6>
 80003a6:	4602      	mov	r2, r0
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x98>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa0e f401 	lsl.w	r4, lr, r1
 80003c0:	fa20 f306 	lsr.w	r3, r0, r6
 80003c4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	fa1f fc87 	uxth.w	ip, r7
 80003d6:	fbbe f0f9 	udiv	r0, lr, r9
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x1a0>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003f6:	f080 809c 	bcs.w	8000532 <__udivmoddi4+0x2ce>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f240 8099 	bls.w	8000532 <__udivmoddi4+0x2ce>
 8000400:	3802      	subs	r0, #2
 8000402:	443c      	add	r4, r7
 8000404:	eba4 040e 	sub.w	r4, r4, lr
 8000408:	fa1f fe83 	uxth.w	lr, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000418:	fb03 fc0c 	mul.w	ip, r3, ip
 800041c:	45a4      	cmp	ip, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1ce>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000426:	f080 8082 	bcs.w	800052e <__udivmoddi4+0x2ca>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d97f      	bls.n	800052e <__udivmoddi4+0x2ca>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000436:	eba4 040c 	sub.w	r4, r4, ip
 800043a:	fba0 ec02 	umull	lr, ip, r0, r2
 800043e:	4564      	cmp	r4, ip
 8000440:	4673      	mov	r3, lr
 8000442:	46e1      	mov	r9, ip
 8000444:	d362      	bcc.n	800050c <__udivmoddi4+0x2a8>
 8000446:	d05f      	beq.n	8000508 <__udivmoddi4+0x2a4>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x1fe>
 800044a:	ebb8 0203 	subs.w	r2, r8, r3
 800044e:	eb64 0409 	sbc.w	r4, r4, r9
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	431e      	orrs	r6, r3
 800045c:	40cc      	lsrs	r4, r1
 800045e:	e9c5 6400 	strd	r6, r4, [r5]
 8000462:	2100      	movs	r1, #0
 8000464:	e74f      	b.n	8000306 <__udivmoddi4+0xa2>
 8000466:	fbb1 fcf2 	udiv	ip, r1, r2
 800046a:	0c01      	lsrs	r1, r0, #16
 800046c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000470:	b280      	uxth	r0, r0
 8000472:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000476:	463b      	mov	r3, r7
 8000478:	4638      	mov	r0, r7
 800047a:	463c      	mov	r4, r7
 800047c:	46b8      	mov	r8, r7
 800047e:	46be      	mov	lr, r7
 8000480:	2620      	movs	r6, #32
 8000482:	fbb1 f1f7 	udiv	r1, r1, r7
 8000486:	eba2 0208 	sub.w	r2, r2, r8
 800048a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048e:	e766      	b.n	800035e <__udivmoddi4+0xfa>
 8000490:	4601      	mov	r1, r0
 8000492:	e718      	b.n	80002c6 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e72c      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000498:	f1c6 0220 	rsb	r2, r6, #32
 800049c:	fa2e f302 	lsr.w	r3, lr, r2
 80004a0:	40b7      	lsls	r7, r6
 80004a2:	40b1      	lsls	r1, r6
 80004a4:	fa20 f202 	lsr.w	r2, r0, r2
 80004a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ac:	430a      	orrs	r2, r1
 80004ae:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b2:	b2bc      	uxth	r4, r7
 80004b4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b8:	0c11      	lsrs	r1, r2, #16
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb08 f904 	mul.w	r9, r8, r4
 80004c2:	40b0      	lsls	r0, r6
 80004c4:	4589      	cmp	r9, r1
 80004c6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ca:	b280      	uxth	r0, r0
 80004cc:	d93e      	bls.n	800054c <__udivmoddi4+0x2e8>
 80004ce:	1879      	adds	r1, r7, r1
 80004d0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004d4:	d201      	bcs.n	80004da <__udivmoddi4+0x276>
 80004d6:	4589      	cmp	r9, r1
 80004d8:	d81f      	bhi.n	800051a <__udivmoddi4+0x2b6>
 80004da:	eba1 0109 	sub.w	r1, r1, r9
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fb09 f804 	mul.w	r8, r9, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	b292      	uxth	r2, r2
 80004ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f0:	4542      	cmp	r2, r8
 80004f2:	d229      	bcs.n	8000548 <__udivmoddi4+0x2e4>
 80004f4:	18ba      	adds	r2, r7, r2
 80004f6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004fa:	d2c4      	bcs.n	8000486 <__udivmoddi4+0x222>
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d2c2      	bcs.n	8000486 <__udivmoddi4+0x222>
 8000500:	f1a9 0102 	sub.w	r1, r9, #2
 8000504:	443a      	add	r2, r7
 8000506:	e7be      	b.n	8000486 <__udivmoddi4+0x222>
 8000508:	45f0      	cmp	r8, lr
 800050a:	d29d      	bcs.n	8000448 <__udivmoddi4+0x1e4>
 800050c:	ebbe 0302 	subs.w	r3, lr, r2
 8000510:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000514:	3801      	subs	r0, #1
 8000516:	46e1      	mov	r9, ip
 8000518:	e796      	b.n	8000448 <__udivmoddi4+0x1e4>
 800051a:	eba7 0909 	sub.w	r9, r7, r9
 800051e:	4449      	add	r1, r9
 8000520:	f1a8 0c02 	sub.w	ip, r8, #2
 8000524:	fbb1 f9fe 	udiv	r9, r1, lr
 8000528:	fb09 f804 	mul.w	r8, r9, r4
 800052c:	e7db      	b.n	80004e6 <__udivmoddi4+0x282>
 800052e:	4673      	mov	r3, lr
 8000530:	e77f      	b.n	8000432 <__udivmoddi4+0x1ce>
 8000532:	4650      	mov	r0, sl
 8000534:	e766      	b.n	8000404 <__udivmoddi4+0x1a0>
 8000536:	4608      	mov	r0, r1
 8000538:	e6fd      	b.n	8000336 <__udivmoddi4+0xd2>
 800053a:	443b      	add	r3, r7
 800053c:	3a02      	subs	r2, #2
 800053e:	e733      	b.n	80003a8 <__udivmoddi4+0x144>
 8000540:	f1ac 0c02 	sub.w	ip, ip, #2
 8000544:	443b      	add	r3, r7
 8000546:	e71c      	b.n	8000382 <__udivmoddi4+0x11e>
 8000548:	4649      	mov	r1, r9
 800054a:	e79c      	b.n	8000486 <__udivmoddi4+0x222>
 800054c:	eba1 0109 	sub.w	r1, r1, r9
 8000550:	46c4      	mov	ip, r8
 8000552:	fbb1 f9fe 	udiv	r9, r1, lr
 8000556:	fb09 f804 	mul.w	r8, r9, r4
 800055a:	e7c4      	b.n	80004e6 <__udivmoddi4+0x282>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f103 0208 	add.w	r2, r3, #8
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000578:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f103 0208 	add.w	r2, r3, #8
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f103 0208 	add.w	r2, r3, #8
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000618:	d103      	bne.n	8000622 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	e00c      	b.n	800063c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3308      	adds	r3, #8
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e002      	b.n	8000630 <vListInsert+0x2e>
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	429a      	cmp	r2, r3
 800063a:	d2f6      	bcs.n	800062a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	6892      	ldr	r2, [r2, #8]
 800068a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	6852      	ldr	r2, [r2, #4]
 8000694:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	d103      	bne.n	80006a8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1e5a      	subs	r2, r3, #1
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10b      	bne.n	80006f8 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e4:	f383 8811 	msr	BASEPRI, r3
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	f3bf 8f4f 	dsb	sy
 80006f0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d05d      	beq.n	80007ba <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000702:	2b00      	cmp	r3, #0
 8000704:	d059      	beq.n	80007ba <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800070e:	2100      	movs	r1, #0
 8000710:	fba3 2302 	umull	r2, r3, r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d000      	beq.n	800071a <xQueueGenericReset+0x52>
 8000718:	2101      	movs	r1, #1
 800071a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800071c:	2b00      	cmp	r3, #0
 800071e:	d14c      	bne.n	80007ba <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000720:	f002 fd4c 	bl	80031bc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800072c:	6939      	ldr	r1, [r7, #16]
 800072e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	441a      	add	r2, r3
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	2200      	movs	r2, #0
 800073e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000750:	3b01      	subs	r3, #1
 8000752:	6939      	ldr	r1, [r7, #16]
 8000754:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000756:	fb01 f303 	mul.w	r3, r1, r3
 800075a:	441a      	add	r2, r3
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	22ff      	movs	r2, #255	@ 0xff
 8000764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	22ff      	movs	r2, #255	@ 0xff
 800076c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d114      	bne.n	80007a0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d01a      	beq.n	80007b4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	3310      	adds	r3, #16
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f9dc 	bl	8001b40 <xTaskRemoveFromEventList>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d012      	beq.n	80007b4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <xQueueGenericReset+0x120>)
 8000790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	f3bf 8f6f 	isb	sy
 800079e:	e009      	b.n	80007b4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	3310      	adds	r3, #16
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fedb 	bl	8000560 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	3324      	adds	r3, #36	@ 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fed6 	bl	8000560 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80007b4:	f002 fd34 	bl	8003220 <vPortExitCritical>
 80007b8:	e001      	b.n	80007be <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10b      	bne.n	80007dc <xQueueGenericReset+0x114>
        __asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	60bb      	str	r3, [r7, #8]
    }
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80007dc:	697b      	ldr	r3, [r7, #20]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000ed04 	.word	0xe000ed04

080007ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	4613      	mov	r3, r2
 80007f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d02e      	beq.n	8000862 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000804:	2100      	movs	r1, #0
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	fba3 2302 	umull	r2, r3, r3, r2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d000      	beq.n	8000814 <xQueueGenericCreate+0x28>
 8000812:	2101      	movs	r1, #1
 8000814:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000816:	2b00      	cmp	r3, #0
 8000818:	d123      	bne.n	8000862 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000822:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000826:	d81c      	bhi.n	8000862 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	fb02 f303 	mul.w	r3, r2, r3
 8000830:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	3350      	adds	r3, #80	@ 0x50
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fdea 	bl	8003410 <pvPortMalloc>
 800083c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d01d      	beq.n	8000880 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	3350      	adds	r3, #80	@ 0x50
 800084c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800084e:	79fa      	ldrb	r2, [r7, #7]
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	4613      	mov	r3, r2
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f000 f815 	bl	800088a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000860:	e00e      	b.n	8000880 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <xQueueGenericCreate+0x94>
        __asm volatile
 8000868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086c:	f383 8811 	msr	BASEPRI, r3
 8000870:	f3bf 8f6f 	isb	sy
 8000874:	f3bf 8f4f 	dsb	sy
 8000878:	613b      	str	r3, [r7, #16]
    }
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000880:	69fb      	ldr	r3, [r7, #28]
    }
 8000882:	4618      	mov	r0, r3
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	e002      	b.n	80008ac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008b8:	2101      	movs	r1, #1
 80008ba:	69b8      	ldr	r0, [r7, #24]
 80008bc:	f7ff ff04 	bl	80006c8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	78fa      	ldrb	r2, [r7, #3]
 80008c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	@ 0x38
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80008e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10b      	bne.n	8000904 <xQueueGenericSend+0x34>
        __asm volatile
 80008ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <xQueueGenericSend+0x42>
 800090a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	2b00      	cmp	r3, #0
 8000910:	d101      	bne.n	8000916 <xQueueGenericSend+0x46>
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <xQueueGenericSend+0x48>
 8000916:	2300      	movs	r3, #0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10b      	bne.n	8000934 <xQueueGenericSend+0x64>
        __asm volatile
 800091c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000920:	f383 8811 	msr	BASEPRI, r3
 8000924:	f3bf 8f6f 	isb	sy
 8000928:	f3bf 8f4f 	dsb	sy
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d103      	bne.n	8000942 <xQueueGenericSend+0x72>
 800093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800093c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800093e:	2b01      	cmp	r3, #1
 8000940:	d101      	bne.n	8000946 <xQueueGenericSend+0x76>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <xQueueGenericSend+0x78>
 8000946:	2300      	movs	r3, #0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10b      	bne.n	8000964 <xQueueGenericSend+0x94>
        __asm volatile
 800094c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000950:	f383 8811 	msr	BASEPRI, r3
 8000954:	f3bf 8f6f 	isb	sy
 8000958:	f3bf 8f4f 	dsb	sy
 800095c:	623b      	str	r3, [r7, #32]
    }
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000964:	f001 fb00 	bl	8001f68 <xTaskGetSchedulerState>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <xQueueGenericSend+0xa4>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <xQueueGenericSend+0xa8>
 8000974:	2301      	movs	r3, #1
 8000976:	e000      	b.n	800097a <xQueueGenericSend+0xaa>
 8000978:	2300      	movs	r3, #0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10b      	bne.n	8000996 <xQueueGenericSend+0xc6>
        __asm volatile
 800097e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000982:	f383 8811 	msr	BASEPRI, r3
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	f3bf 8f4f 	dsb	sy
 800098e:	61fb      	str	r3, [r7, #28]
    }
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	e7fd      	b.n	8000992 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000996:	f002 fc11 	bl	80031bc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800099e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d302      	bcc.n	80009ac <xQueueGenericSend+0xdc>
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d129      	bne.n	8000a00 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009b2:	f000 fa46 	bl	8000e42 <prvCopyDataToQueue>
 80009b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d010      	beq.n	80009e2 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c2:	3324      	adds	r3, #36	@ 0x24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f8bb 	bl	8001b40 <xTaskRemoveFromEventList>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d013      	beq.n	80009f8 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009d0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad0 <xQueueGenericSend+0x200>)
 80009d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	f3bf 8f4f 	dsb	sy
 80009dc:	f3bf 8f6f 	isb	sy
 80009e0:	e00a      	b.n	80009f8 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80009e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d007      	beq.n	80009f8 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009e8:	4b39      	ldr	r3, [pc, #228]	@ (8000ad0 <xQueueGenericSend+0x200>)
 80009ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009f8:	f002 fc12 	bl	8003220 <vPortExitCritical>
                return pdPASS;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e063      	b.n	8000ac8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d103      	bne.n	8000a0e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a06:	f002 fc0b 	bl	8003220 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e05c      	b.n	8000ac8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d106      	bne.n	8000a22 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 f969 	bl	8001cf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a22:	f002 fbfd 	bl	8003220 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a26:	f000 fd85 	bl	8001534 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a2a:	f002 fbc7 	bl	80031bc <vPortEnterCritical>
 8000a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a3a:	d103      	bne.n	8000a44 <xQueueGenericSend+0x174>
 8000a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a50:	d103      	bne.n	8000a5a <xQueueGenericSend+0x18a>
 8000a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a5a:	f002 fbe1 	bl	8003220 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a5e:	1d3a      	adds	r2, r7, #4
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f958 	bl	8001d1c <xTaskCheckForTimeOut>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d124      	bne.n	8000abc <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a74:	f000 fadd 	bl	8001032 <prvIsQueueFull>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d018      	beq.n	8000ab0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a80:	3310      	adds	r3, #16
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 ffee 	bl	8001a68 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a8e:	f000 fa68 	bl	8000f62 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a92:	f000 fd5d 	bl	8001550 <xTaskResumeAll>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f af7c 	bne.w	8000996 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <xQueueGenericSend+0x200>)
 8000aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	e772      	b.n	8000996 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ab2:	f000 fa56 	bl	8000f62 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ab6:	f000 fd4b 	bl	8001550 <xTaskResumeAll>
 8000aba:	e76c      	b.n	8000996 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000abe:	f000 fa50 	bl	8000f62 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ac2:	f000 fd45 	bl	8001550 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ac6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3738      	adds	r7, #56	@ 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b092      	sub	sp, #72	@ 0x48
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8000ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10b      	bne.n	8000b04 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8000aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000af0:	f383 8811 	msr	BASEPRI, r3
 8000af4:	f3bf 8f6f 	isb	sy
 8000af8:	f3bf 8f4f 	dsb	sy
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d103      	bne.n	8000b12 <xQueueGenericSendFromISR+0x3e>
 8000b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <xQueueGenericSendFromISR+0x42>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <xQueueGenericSendFromISR+0x44>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10b      	bne.n	8000b34 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8000b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b20:	f383 8811 	msr	BASEPRI, r3
 8000b24:	f3bf 8f6f 	isb	sy
 8000b28:	f3bf 8f4f 	dsb	sy
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d103      	bne.n	8000b42 <xQueueGenericSendFromISR+0x6e>
 8000b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d101      	bne.n	8000b46 <xQueueGenericSendFromISR+0x72>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <xQueueGenericSendFromISR+0x74>
 8000b46:	2300      	movs	r3, #0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10b      	bne.n	8000b64 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8000b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b50:	f383 8811 	msr	BASEPRI, r3
 8000b54:	f3bf 8f6f 	isb	sy
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b64:	f002 fc12 	bl	800338c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b68:	f3ef 8211 	mrs	r2, BASEPRI
 8000b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b70:	f383 8811 	msr	BASEPRI, r3
 8000b74:	f3bf 8f6f 	isb	sy
 8000b78:	f3bf 8f4f 	dsb	sy
 8000b7c:	623a      	str	r2, [r7, #32]
 8000b7e:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b80:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d302      	bcc.n	8000b96 <xQueueGenericSendFromISR+0xc2>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d147      	bne.n	8000c26 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b9c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba4:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000bac:	f000 f949 	bl	8000e42 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bb0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bb8:	d112      	bne.n	8000be0 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d02e      	beq.n	8000c20 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bc4:	3324      	adds	r3, #36	@ 0x24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 ffba 	bl	8001b40 <xTaskRemoveFromEventList>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d026      	beq.n	8000c20 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e01f      	b.n	8000c20 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000be0:	f000 fdc2 	bl	8001768 <uxTaskGetNumberOfTasks>
 8000be4:	6338      	str	r0, [r7, #48]	@ 0x30
 8000be6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d917      	bls.n	8000c20 <xQueueGenericSendFromISR+0x14c>
 8000bf0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf6:	d10b      	bne.n	8000c10 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8000bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	61bb      	str	r3, [r7, #24]
    }
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <xQueueGenericSendFromISR+0x138>
 8000c10:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000c20:	2301      	movs	r3, #1
 8000c22:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8000c24:	e001      	b.n	8000c2a <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c2c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c34:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3748      	adds	r7, #72	@ 0x48
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10b      	bne.n	8000c72 <xQueueReceive+0x32>
        __asm volatile
 8000c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c5e:	f383 8811 	msr	BASEPRI, r3
 8000c62:	f3bf 8f6f 	isb	sy
 8000c66:	f3bf 8f4f 	dsb	sy
 8000c6a:	623b      	str	r3, [r7, #32]
    }
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	e7fd      	b.n	8000c6e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d103      	bne.n	8000c80 <xQueueReceive+0x40>
 8000c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <xQueueReceive+0x44>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <xQueueReceive+0x46>
 8000c84:	2300      	movs	r3, #0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10b      	bne.n	8000ca2 <xQueueReceive+0x62>
        __asm volatile
 8000c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c8e:	f383 8811 	msr	BASEPRI, r3
 8000c92:	f3bf 8f6f 	isb	sy
 8000c96:	f3bf 8f4f 	dsb	sy
 8000c9a:	61fb      	str	r3, [r7, #28]
    }
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	e7fd      	b.n	8000c9e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ca2:	f001 f961 	bl	8001f68 <xTaskGetSchedulerState>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <xQueueReceive+0x72>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <xQueueReceive+0x76>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <xQueueReceive+0x78>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10b      	bne.n	8000cd4 <xQueueReceive+0x94>
        __asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	61bb      	str	r3, [r7, #24]
    }
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cd4:	f002 fa72 	bl	80031bc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d01f      	beq.n	8000d24 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ce8:	f000 f915 	bl	8000f16 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00f      	beq.n	8000d1c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfe:	3310      	adds	r3, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 ff1d 	bl	8001b40 <xTaskRemoveFromEventList>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d007      	beq.n	8000d1c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e00 <xQueueReceive+0x1c0>)
 8000d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	f3bf 8f4f 	dsb	sy
 8000d18:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d1c:	f002 fa80 	bl	8003220 <vPortExitCritical>
                return pdPASS;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e069      	b.n	8000df8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d103      	bne.n	8000d32 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d2a:	f002 fa79 	bl	8003220 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e062      	b.n	8000df8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d106      	bne.n	8000d46 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 ffd7 	bl	8001cf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d46:	f002 fa6b 	bl	8003220 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d4a:	f000 fbf3 	bl	8001534 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d4e:	f002 fa35 	bl	80031bc <vPortEnterCritical>
 8000d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d5e:	d103      	bne.n	8000d68 <xQueueReceive+0x128>
 8000d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d74:	d103      	bne.n	8000d7e <xQueueReceive+0x13e>
 8000d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000d7e:	f002 fa4f 	bl	8003220 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d82:	1d3a      	adds	r2, r7, #4
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 ffc6 	bl	8001d1c <xTaskCheckForTimeOut>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d123      	bne.n	8000dde <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d98:	f000 f935 	bl	8001006 <prvIsQueueEmpty>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d017      	beq.n	8000dd2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da4:	3324      	adds	r3, #36	@ 0x24
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fe5c 	bl	8001a68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000db0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000db2:	f000 f8d6 	bl	8000f62 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000db6:	f000 fbcb 	bl	8001550 <xTaskResumeAll>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d189      	bne.n	8000cd4 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <xQueueReceive+0x1c0>)
 8000dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	f3bf 8f4f 	dsb	sy
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	e780      	b.n	8000cd4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000dd4:	f000 f8c5 	bl	8000f62 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000dd8:	f000 fbba 	bl	8001550 <xTaskResumeAll>
 8000ddc:	e77a      	b.n	8000cd4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000de0:	f000 f8bf 	bl	8000f62 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000de4:	f000 fbb4 	bl	8001550 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000de8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000dea:	f000 f90c 	bl	8001006 <prvIsQueueEmpty>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f43f af6f 	beq.w	8000cd4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000df6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3730      	adds	r7, #48	@ 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	e000ed04 	.word	0xe000ed04

08000e04 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10b      	bne.n	8000e2a <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8000e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e16:	f383 8811 	msr	BASEPRI, r3
 8000e1a:	f3bf 8f6f 	isb	sy
 8000e1e:	f3bf 8f4f 	dsb	sy
 8000e22:	60bb      	str	r3, [r7, #8]
    }
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	e7fd      	b.n	8000e26 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8000e2a:	f002 f9c7 	bl	80031bc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e32:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000e34:	f002 f9f4 	bl	8003220 <vPortExitCritical>

    return uxReturn;
 8000e38:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e56:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10d      	bne.n	8000e7c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d14d      	bne.n	8000f04 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 f899 	bl	8001fa4 <xTaskPriorityDisinherit>
 8000e72:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	e043      	b.n	8000f04 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d119      	bne.n	8000eb6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6858      	ldr	r0, [r3, #4]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	f006 fc67 	bl	8007760 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	441a      	add	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d32b      	bcc.n	8000f04 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	e026      	b.n	8000f04 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68d8      	ldr	r0, [r3, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	f006 fc4d 	bl	8007760 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	425b      	negs	r3, r3
 8000ed0:	441a      	add	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d207      	bcs.n	8000ef2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	425b      	negs	r3, r3
 8000eec:	441a      	add	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d105      	bne.n	8000f04 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000f0c:	697b      	ldr	r3, [r7, #20]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d018      	beq.n	8000f5a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	441a      	add	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d303      	bcc.n	8000f4a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68d9      	ldr	r1, [r3, #12]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	461a      	mov	r2, r3
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f006 fc03 	bl	8007760 <memcpy>
    }
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f6a:	f002 f927 	bl	80031bc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f74:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f76:	e011      	b.n	8000f9c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d012      	beq.n	8000fa6 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3324      	adds	r3, #36	@ 0x24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fddb 	bl	8001b40 <xTaskRemoveFromEventList>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000f90:	f000 ff2c 	bl	8001dec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dce9      	bgt.n	8000f78 <prvUnlockQueue+0x16>
 8000fa4:	e000      	b.n	8000fa8 <prvUnlockQueue+0x46>
                    break;
 8000fa6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	22ff      	movs	r2, #255	@ 0xff
 8000fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000fb0:	f002 f936 	bl	8003220 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000fb4:	f002 f902 	bl	80031bc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fbe:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fc0:	e011      	b.n	8000fe6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d012      	beq.n	8000ff0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3310      	adds	r3, #16
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fdb6 	bl	8001b40 <xTaskRemoveFromEventList>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000fda:	f000 ff07 	bl	8001dec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	dce9      	bgt.n	8000fc2 <prvUnlockQueue+0x60>
 8000fee:	e000      	b.n	8000ff2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000ff0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	22ff      	movs	r2, #255	@ 0xff
 8000ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000ffa:	f002 f911 	bl	8003220 <vPortExitCritical>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800100e:	f002 f8d5 	bl	80031bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e001      	b.n	8001024 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001024:	f002 f8fc 	bl	8003220 <vPortExitCritical>

    return xReturn;
 8001028:	68fb      	ldr	r3, [r7, #12]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800103a:	f002 f8bf 	bl	80031bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001046:	429a      	cmp	r2, r3
 8001048:	d102      	bne.n	8001050 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800104a:	2301      	movs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e001      	b.n	8001054 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001054:	f002 f8e4 	bl	8003220 <vPortExitCritical>

    return xReturn;
 8001058:	68fb      	ldr	r3, [r7, #12]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001062:	b480      	push	{r7}
 8001064:	b087      	sub	sp, #28
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10b      	bne.n	800108c <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	60fb      	str	r3, [r7, #12]
    }
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001094:	429a      	cmp	r2, r3
 8001096:	d102      	bne.n	800109e <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e001      	b.n	80010a2 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80010a2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80010a4:	4618      	mov	r0, r3
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10b      	bne.n	80010dc <vQueueAddToRegistry+0x2c>
        __asm volatile
 80010c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010c8:	f383 8811 	msr	BASEPRI, r3
 80010cc:	f3bf 8f6f 	isb	sy
 80010d0:	f3bf 8f4f 	dsb	sy
 80010d4:	60fb      	str	r3, [r7, #12]
    }
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d024      	beq.n	800112c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e01e      	b.n	8001126 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80010e8:	4a18      	ldr	r2, [pc, #96]	@ (800114c <vQueueAddToRegistry+0x9c>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d105      	bne.n	8001104 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4a13      	ldr	r2, [pc, #76]	@ (800114c <vQueueAddToRegistry+0x9c>)
 80010fe:	4413      	add	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
                    break;
 8001102:	e013      	b.n	800112c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10a      	bne.n	8001120 <vQueueAddToRegistry+0x70>
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <vQueueAddToRegistry+0x9c>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d104      	bne.n	8001120 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <vQueueAddToRegistry+0x9c>)
 800111c:	4413      	add	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b07      	cmp	r3, #7
 800112a:	d9dd      	bls.n	80010e8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000048 	.word	0x20000048

08001150 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001160:	f002 f82c 	bl	80031bc <vPortEnterCritical>
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800116a:	b25b      	sxtb	r3, r3
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001170:	d103      	bne.n	800117a <vQueueWaitForMessageRestricted+0x2a>
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001180:	b25b      	sxtb	r3, r3
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001186:	d103      	bne.n	8001190 <vQueueWaitForMessageRestricted+0x40>
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001190:	f002 f846 	bl	8003220 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001198:	2b00      	cmp	r3, #0
 800119a:	d106      	bne.n	80011aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3324      	adds	r3, #36	@ 0x24
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fc85 	bl	8001ab4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff fed9 	bl	8000f62 <prvUnlockQueue>
    }
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	@ 0x30
 80011bc:	af04      	add	r7, sp, #16
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	4613      	mov	r3, r2
 80011c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 f91f 	bl	8003410 <pvPortMalloc>
 80011d2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d013      	beq.n	8001202 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011da:	2058      	movs	r0, #88	@ 0x58
 80011dc:	f002 f918 	bl	8003410 <pvPortMalloc>
 80011e0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80011e8:	2258      	movs	r2, #88	@ 0x58
 80011ea:	2100      	movs	r1, #0
 80011ec:	69f8      	ldr	r0, [r7, #28]
 80011ee:	f006 fa8b 	bl	8007708 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f8:	e005      	b.n	8001206 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f002 f9c4 	bl	8003588 <vPortFree>
 8001200:	e001      	b.n	8001206 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d013      	beq.n	8001234 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800120c:	88fa      	ldrh	r2, [r7, #6]
 800120e:	2300      	movs	r3, #0
 8001210:	9303      	str	r3, [sp, #12]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f80e 	bl	8001244 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001228:	69f8      	ldr	r0, [r7, #28]
 800122a:	f000 f89b 	bl	8001364 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	e002      	b.n	800123a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001238:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800123a:	69bb      	ldr	r3, [r7, #24]
    }
 800123c:	4618      	mov	r0, r3
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001254:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	461a      	mov	r2, r3
 800125c:	21a5      	movs	r1, #165	@ 0xa5
 800125e:	f006 fa53 	bl	8007708 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800126c:	3b01      	subs	r3, #1
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	f023 0307 	bic.w	r3, r3, #7
 800127a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <prvInitialiseNewTask+0x5a>
        __asm volatile
 8001286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800128a:	f383 8811 	msr	BASEPRI, r3
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	f3bf 8f4f 	dsb	sy
 8001296:	617b      	str	r3, [r7, #20]
    }
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	e7fd      	b.n	800129a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01e      	beq.n	80012e2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e012      	b.n	80012d0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	4413      	add	r3, r2
 80012b0:	7819      	ldrb	r1, [r3, #0]
 80012b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	4413      	add	r3, r2
 80012b8:	3334      	adds	r3, #52	@ 0x34
 80012ba:	460a      	mov	r2, r1
 80012bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d9e9      	bls.n	80012aa <prvInitialiseNewTask+0x66>
 80012d6:	e000      	b.n	80012da <prvInitialiseNewTask+0x96>
            {
                break;
 80012d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80012e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d90b      	bls.n	8001300 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80012e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ec:	f383 8811 	msr	BASEPRI, r3
 80012f0:	f3bf 8f6f 	isb	sy
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	613b      	str	r3, [r7, #16]
    }
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001302:	2b04      	cmp	r3, #4
 8001304:	d901      	bls.n	800130a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001306:	2304      	movs	r3, #4
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800130a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800130c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800130e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001314:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001318:	3304      	adds	r3, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f940 	bl	80005a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001322:	3318      	adds	r3, #24
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f93b 	bl	80005a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800132a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800132c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800132e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001332:	f1c3 0205 	rsb	r2, r3, #5
 8001336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001338:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800133a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800133c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	69b8      	ldr	r0, [r7, #24]
 8001346:	f001 fd85 	bl	8002e54 <pxPortInitialiseStack>
 800134a:	4602      	mov	r2, r0
 800134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800135a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800136c:	f001 ff26 	bl	80031bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001370:	4b40      	ldr	r3, [pc, #256]	@ (8001474 <prvAddNewTaskToReadyList+0x110>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a3f      	ldr	r2, [pc, #252]	@ (8001474 <prvAddNewTaskToReadyList+0x110>)
 8001378:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800137a:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <prvAddNewTaskToReadyList+0x114>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001382:	4a3d      	ldr	r2, [pc, #244]	@ (8001478 <prvAddNewTaskToReadyList+0x114>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001388:	4b3a      	ldr	r3, [pc, #232]	@ (8001474 <prvAddNewTaskToReadyList+0x110>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d110      	bne.n	80013b2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001390:	f000 fd50 	bl	8001e34 <prvInitialiseTaskLists>
 8001394:	e00d      	b.n	80013b2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001396:	4b39      	ldr	r3, [pc, #228]	@ (800147c <prvAddNewTaskToReadyList+0x118>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800139e:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <prvAddNewTaskToReadyList+0x114>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d802      	bhi.n	80013b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80013ac:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <prvAddNewTaskToReadyList+0x114>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <prvAddNewTaskToReadyList+0x11c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a31      	ldr	r2, [pc, #196]	@ (8001480 <prvAddNewTaskToReadyList+0x11c>)
 80013ba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013bc:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <prvAddNewTaskToReadyList+0x11c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c8:	2201      	movs	r2, #1
 80013ca:	409a      	lsls	r2, r3
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <prvAddNewTaskToReadyList+0x120>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001484 <prvAddNewTaskToReadyList+0x120>)
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013da:	492b      	ldr	r1, [pc, #172]	@ (8001488 <prvAddNewTaskToReadyList+0x124>)
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3304      	adds	r3, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	3204      	adds	r2, #4
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	1d1a      	adds	r2, r3, #4
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <prvAddNewTaskToReadyList+0x124>)
 800141a:	441a      	add	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001424:	4918      	ldr	r1, [pc, #96]	@ (8001488 <prvAddNewTaskToReadyList+0x124>)
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1c59      	adds	r1, r3, #1
 8001434:	4814      	ldr	r0, [pc, #80]	@ (8001488 <prvAddNewTaskToReadyList+0x124>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4403      	add	r3, r0
 8001440:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001442:	f001 feed 	bl	8003220 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <prvAddNewTaskToReadyList+0x118>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00e      	beq.n	800146c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <prvAddNewTaskToReadyList+0x114>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <prvAddNewTaskToReadyList+0x128>)
 800145e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	f3bf 8f4f 	dsb	sy
 8001468:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000160 	.word	0x20000160
 8001478:	20000088 	.word	0x20000088
 800147c:	2000016c 	.word	0x2000016c
 8001480:	2000017c 	.word	0x2000017c
 8001484:	20000168 	.word	0x20000168
 8001488:	2000008c 	.word	0x2000008c
 800148c:	e000ed04 	.word	0xe000ed04

08001490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <vTaskStartScheduler+0x88>)
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	2300      	movs	r3, #0
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	2282      	movs	r2, #130	@ 0x82
 80014a2:	491e      	ldr	r1, [pc, #120]	@ (800151c <vTaskStartScheduler+0x8c>)
 80014a4:	481e      	ldr	r0, [pc, #120]	@ (8001520 <vTaskStartScheduler+0x90>)
 80014a6:	f7ff fe87 	bl	80011b8 <xTaskCreate>
 80014aa:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d102      	bne.n	80014b8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80014b2:	f001 f979 	bl	80027a8 <xTimerCreateTimerTask>
 80014b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d116      	bne.n	80014ec <vTaskStartScheduler+0x5c>
        __asm volatile
 80014be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014c2:	f383 8811 	msr	BASEPRI, r3
 80014c6:	f3bf 8f6f 	isb	sy
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	60bb      	str	r3, [r7, #8]
    }
 80014d0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <vTaskStartScheduler+0x94>)
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <vTaskStartScheduler+0x98>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <vTaskStartScheduler+0x9c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80014e6:	f001 fd45 	bl	8002f74 <xPortStartScheduler>
 80014ea:	e00f      	b.n	800150c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014f2:	d10b      	bne.n	800150c <vTaskStartScheduler+0x7c>
        __asm volatile
 80014f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014f8:	f383 8811 	msr	BASEPRI, r3
 80014fc:	f3bf 8f6f 	isb	sy
 8001500:	f3bf 8f4f 	dsb	sy
 8001504:	607b      	str	r3, [r7, #4]
    }
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <vTaskStartScheduler+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000184 	.word	0x20000184
 800151c:	08007794 	.word	0x08007794
 8001520:	08001e05 	.word	0x08001e05
 8001524:	20000180 	.word	0x20000180
 8001528:	2000016c 	.word	0x2000016c
 800152c:	20000164 	.word	0x20000164
 8001530:	08007b60 	.word	0x08007b60

08001534 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <vTaskSuspendAll+0x18>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a03      	ldr	r2, [pc, #12]	@ (800154c <vTaskSuspendAll+0x18>)
 8001540:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	20000188 	.word	0x20000188

08001550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800155e:	4b71      	ldr	r3, [pc, #452]	@ (8001724 <xTaskResumeAll+0x1d4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10b      	bne.n	800157e <xTaskResumeAll+0x2e>
        __asm volatile
 8001566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800156a:	f383 8811 	msr	BASEPRI, r3
 800156e:	f3bf 8f6f 	isb	sy
 8001572:	f3bf 8f4f 	dsb	sy
 8001576:	607b      	str	r3, [r7, #4]
    }
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	e7fd      	b.n	800157a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800157e:	f001 fe1d 	bl	80031bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001582:	4b68      	ldr	r3, [pc, #416]	@ (8001724 <xTaskResumeAll+0x1d4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3b01      	subs	r3, #1
 8001588:	4a66      	ldr	r2, [pc, #408]	@ (8001724 <xTaskResumeAll+0x1d4>)
 800158a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800158c:	4b65      	ldr	r3, [pc, #404]	@ (8001724 <xTaskResumeAll+0x1d4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 80c0 	bne.w	8001716 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001596:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <xTaskResumeAll+0x1d8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80bb 	beq.w	8001716 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015a0:	e08a      	b.n	80016b8 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015a2:	4b62      	ldr	r3, [pc, #392]	@ (800172c <xTaskResumeAll+0x1dc>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	6a12      	ldr	r2, [r2, #32]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	69d2      	ldr	r2, [r2, #28]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3318      	adds	r3, #24
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d103      	bne.n	80015d8 <xTaskResumeAll+0x88>
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2200      	movs	r2, #0
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	68d2      	ldr	r2, [r2, #12]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	6892      	ldr	r2, [r2, #8]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	429a      	cmp	r2, r3
 800160c:	d103      	bne.n	8001616 <xTaskResumeAll+0xc6>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162a:	2201      	movs	r2, #1
 800162c:	409a      	lsls	r2, r3
 800162e:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <xTaskResumeAll+0x1e0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4313      	orrs	r3, r2
 8001634:	4a3e      	ldr	r2, [pc, #248]	@ (8001730 <xTaskResumeAll+0x1e0>)
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800163c:	493d      	ldr	r1, [pc, #244]	@ (8001734 <xTaskResumeAll+0x1e4>)
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3304      	adds	r3, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	3204      	adds	r2, #4
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1d1a      	adds	r2, r3, #4
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4a2e      	ldr	r2, [pc, #184]	@ (8001734 <xTaskResumeAll+0x1e4>)
 800167c:	441a      	add	r2, r3
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001686:	492b      	ldr	r1, [pc, #172]	@ (8001734 <xTaskResumeAll+0x1e4>)
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1c59      	adds	r1, r3, #1
 8001696:	4827      	ldr	r0, [pc, #156]	@ (8001734 <xTaskResumeAll+0x1e4>)
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4403      	add	r3, r0
 80016a2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <xTaskResumeAll+0x1e8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d302      	bcc.n	80016b8 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <xTaskResumeAll+0x1ec>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <xTaskResumeAll+0x1dc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f af70 	bne.w	80015a2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80016c8:	f000 fc32 	bl	8001f30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80016cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <xTaskResumeAll+0x1f0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d010      	beq.n	80016fa <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80016d8:	f000 f852 	bl	8001780 <xTaskIncrementTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <xTaskResumeAll+0x1ec>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f1      	bne.n	80016d8 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <xTaskResumeAll+0x1f0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <xTaskResumeAll+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <xTaskResumeAll+0x1f4>)
 8001708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001716:	f001 fd83 	bl	8003220 <vPortExitCritical>

    return xAlreadyYielded;
 800171a:	69bb      	ldr	r3, [r7, #24]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000188 	.word	0x20000188
 8001728:	20000160 	.word	0x20000160
 800172c:	20000120 	.word	0x20000120
 8001730:	20000168 	.word	0x20000168
 8001734:	2000008c 	.word	0x2000008c
 8001738:	20000088 	.word	0x20000088
 800173c:	20000174 	.word	0x20000174
 8001740:	20000170 	.word	0x20000170
 8001744:	e000ed04 	.word	0xe000ed04

08001748 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <xTaskGetTickCount+0x1c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001754:	687b      	ldr	r3, [r7, #4]
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000164 	.word	0x20000164

08001768 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <uxTaskGetNumberOfTasks+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000160 	.word	0x20000160

08001780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800178a:	4b7e      	ldr	r3, [pc, #504]	@ (8001984 <xTaskIncrementTick+0x204>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 80ed 	bne.w	800196e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001794:	4b7c      	ldr	r3, [pc, #496]	@ (8001988 <xTaskIncrementTick+0x208>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800179c:	4a7a      	ldr	r2, [pc, #488]	@ (8001988 <xTaskIncrementTick+0x208>)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d121      	bne.n	80017ec <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80017a8:	4b78      	ldr	r3, [pc, #480]	@ (800198c <xTaskIncrementTick+0x20c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <xTaskIncrementTick+0x4a>
        __asm volatile
 80017b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	607b      	str	r3, [r7, #4]
    }
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	e7fd      	b.n	80017c6 <xTaskIncrementTick+0x46>
 80017ca:	4b70      	ldr	r3, [pc, #448]	@ (800198c <xTaskIncrementTick+0x20c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001990 <xTaskIncrementTick+0x210>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6d      	ldr	r2, [pc, #436]	@ (800198c <xTaskIncrementTick+0x20c>)
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4a6d      	ldr	r2, [pc, #436]	@ (8001990 <xTaskIncrementTick+0x210>)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <xTaskIncrementTick+0x214>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a6b      	ldr	r2, [pc, #428]	@ (8001994 <xTaskIncrementTick+0x214>)
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	f000 fba2 	bl	8001f30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80017ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001998 <xTaskIncrementTick+0x218>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	f0c0 80a6 	bcc.w	8001944 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017f8:	4b64      	ldr	r3, [pc, #400]	@ (800198c <xTaskIncrementTick+0x20c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001802:	4b65      	ldr	r3, [pc, #404]	@ (8001998 <xTaskIncrementTick+0x218>)
 8001804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001808:	601a      	str	r2, [r3, #0]
                    break;
 800180a:	e09b      	b.n	8001944 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800180c:	4b5f      	ldr	r3, [pc, #380]	@ (800198c <xTaskIncrementTick+0x20c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	d203      	bcs.n	800182c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001824:	4a5c      	ldr	r2, [pc, #368]	@ (8001998 <xTaskIncrementTick+0x218>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800182a:	e08b      	b.n	8001944 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	68d2      	ldr	r2, [r2, #12]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	6892      	ldr	r2, [r2, #8]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	3304      	adds	r3, #4
 800184e:	429a      	cmp	r2, r3
 8001850:	d103      	bne.n	800185a <xTaskIncrementTick+0xda>
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01e      	beq.n	80018b0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	6a12      	ldr	r2, [r2, #32]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	69d2      	ldr	r2, [r2, #28]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	3318      	adds	r3, #24
 8001894:	429a      	cmp	r2, r3
 8001896:	d103      	bne.n	80018a0 <xTaskIncrementTick+0x120>
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	2201      	movs	r2, #1
 80018b6:	409a      	lsls	r2, r3
 80018b8:	4b38      	ldr	r3, [pc, #224]	@ (800199c <xTaskIncrementTick+0x21c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	4a37      	ldr	r2, [pc, #220]	@ (800199c <xTaskIncrementTick+0x21c>)
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c6:	4936      	ldr	r1, [pc, #216]	@ (80019a0 <xTaskIncrementTick+0x220>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	3204      	adds	r2, #4
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1d1a      	adds	r2, r3, #4
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4a26      	ldr	r2, [pc, #152]	@ (80019a0 <xTaskIncrementTick+0x220>)
 8001906:	441a      	add	r2, r3
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001910:	4923      	ldr	r1, [pc, #140]	@ (80019a0 <xTaskIncrementTick+0x220>)
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	481f      	ldr	r0, [pc, #124]	@ (80019a0 <xTaskIncrementTick+0x220>)
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4403      	add	r3, r0
 800192c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <xTaskIncrementTick+0x224>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	429a      	cmp	r2, r3
 800193a:	f67f af5d 	bls.w	80017f8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001942:	e759      	b.n	80017f8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <xTaskIncrementTick+0x224>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800194a:	4915      	ldr	r1, [pc, #84]	@ (80019a0 <xTaskIncrementTick+0x220>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d901      	bls.n	8001960 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <xTaskIncrementTick+0x228>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001968:	2301      	movs	r3, #1
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
 800196c:	e004      	b.n	8001978 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <xTaskIncrementTick+0x22c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <xTaskIncrementTick+0x22c>)
 8001976:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800197a:	4618      	mov	r0, r3
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000188 	.word	0x20000188
 8001988:	20000164 	.word	0x20000164
 800198c:	20000118 	.word	0x20000118
 8001990:	2000011c 	.word	0x2000011c
 8001994:	20000178 	.word	0x20000178
 8001998:	20000180 	.word	0x20000180
 800199c:	20000168 	.word	0x20000168
 80019a0:	2000008c 	.word	0x2000008c
 80019a4:	20000088 	.word	0x20000088
 80019a8:	20000174 	.word	0x20000174
 80019ac:	20000170 	.word	0x20000170

080019b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019b6:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <vTaskSwitchContext+0xa4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80019be:	4b26      	ldr	r3, [pc, #152]	@ (8001a58 <vTaskSwitchContext+0xa8>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80019c4:	e040      	b.n	8001a48 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80019c6:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <vTaskSwitchContext+0xa8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019cc:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <vTaskSwitchContext+0xac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80019da:	7afb      	ldrb	r3, [r7, #11]
 80019dc:	f1c3 031f 	rsb	r3, r3, #31
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	491f      	ldr	r1, [pc, #124]	@ (8001a60 <vTaskSwitchContext+0xb0>)
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10b      	bne.n	8001a0e <vTaskSwitchContext+0x5e>
        __asm volatile
 80019f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019fa:	f383 8811 	msr	BASEPRI, r3
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	607b      	str	r3, [r7, #4]
    }
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	e7fd      	b.n	8001a0a <vTaskSwitchContext+0x5a>
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4a11      	ldr	r2, [pc, #68]	@ (8001a60 <vTaskSwitchContext+0xb0>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	3308      	adds	r3, #8
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d104      	bne.n	8001a3e <vTaskSwitchContext+0x8e>
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <vTaskSwitchContext+0xb4>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000188 	.word	0x20000188
 8001a58:	20000174 	.word	0x20000174
 8001a5c:	20000168 	.word	0x20000168
 8001a60:	2000008c 	.word	0x2000008c
 8001a64:	20000088 	.word	0x20000088

08001a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10b      	bne.n	8001a90 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8001a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	60fb      	str	r3, [r7, #12]
    }
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <vTaskPlaceOnEventList+0x48>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3318      	adds	r3, #24
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fdb2 	bl	8000602 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f000 fe01 	bl	80026a8 <prvAddCurrentTaskToDelayedList>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000088 	.word	0x20000088

08001ab4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10b      	bne.n	8001ade <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8001ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	f3bf 8f6f 	isb	sy
 8001ad2:	f3bf 8f4f 	dsb	sy
 8001ad6:	613b      	str	r3, [r7, #16]
    }
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	e7fd      	b.n	8001ada <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <vTaskPlaceOnEventListRestricted+0x88>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	61da      	str	r2, [r3, #28]
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <vTaskPlaceOnEventListRestricted+0x88>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6892      	ldr	r2, [r2, #8]
 8001af4:	621a      	str	r2, [r3, #32]
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <vTaskPlaceOnEventListRestricted+0x88>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	3218      	adds	r2, #24
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <vTaskPlaceOnEventListRestricted+0x88>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f103 0218 	add.w	r2, r3, #24
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <vTaskPlaceOnEventListRestricted+0x88>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b2a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	68b8      	ldr	r0, [r7, #8]
 8001b30:	f000 fdba 	bl	80026a8 <prvAddCurrentTaskToDelayedList>
    }
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000088 	.word	0x20000088

08001b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b40:	b480      	push	{r7}
 8001b42:	b08b      	sub	sp, #44	@ 0x2c
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	60fb      	str	r3, [r7, #12]
    }
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	e7fd      	b.n	8001b6a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	6a12      	ldr	r2, [r2, #32]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	6a3a      	ldr	r2, [r7, #32]
 8001b84:	69d2      	ldr	r2, [r2, #28]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	3318      	adds	r3, #24
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d103      	bne.n	8001b9c <xTaskRemoveFromEventList+0x5c>
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	6a1a      	ldr	r2, [r3, #32]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bac:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <xTaskRemoveFromEventList+0x198>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d15e      	bne.n	8001c72 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	6a3a      	ldr	r2, [r7, #32]
 8001bc0:	68d2      	ldr	r2, [r2, #12]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	6892      	ldr	r2, [r2, #8]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d103      	bne.n	8001be2 <xTaskRemoveFromEventList+0xa2>
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <xTaskRemoveFromEventList+0x19c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	4a36      	ldr	r2, [pc, #216]	@ (8001cdc <xTaskRemoveFromEventList+0x19c>)
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c08:	4935      	ldr	r1, [pc, #212]	@ (8001ce0 <xTaskRemoveFromEventList+0x1a0>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	3304      	adds	r3, #4
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	3204      	adds	r2, #4
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	1d1a      	adds	r2, r3, #4
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a26      	ldr	r2, [pc, #152]	@ (8001ce0 <xTaskRemoveFromEventList+0x1a0>)
 8001c48:	441a      	add	r2, r3
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	615a      	str	r2, [r3, #20]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c52:	4923      	ldr	r1, [pc, #140]	@ (8001ce0 <xTaskRemoveFromEventList+0x1a0>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c59      	adds	r1, r3, #1
 8001c62:	481f      	ldr	r0, [pc, #124]	@ (8001ce0 <xTaskRemoveFromEventList+0x1a0>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4403      	add	r3, r0
 8001c6e:	6019      	str	r1, [r3, #0]
 8001c70:	e01b      	b.n	8001caa <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <xTaskRemoveFromEventList+0x1a4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	61da      	str	r2, [r3, #28]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	621a      	str	r2, [r3, #32]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	3218      	adds	r2, #24
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f103 0218 	add.w	r2, r3, #24
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <xTaskRemoveFromEventList+0x1a4>)
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ca0:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <xTaskRemoveFromEventList+0x1a4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <xTaskRemoveFromEventList+0x1a4>)
 8001ca8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <xTaskRemoveFromEventList+0x1a8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d905      	bls.n	8001cc4 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <xTaskRemoveFromEventList+0x1ac>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e001      	b.n	8001cc8 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	372c      	adds	r7, #44	@ 0x2c
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000188 	.word	0x20000188
 8001cdc:	20000168 	.word	0x20000168
 8001ce0:	2000008c 	.word	0x2000008c
 8001ce4:	20000120 	.word	0x20000120
 8001ce8:	20000088 	.word	0x20000088
 8001cec:	20000174 	.word	0x20000174

08001cf0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <vTaskInternalSetTimeOutState+0x24>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <vTaskInternalSetTimeOutState+0x28>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000178 	.word	0x20000178
 8001d18:	20000164 	.word	0x20000164

08001d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	613b      	str	r3, [r7, #16]
    }
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10b      	bne.n	8001d62 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	60fb      	str	r3, [r7, #12]
    }
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001d62:	f001 fa2b 	bl	80031bc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001d66:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <xTaskCheckForTimeOut+0xc8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d7e:	d102      	bne.n	8001d86 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e026      	b.n	8001dd4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <xTaskCheckForTimeOut+0xcc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d00a      	beq.n	8001da8 <xTaskCheckForTimeOut+0x8c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d305      	bcc.n	8001da8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e015      	b.n	8001dd4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d20b      	bcs.n	8001dca <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff96 	bl	8001cf0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	e004      	b.n	8001dd4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001dd4:	f001 fa24 	bl	8003220 <vPortExitCritical>

    return xReturn;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000164 	.word	0x20000164
 8001de8:	20000178 	.word	0x20000178

08001dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001df0:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <vTaskMissedYield+0x14>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000174 	.word	0x20000174

08001e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001e0c:	f000 f852 	bl	8001eb4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <prvIdleTask+0x28>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d9f9      	bls.n	8001e0c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <prvIdleTask+0x2c>)
 8001e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001e28:	e7f0      	b.n	8001e0c <prvIdleTask+0x8>
 8001e2a:	bf00      	nop
 8001e2c:	2000008c 	.word	0x2000008c
 8001e30:	e000ed04 	.word	0xe000ed04

08001e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e00c      	b.n	8001e5a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <prvInitialiseTaskLists+0x60>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb86 	bl	8000560 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3301      	adds	r3, #1
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d9ef      	bls.n	8001e40 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001e60:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <prvInitialiseTaskLists+0x64>)
 8001e62:	f7fe fb7d 	bl	8000560 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001e66:	480d      	ldr	r0, [pc, #52]	@ (8001e9c <prvInitialiseTaskLists+0x68>)
 8001e68:	f7fe fb7a 	bl	8000560 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <prvInitialiseTaskLists+0x6c>)
 8001e6e:	f7fe fb77 	bl	8000560 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001e72:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <prvInitialiseTaskLists+0x70>)
 8001e74:	f7fe fb74 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001e78:	480b      	ldr	r0, [pc, #44]	@ (8001ea8 <prvInitialiseTaskLists+0x74>)
 8001e7a:	f7fe fb71 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <prvInitialiseTaskLists+0x78>)
 8001e80:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <prvInitialiseTaskLists+0x64>)
 8001e82:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <prvInitialiseTaskLists+0x7c>)
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <prvInitialiseTaskLists+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000008c 	.word	0x2000008c
 8001e98:	200000f0 	.word	0x200000f0
 8001e9c:	20000104 	.word	0x20000104
 8001ea0:	20000120 	.word	0x20000120
 8001ea4:	20000134 	.word	0x20000134
 8001ea8:	2000014c 	.word	0x2000014c
 8001eac:	20000118 	.word	0x20000118
 8001eb0:	2000011c 	.word	0x2000011c

08001eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001eba:	e019      	b.n	8001ef0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001ebc:	f001 f97e 	bl	80031bc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ec0:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <prvCheckTasksWaitingTermination+0x50>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fbd1 	bl	8000674 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <prvCheckTasksWaitingTermination+0x54>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <prvCheckTasksWaitingTermination+0x54>)
 8001eda:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <prvCheckTasksWaitingTermination+0x58>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <prvCheckTasksWaitingTermination+0x58>)
 8001ee4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001ee6:	f001 f99b 	bl	8003220 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f810 	bl	8001f10 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <prvCheckTasksWaitingTermination+0x58>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e1      	bne.n	8001ebc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000134 	.word	0x20000134
 8001f08:	20000160 	.word	0x20000160
 8001f0c:	20000148 	.word	0x20000148

08001f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 fb33 	bl	8003588 <vPortFree>
            vPortFree( pxTCB );
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 fb30 	bl	8003588 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <prvResetNextTaskUnblockTime+0x30>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d104      	bne.n	8001f48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <prvResetNextTaskUnblockTime+0x34>)
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001f46:	e005      	b.n	8001f54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <prvResetNextTaskUnblockTime+0x30>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <prvResetNextTaskUnblockTime+0x34>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000118 	.word	0x20000118
 8001f64:	20000180 	.word	0x20000180

08001f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <xTaskGetSchedulerState+0x34>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001f76:	2301      	movs	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	e008      	b.n	8001f8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <xTaskGetSchedulerState+0x38>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001f84:	2302      	movs	r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	e001      	b.n	8001f8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001f8e:	687b      	ldr	r3, [r7, #4]
    }
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	2000016c 	.word	0x2000016c
 8001fa0:	20000188 	.word	0x20000188

08001fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d065      	beq.n	8002086 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001fba:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <xTaskPriorityDisinherit+0xec>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d00b      	beq.n	8001fdc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	60fb      	str	r3, [r7, #12]
    }
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8001fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	60bb      	str	r3, [r7, #8]
    }
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200e:	429a      	cmp	r2, r3
 8002010:	d039      	beq.n	8002086 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d135      	bne.n	8002086 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	3304      	adds	r3, #4
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fb28 	bl	8000674 <uxListRemove>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202e:	2201      	movs	r2, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43da      	mvns	r2, r3
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <xTaskPriorityDisinherit+0xf0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4013      	ands	r3, r2
 800203c:	4a15      	ldr	r2, [pc, #84]	@ (8002094 <xTaskPriorityDisinherit+0xf0>)
 800203e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	f1c3 0205 	rsb	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	2201      	movs	r2, #1
 800205a:	409a      	lsls	r2, r3
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <xTaskPriorityDisinherit+0xf0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <xTaskPriorityDisinherit+0xf0>)
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <xTaskPriorityDisinherit+0xf4>)
 8002074:	441a      	add	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	3304      	adds	r3, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f7fe fa9c 	bl	80005ba <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002082:	2301      	movs	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002086:	697b      	ldr	r3, [r7, #20]
    }
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000088 	.word	0x20000088
 8002094:	20000168 	.word	0x20000168
 8002098:	2000008c 	.word	0x2000008c

0800209c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	613b      	str	r3, [r7, #16]
    }
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80020c8:	f001 f878 	bl	80031bc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80020cc:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <xTaskGenericNotifyWait+0xf8>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	3354      	adds	r3, #84	@ 0x54
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d022      	beq.n	8002124 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80020de:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <xTaskGenericNotifyWait+0xf8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	3214      	adds	r2, #20
 80020e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	43d2      	mvns	r2, r2
 80020ee:	4011      	ands	r1, r2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	3214      	adds	r2, #20
 80020f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80020f8:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <xTaskGenericNotifyWait+0xf8>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	3354      	adds	r3, #84	@ 0x54
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800210c:	2101      	movs	r1, #1
 800210e:	6a38      	ldr	r0, [r7, #32]
 8002110:	f000 faca 	bl	80026a8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002114:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <xTaskGenericNotifyWait+0xfc>)
 8002116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002124:	f001 f87c 	bl	8003220 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002128:	f001 f848 	bl	80031bc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <xTaskGenericNotifyWait+0xf8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	3214      	adds	r2, #20
 800213a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <xTaskGenericNotifyWait+0xf8>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	3354      	adds	r3, #84	@ 0x54
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d002      	beq.n	800215a <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e00e      	b.n	8002178 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <xTaskGenericNotifyWait+0xf8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	3214      	adds	r2, #20
 8002162:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	43d2      	mvns	r2, r2
 800216a:	4011      	ands	r1, r2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	3214      	adds	r2, #20
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002174:	2301      	movs	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <xTaskGenericNotifyWait+0xf8>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	3354      	adds	r3, #84	@ 0x54
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002186:	f001 f84b 	bl	8003220 <vPortExitCritical>

        return xReturn;
 800218a:	697b      	ldr	r3, [r7, #20]
    }
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000088 	.word	0x20000088
 8002198:	e000ed04 	.word	0xe000ed04

0800219c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	@ 0x38
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80021aa:	2301      	movs	r3, #1
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <xTaskGenericNotify+0x30>
        __asm volatile
 80021b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	623b      	str	r3, [r7, #32]
    }
 80021c6:	bf00      	nop
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10b      	bne.n	80021ea <xTaskGenericNotify+0x4e>
        __asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	61fb      	str	r3, [r7, #28]
    }
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	e7fd      	b.n	80021e6 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80021ee:	f000 ffe5 	bl	80031bc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80021f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	3214      	adds	r2, #20
 80021fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002204:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4413      	add	r3, r2
 800220c:	3354      	adds	r3, #84	@ 0x54
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4413      	add	r3, r2
 800221a:	3354      	adds	r3, #84	@ 0x54
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b04      	cmp	r3, #4
 8002224:	d83b      	bhi.n	800229e <xTaskGenericNotify+0x102>
 8002226:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <xTaskGenericNotify+0x90>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	080022bf 	.word	0x080022bf
 8002230:	08002241 	.word	0x08002241
 8002234:	0800225d 	.word	0x0800225d
 8002238:	08002275 	.word	0x08002275
 800223c:	08002283 	.word	0x08002283
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	3214      	adds	r2, #20
 8002246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	ea42 0103 	orr.w	r1, r2, r3
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	3214      	adds	r2, #20
 8002256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800225a:	e033      	b.n	80022c4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	3214      	adds	r2, #20
 8002262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	3214      	adds	r2, #20
 800226e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002272:	e027      	b.n	80022c4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	3214      	adds	r2, #20
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002280:	e020      	b.n	80022c4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002282:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002286:	2b02      	cmp	r3, #2
 8002288:	d006      	beq.n	8002298 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800228a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	3214      	adds	r2, #20
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002296:	e015      	b.n	80022c4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800229c:	e012      	b.n	80022c4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800229e:	4b4d      	ldr	r3, [pc, #308]	@ (80023d4 <xTaskGenericNotify+0x238>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00d      	beq.n	80022c2 <xTaskGenericNotify+0x126>
        __asm volatile
 80022a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	61bb      	str	r3, [r7, #24]
    }
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	e7fd      	b.n	80022ba <xTaskGenericNotify+0x11e>
                    break;
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <xTaskGenericNotify+0x128>

                    break;
 80022c2:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80022c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d17c      	bne.n	80023c6 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80022cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022d8:	68d2      	ldr	r2, [r2, #12]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022e2:	6892      	ldr	r2, [r2, #8]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ec:	3304      	adds	r3, #4
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d103      	bne.n	80022fa <xTaskGenericNotify+0x15e>
 80022f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
 8002300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	2201      	movs	r2, #1
 8002310:	409a      	lsls	r2, r3
 8002312:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <xTaskGenericNotify+0x23c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	4a2f      	ldr	r2, [pc, #188]	@ (80023d8 <xTaskGenericNotify+0x23c>)
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002320:	492e      	ldr	r1, [pc, #184]	@ (80023dc <xTaskGenericNotify+0x240>)
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3304      	adds	r3, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002346:	3204      	adds	r2, #4
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	1d1a      	adds	r2, r3, #4
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4a1f      	ldr	r2, [pc, #124]	@ (80023dc <xTaskGenericNotify+0x240>)
 8002360:	441a      	add	r2, r3
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	615a      	str	r2, [r3, #20]
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236a:	491c      	ldr	r1, [pc, #112]	@ (80023dc <xTaskGenericNotify+0x240>)
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c59      	adds	r1, r3, #1
 800237a:	4818      	ldr	r0, [pc, #96]	@ (80023dc <xTaskGenericNotify+0x240>)
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4403      	add	r3, r0
 8002386:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <xTaskGenericNotify+0x20c>
        __asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	617b      	str	r3, [r7, #20]
    }
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <xTaskGenericNotify+0x244>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d907      	bls.n	80023c6 <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <xTaskGenericNotify+0x248>)
 80023b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80023c6:	f000 ff2b 	bl	8003220 <vPortExitCritical>

        return xReturn;
 80023ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80023cc:	4618      	mov	r0, r3
 80023ce:	3738      	adds	r7, #56	@ 0x38
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000164 	.word	0x20000164
 80023d8:	20000168 	.word	0x20000168
 80023dc:	2000008c 	.word	0x2000008c
 80023e0:	20000088 	.word	0x20000088
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b092      	sub	sp, #72	@ 0x48
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80023f6:	2301      	movs	r3, #1
 80023f8:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	e7fd      	b.n	8002432 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002436:	f000 ffa9 	bl	800338c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 800243e:	f3ef 8211 	mrs	r2, BASEPRI
 8002442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	623a      	str	r2, [r7, #32]
 8002454:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8002456:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800245a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	3214      	adds	r2, #20
 8002466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800246a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800246c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800246e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4413      	add	r3, r2
 8002474:	3354      	adds	r3, #84	@ 0x54
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800247c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4413      	add	r3, r2
 8002482:	3354      	adds	r3, #84	@ 0x54
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d83b      	bhi.n	8002506 <xTaskGenericNotifyFromISR+0x11e>
 800248e:	a201      	add	r2, pc, #4	@ (adr r2, 8002494 <xTaskGenericNotifyFromISR+0xac>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	08002527 	.word	0x08002527
 8002498:	080024a9 	.word	0x080024a9
 800249c:	080024c5 	.word	0x080024c5
 80024a0:	080024dd 	.word	0x080024dd
 80024a4:	080024eb 	.word	0x080024eb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80024a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	3214      	adds	r2, #20
 80024ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	ea42 0103 	orr.w	r1, r2, r3
 80024b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	3214      	adds	r2, #20
 80024be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80024c2:	e033      	b.n	800252c <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80024c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	3214      	adds	r2, #20
 80024ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ce:	1c59      	adds	r1, r3, #1
 80024d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	3214      	adds	r2, #20
 80024d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80024da:	e027      	b.n	800252c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80024dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	3214      	adds	r2, #20
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80024e8:	e020      	b.n	800252c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80024ea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d006      	beq.n	8002500 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80024f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	3214      	adds	r2, #20
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80024fe:	e015      	b.n	800252c <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8002500:	2300      	movs	r3, #0
 8002502:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8002504:	e012      	b.n	800252c <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002506:	4b61      	ldr	r3, [pc, #388]	@ (800268c <xTaskGenericNotifyFromISR+0x2a4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	61bb      	str	r3, [r7, #24]
    }
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8002526:	bf00      	nop
 8002528:	e000      	b.n	800252c <xTaskGenericNotifyFromISR+0x144>
                    break;
 800252a:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800252c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002530:	2b01      	cmp	r3, #1
 8002532:	f040 809f 	bne.w	8002674 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	617b      	str	r3, [r7, #20]
    }
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	e7fd      	b.n	8002552 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002556:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <xTaskGenericNotifyFromISR+0x2a8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d15e      	bne.n	800261c <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800255e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	633b      	str	r3, [r7, #48]	@ 0x30
 8002564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800256a:	68d2      	ldr	r2, [r2, #12]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002574:	6892      	ldr	r2, [r2, #8]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800257e:	3304      	adds	r3, #4
 8002580:	429a      	cmp	r2, r3
 8002582:	d103      	bne.n	800258c <xTaskGenericNotifyFromISR+0x1a4>
 8002584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800259c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	2201      	movs	r2, #1
 80025a2:	409a      	lsls	r2, r3
 80025a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <xTaskGenericNotifyFromISR+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002694 <xTaskGenericNotifyFromISR+0x2ac>)
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b2:	4939      	ldr	r1, [pc, #228]	@ (8002698 <xTaskGenericNotifyFromISR+0x2b0>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3304      	adds	r3, #4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025d8:	3204      	adds	r2, #4
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025de:	1d1a      	adds	r2, r3, #4
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <xTaskGenericNotifyFromISR+0x2b0>)
 80025f2:	441a      	add	r2, r3
 80025f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f6:	615a      	str	r2, [r3, #20]
 80025f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025fc:	4926      	ldr	r1, [pc, #152]	@ (8002698 <xTaskGenericNotifyFromISR+0x2b0>)
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1c59      	adds	r1, r3, #1
 800260c:	4822      	ldr	r0, [pc, #136]	@ (8002698 <xTaskGenericNotifyFromISR+0x2b0>)
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4403      	add	r3, r0
 8002618:	6019      	str	r1, [r3, #0]
 800261a:	e01b      	b.n	8002654 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <xTaskGenericNotifyFromISR+0x2b4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34
 8002622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002626:	61da      	str	r2, [r3, #28]
 8002628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800262e:	621a      	str	r2, [r3, #32]
 8002630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002636:	3218      	adds	r2, #24
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263c:	f103 0218 	add.w	r2, r3, #24
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002646:	4a15      	ldr	r2, [pc, #84]	@ (800269c <xTaskGenericNotifyFromISR+0x2b4>)
 8002648:	629a      	str	r2, [r3, #40]	@ 0x28
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <xTaskGenericNotifyFromISR+0x2b4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	4a12      	ldr	r2, [pc, #72]	@ (800269c <xTaskGenericNotifyFromISR+0x2b4>)
 8002652:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <xTaskGenericNotifyFromISR+0x2b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265e:	429a      	cmp	r2, r3
 8002660:	d908      	bls.n	8002674 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <xTaskGenericNotifyFromISR+0x2bc>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002676:	613b      	str	r3, [r7, #16]
        __asm volatile
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f383 8811 	msr	BASEPRI, r3
    }
 800267e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8002682:	4618      	mov	r0, r3
 8002684:	3748      	adds	r7, #72	@ 0x48
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000164 	.word	0x20000164
 8002690:	20000188 	.word	0x20000188
 8002694:	20000168 	.word	0x20000168
 8002698:	2000008c 	.word	0x2000008c
 800269c:	20000120 	.word	0x20000120
 80026a0:	20000088 	.word	0x20000088
 80026a4:	20000174 	.word	0x20000174

080026a8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80026b2:	4b36      	ldr	r3, [pc, #216]	@ (800278c <prvAddCurrentTaskToDelayedList+0xe4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026b8:	4b35      	ldr	r3, [pc, #212]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3304      	adds	r3, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ffd8 	bl	8000674 <uxListRemove>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10b      	bne.n	80026e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80026ca:	4b31      	ldr	r3, [pc, #196]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d0:	2201      	movs	r2, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002794 <prvAddCurrentTaskToDelayedList+0xec>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4013      	ands	r3, r2
 80026de:	4a2d      	ldr	r2, [pc, #180]	@ (8002794 <prvAddCurrentTaskToDelayedList+0xec>)
 80026e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026e8:	d124      	bne.n	8002734 <prvAddCurrentTaskToDelayedList+0x8c>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d021      	beq.n	8002734 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026f0:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <prvAddCurrentTaskToDelayedList+0xf0>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b26      	ldr	r3, [pc, #152]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	4b21      	ldr	r3, [pc, #132]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	3204      	adds	r2, #4
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1d1a      	adds	r2, r3, #4
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002724:	615a      	str	r2, [r3, #20]
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	4a1a      	ldr	r2, [pc, #104]	@ (8002798 <prvAddCurrentTaskToDelayedList+0xf0>)
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002732:	e026      	b.n	8002782 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800273c:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	d209      	bcs.n	8002760 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800274c:	4b13      	ldr	r3, [pc, #76]	@ (800279c <prvAddCurrentTaskToDelayedList+0xf4>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7fd ff52 	bl	8000602 <vListInsert>
}
 800275e:	e010      	b.n	8002782 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3304      	adds	r3, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7fd ff48 	bl	8000602 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002772:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d202      	bcs.n	8002782 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800277c:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000164 	.word	0x20000164
 8002790:	20000088 	.word	0x20000088
 8002794:	20000168 	.word	0x20000168
 8002798:	2000014c 	.word	0x2000014c
 800279c:	2000011c 	.word	0x2000011c
 80027a0:	20000118 	.word	0x20000118
 80027a4:	20000180 	.word	0x20000180

080027a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80027b2:	f000 faf7 	bl	8002da4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80027b6:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <xTimerCreateTimerTask+0x58>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <xTimerCreateTimerTask+0x5c>)
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	2302      	movs	r3, #2
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2300      	movs	r3, #0
 80027c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027cc:	490e      	ldr	r1, [pc, #56]	@ (8002808 <xTimerCreateTimerTask+0x60>)
 80027ce:	480f      	ldr	r0, [pc, #60]	@ (800280c <xTimerCreateTimerTask+0x64>)
 80027d0:	f7fe fcf2 	bl	80011b8 <xTaskCreate>
 80027d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	603b      	str	r3, [r7, #0]
    }
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80027f4:	687b      	ldr	r3, [r7, #4]
    }
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200001bc 	.word	0x200001bc
 8002804:	200001c0 	.word	0x200001c0
 8002808:	0800779c 	.word	0x0800779c
 800280c:	08002a05 	.word	0x08002a05

08002810 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800281e:	202c      	movs	r0, #44	@ 0x2c
 8002820:	f000 fdf6 	bl	8003410 <pvPortMalloc>
 8002824:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f805 	bl	8002852 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8002848:	697b      	ldr	r3, [r7, #20]
        }
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8002866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	617b      	str	r3, [r7, #20]
    }
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	e7fd      	b.n	800287a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800287e:	f000 fa91 	bl	8002da4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	6a3a      	ldr	r2, [r7, #32]
 8002898:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	3304      	adds	r3, #4
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe7e 	bl	80005a0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <xTimerGenericCommand+0x30>
        __asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	623b      	str	r3, [r7, #32]
    }
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <xTimerGenericCommand+0x98>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d02a      	beq.n	8002952 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b05      	cmp	r3, #5
 800290c:	dc18      	bgt.n	8002940 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800290e:	f7ff fb2b 	bl	8001f68 <xTaskGetSchedulerState>
 8002912:	4603      	mov	r3, r0
 8002914:	2b02      	cmp	r3, #2
 8002916:	d109      	bne.n	800292c <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002918:	4b10      	ldr	r3, [pc, #64]	@ (800295c <xTimerGenericCommand+0x98>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f107 0114 	add.w	r1, r7, #20
 8002920:	2300      	movs	r3, #0
 8002922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002924:	f7fd ffd4 	bl	80008d0 <xQueueGenericSend>
 8002928:	6278      	str	r0, [r7, #36]	@ 0x24
 800292a:	e012      	b.n	8002952 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <xTimerGenericCommand+0x98>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	f107 0114 	add.w	r1, r7, #20
 8002934:	2300      	movs	r3, #0
 8002936:	2200      	movs	r2, #0
 8002938:	f7fd ffca 	bl	80008d0 <xQueueGenericSend>
 800293c:	6278      	str	r0, [r7, #36]	@ 0x24
 800293e:	e008      	b.n	8002952 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <xTimerGenericCommand+0x98>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	f107 0114 	add.w	r1, r7, #20
 8002948:	2300      	movs	r3, #0
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	f7fe f8c2 	bl	8000ad4 <xQueueGenericSendFromISR>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002954:	4618      	mov	r0, r3
 8002956:	3728      	adds	r7, #40	@ 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200001bc 	.word	0x200001bc

08002960 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800296c:	e008      	b.n	8002980 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4413      	add	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	18d1      	adds	r1, r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f8df 	bl	8002b50 <prvInsertTimerInActiveList>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <prvReloadTimer+0xe>
        }
    }
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <prvProcessExpiredTimer+0x5c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fe59 	bl	8000674 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff ffc3 	bl	8002960 <prvReloadTimer>
 80029da:	e008      	b.n	80029ee <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	4798      	blx	r3
    }
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200001b4 	.word	0x200001b4

08002a04 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f859 	bl	8002ac8 <prvGetNextExpireTime>
 8002a16:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f805 	bl	8002a2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002a22:	f000 f8d7 	bl	8002bd4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a26:	bf00      	nop
 8002a28:	e7f0      	b.n	8002a0c <prvTimerTask+0x8>
	...

08002a2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a36:	f7fe fd7d 	bl	8001534 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f866 	bl	8002b10 <prvSampleTimeNow>
 8002a44:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d130      	bne.n	8002aae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10a      	bne.n	8002a68 <prvProcessTimerOrBlockTask+0x3c>
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d806      	bhi.n	8002a68 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002a5a:	f7fe fd79 	bl	8001550 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a5e:	68f9      	ldr	r1, [r7, #12]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff9f 	bl	80029a4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a66:	e024      	b.n	8002ab2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a6e:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <prvProcessTimerOrBlockTask+0x90>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <prvProcessTimerOrBlockTask+0x50>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <prvProcessTimerOrBlockTask+0x52>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <prvProcessTimerOrBlockTask+0x94>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7fe fb5f 	bl	8001150 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002a92:	f7fe fd5d 	bl	8001550 <xTaskResumeAll>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <prvProcessTimerOrBlockTask+0x98>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	f3bf 8f6f 	isb	sy
    }
 8002aac:	e001      	b.n	8002ab2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002aae:	f7fe fd4f 	bl	8001550 <xTaskResumeAll>
    }
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200001b8 	.word	0x200001b8
 8002ac0:	200001bc 	.word	0x200001bc
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <prvGetNextExpireTime+0x44>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <prvGetNextExpireTime+0x16>
 8002ada:	2201      	movs	r2, #1
 8002adc:	e000      	b.n	8002ae0 <prvGetNextExpireTime+0x18>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002aec:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <prvGetNextExpireTime+0x44>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	e001      	b.n	8002afc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002afc:	68fb      	ldr	r3, [r7, #12]
    }
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	200001b4 	.word	0x200001b4

08002b10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002b18:	f7fe fe16 	bl	8001748 <xTaskGetTickCount>
 8002b1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <prvSampleTimeNow+0x3c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d205      	bcs.n	8002b34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002b28:	f000 f916 	bl	8002d58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e002      	b.n	8002b3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <prvSampleTimeNow+0x3c>)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002b40:	68fb      	ldr	r3, [r7, #12]
    }
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200001c4 	.word	0x200001c4

08002b50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d812      	bhi.n	8002b9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	1ad2      	subs	r2, r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b84:	2301      	movs	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e01b      	b.n	8002bc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <prvInsertTimerInActiveList+0x7c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3304      	adds	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7fd fd34 	bl	8000602 <vListInsert>
 8002b9a:	e012      	b.n	8002bc2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d206      	bcs.n	8002bb2 <prvInsertTimerInActiveList+0x62>
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e007      	b.n	8002bc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <prvInsertTimerInActiveList+0x80>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7fd fd20 	bl	8000602 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002bc2:	697b      	ldr	r3, [r7, #20]
    }
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200001b8 	.word	0x200001b8
 8002bd0:	200001b4 	.word	0x200001b4

08002bd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bda:	e0a9      	b.n	8002d30 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f2c0 80a6 	blt.w	8002d30 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fd3d 	bl	8000674 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff87 	bl	8002b10 <prvSampleTimeNow>
 8002c02:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	f200 808e 	bhi.w	8002d2a <prvProcessReceivedCommands+0x156>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <prvProcessReceivedCommands+0x40>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c39 	.word	0x08002c39
 8002c18:	08002c39 	.word	0x08002c39
 8002c1c:	08002ca1 	.word	0x08002ca1
 8002c20:	08002cb5 	.word	0x08002cb5
 8002c24:	08002d01 	.word	0x08002d01
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c39 	.word	0x08002c39
 8002c30:	08002ca1 	.word	0x08002ca1
 8002c34:	08002cb5 	.word	0x08002cb5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	18d1      	adds	r1, r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	69f8      	ldr	r0, [r7, #28]
 8002c58:	f7ff ff7a 	bl	8002b50 <prvInsertTimerInActiveList>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d065      	beq.n	8002d2e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4413      	add	r3, r2
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	69f8      	ldr	r0, [r7, #28]
 8002c7e:	f7ff fe6f 	bl	8002960 <prvReloadTimer>
 8002c82:	e008      	b.n	8002c96 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	69f8      	ldr	r0, [r7, #28]
 8002c9c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002c9e:	e046      	b.n	8002d2e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002cb2:	e03d      	b.n	8002d30 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <prvProcessReceivedCommands+0x118>
        __asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	617b      	str	r3, [r7, #20]
    }
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	18d1      	adds	r1, r2, r3
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	69f8      	ldr	r0, [r7, #28]
 8002cfa:	f7ff ff29 	bl	8002b50 <prvInsertTimerInActiveList>
                        break;
 8002cfe:	e017      	b.n	8002d30 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8002d0e:	69f8      	ldr	r0, [r7, #28]
 8002d10:	f000 fc3a 	bl	8003588 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d14:	e00c      	b.n	8002d30 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002d28:	e002      	b.n	8002d30 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <prvProcessReceivedCommands+0x15c>
                        break;
 8002d2e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <prvProcessReceivedCommands+0x180>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f107 0108 	add.w	r1, r7, #8
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd ff80 	bl	8000c40 <xQueueReceive>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f47f af4a 	bne.w	8002bdc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200001bc 	.word	0x200001bc

08002d58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d5e:	e009      	b.n	8002d74 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d60:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <prvSwitchTimerLists+0x44>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002d6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d6e:	6838      	ldr	r0, [r7, #0]
 8002d70:	f7ff fe18 	bl	80029a4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d74:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <prvSwitchTimerLists+0x44>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <prvSwitchTimerLists+0x44>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <prvSwitchTimerLists+0x48>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <prvSwitchTimerLists+0x44>)
 8002d8a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <prvSwitchTimerLists+0x48>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]
    }
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200001b4 	.word	0x200001b4
 8002da0:	200001b8 	.word	0x200001b8

08002da4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002da8:	f000 fa08 	bl	80031bc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <prvCheckForValidListAndQueue+0x54>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d11d      	bne.n	8002df0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002db4:	4811      	ldr	r0, [pc, #68]	@ (8002dfc <prvCheckForValidListAndQueue+0x58>)
 8002db6:	f7fd fbd3 	bl	8000560 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002dba:	4811      	ldr	r0, [pc, #68]	@ (8002e00 <prvCheckForValidListAndQueue+0x5c>)
 8002dbc:	f7fd fbd0 	bl	8000560 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002dc0:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <prvCheckForValidListAndQueue+0x60>)
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002dfc <prvCheckForValidListAndQueue+0x58>)
 8002dc4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <prvCheckForValidListAndQueue+0x64>)
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <prvCheckForValidListAndQueue+0x5c>)
 8002dca:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002dcc:	2200      	movs	r2, #0
 8002dce:	210c      	movs	r1, #12
 8002dd0:	200a      	movs	r0, #10
 8002dd2:	f7fd fd0b 	bl	80007ec <xQueueGenericCreate>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a07      	ldr	r2, [pc, #28]	@ (8002df8 <prvCheckForValidListAndQueue+0x54>)
 8002dda:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <prvCheckForValidListAndQueue+0x54>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <prvCheckForValidListAndQueue+0x54>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4908      	ldr	r1, [pc, #32]	@ (8002e0c <prvCheckForValidListAndQueue+0x68>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f960 	bl	80010b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002df0:	f000 fa16 	bl	8003220 <vPortExitCritical>
    }
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200001bc 	.word	0x200001bc
 8002dfc:	2000018c 	.word	0x2000018c
 8002e00:	200001a0 	.word	0x200001a0
 8002e04:	200001b4 	.word	0x200001b4
 8002e08:	200001b8 	.word	0x200001b8
 8002e0c:	080077a4 	.word	0x080077a4

08002e10 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <pvTimerGetTimerID+0x2a>
        __asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	60fb      	str	r3, [r7, #12]
    }
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	e7fd      	b.n	8002e36 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8002e3a:	f000 f9bf 	bl	80031bc <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8002e44:	f000 f9ec 	bl	8003220 <vPortExitCritical>

        return pvReturn;
 8002e48:	693b      	ldr	r3, [r7, #16]
    }
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b04      	subs	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3b04      	subs	r3, #4
 8002e72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3b04      	subs	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e84:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb8 <pxPortInitialiseStack+0x64>)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b14      	subs	r3, #20
 8002e8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b04      	subs	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f06f 0202 	mvn.w	r2, #2
 8002ea2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3b20      	subs	r3, #32
 8002ea8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	08002ebd 	.word	0x08002ebd

08002ebc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <prvTaskExitError+0x58>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ece:	d00b      	beq.n	8002ee8 <prvTaskExitError+0x2c>
        __asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	60fb      	str	r3, [r7, #12]
    }
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <prvTaskExitError+0x28>
        __asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	60bb      	str	r3, [r7, #8]
    }
 8002efa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002efc:	bf00      	nop
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0fc      	beq.n	8002efe <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000
	...

08002f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f20:	4b07      	ldr	r3, [pc, #28]	@ (8002f40 <pxCurrentTCBConst2>)
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	6808      	ldr	r0, [r1, #0]
 8002f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2a:	f380 8809 	msr	PSP, r0
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8811 	msr	BASEPRI, r0
 8002f3a:	4770      	bx	lr
 8002f3c:	f3af 8000 	nop.w

08002f40 <pxCurrentTCBConst2>:
 8002f40:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop

08002f48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f48:	4808      	ldr	r0, [pc, #32]	@ (8002f6c <prvPortStartFirstTask+0x24>)
 8002f4a:	6800      	ldr	r0, [r0, #0]
 8002f4c:	6800      	ldr	r0, [r0, #0]
 8002f4e:	f380 8808 	msr	MSP, r0
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8814 	msr	CONTROL, r0
 8002f5a:	b662      	cpsie	i
 8002f5c:	b661      	cpsie	f
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	df00      	svc	0
 8002f68:	bf00      	nop
 8002f6a:	0000      	.short	0x0000
 8002f6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop

08002f74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f7a:	4b47      	ldr	r3, [pc, #284]	@ (8003098 <xPortStartScheduler+0x124>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a47      	ldr	r2, [pc, #284]	@ (800309c <xPortStartScheduler+0x128>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10b      	bne.n	8002f9c <xPortStartScheduler+0x28>
        __asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	60fb      	str	r3, [r7, #12]
    }
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003098 <xPortStartScheduler+0x124>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3f      	ldr	r2, [pc, #252]	@ (80030a0 <xPortStartScheduler+0x12c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10b      	bne.n	8002fbe <xPortStartScheduler+0x4a>
        __asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	613b      	str	r3, [r7, #16]
    }
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fbe:	4b39      	ldr	r3, [pc, #228]	@ (80030a4 <xPortStartScheduler+0x130>)
 8002fc0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	22ff      	movs	r2, #255	@ 0xff
 8002fce:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b31      	ldr	r3, [pc, #196]	@ (80030a8 <xPortStartScheduler+0x134>)
 8002fe4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fe6:	4b31      	ldr	r3, [pc, #196]	@ (80030ac <xPortStartScheduler+0x138>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fec:	e009      	b.n	8003002 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8002fee:	4b2f      	ldr	r3, [pc, #188]	@ (80030ac <xPortStartScheduler+0x138>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80030ac <xPortStartScheduler+0x138>)
 8002ff6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b80      	cmp	r3, #128	@ 0x80
 800300c:	d0ef      	beq.n	8002fee <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800300e:	4b27      	ldr	r3, [pc, #156]	@ (80030ac <xPortStartScheduler+0x138>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	d00b      	beq.n	8003032 <xPortStartScheduler+0xbe>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	60bb      	str	r3, [r7, #8]
    }
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	e7fd      	b.n	800302e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003032:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <xPortStartScheduler+0x138>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <xPortStartScheduler+0x138>)
 800303a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <xPortStartScheduler+0x138>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003044:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <xPortStartScheduler+0x138>)
 8003046:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003050:	4b17      	ldr	r3, [pc, #92]	@ (80030b0 <xPortStartScheduler+0x13c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a16      	ldr	r2, [pc, #88]	@ (80030b0 <xPortStartScheduler+0x13c>)
 8003056:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800305a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <xPortStartScheduler+0x13c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <xPortStartScheduler+0x13c>)
 8003062:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003068:	f000 f960 	bl	800332c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800306c:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <xPortStartScheduler+0x140>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003072:	f000 f97f 	bl	8003374 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <xPortStartScheduler+0x144>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <xPortStartScheduler+0x144>)
 800307c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003080:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003082:	f7ff ff61 	bl	8002f48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003086:	f7fe fc93 	bl	80019b0 <vTaskSwitchContext>
    prvTaskExitError();
 800308a:	f7ff ff17 	bl	8002ebc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	e000ed00 	.word	0xe000ed00
 800309c:	410fc271 	.word	0x410fc271
 80030a0:	410fc270 	.word	0x410fc270
 80030a4:	e000e400 	.word	0xe000e400
 80030a8:	200001c8 	.word	0x200001c8
 80030ac:	200001cc 	.word	0x200001cc
 80030b0:	e000ed20 	.word	0xe000ed20
 80030b4:	20000000 	.word	0x20000000
 80030b8:	e000ef34 	.word	0xe000ef34

080030bc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030c2:	4b38      	ldr	r3, [pc, #224]	@ (80031a4 <vInitPrioGroupValue+0xe8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a38      	ldr	r2, [pc, #224]	@ (80031a8 <vInitPrioGroupValue+0xec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10b      	bne.n	80030e4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	60fb      	str	r3, [r7, #12]
    }
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030e4:	4b2f      	ldr	r3, [pc, #188]	@ (80031a4 <vInitPrioGroupValue+0xe8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a30      	ldr	r2, [pc, #192]	@ (80031ac <vInitPrioGroupValue+0xf0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10b      	bne.n	8003106 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	613b      	str	r3, [r7, #16]
    }
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	e7fd      	b.n	8003102 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003106:	4b2a      	ldr	r3, [pc, #168]	@ (80031b0 <vInitPrioGroupValue+0xf4>)
 8003108:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	22ff      	movs	r2, #255	@ 0xff
 8003116:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <vInitPrioGroupValue+0xf8>)
 800312c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800312e:	4b22      	ldr	r3, [pc, #136]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003134:	e009      	b.n	800314a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003136:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3b01      	subs	r3, #1
 800313c:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 800313e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b80      	cmp	r3, #128	@ 0x80
 8003154:	d0ef      	beq.n	8003136 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003156:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1c3 0307 	rsb	r3, r3, #7
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00b      	beq.n	800317a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	60bb      	str	r3, [r7, #8]
    }
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800317a:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 8003182:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003184:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800318c:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <vInitPrioGroupValue+0xfc>)
 800318e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00
 80031a8:	410fc271 	.word	0x410fc271
 80031ac:	410fc270 	.word	0x410fc270
 80031b0:	e000e400 	.word	0xe000e400
 80031b4:	200001c8 	.word	0x200001c8
 80031b8:	200001cc 	.word	0x200001cc

080031bc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
        __asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	607b      	str	r3, [r7, #4]
    }
 80031d4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80031d6:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <vPortEnterCritical+0x5c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003218 <vPortEnterCritical+0x5c>)
 80031de:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80031e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <vPortEnterCritical+0x5c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d110      	bne.n	800320a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <vPortEnterCritical+0x60>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <vPortEnterCritical+0x4e>
        __asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	603b      	str	r3, [r7, #0]
    }
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	e7fd      	b.n	8003206 <vPortEnterCritical+0x4a>
    }
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003226:	4b12      	ldr	r3, [pc, #72]	@ (8003270 <vPortExitCritical+0x50>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <vPortExitCritical+0x26>
        __asm volatile
 800322e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	607b      	str	r3, [r7, #4]
    }
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	e7fd      	b.n	8003242 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003246:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <vPortExitCritical+0x50>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3b01      	subs	r3, #1
 800324c:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <vPortExitCritical+0x50>)
 800324e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003250:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <vPortExitCritical+0x50>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <vPortExitCritical+0x44>
 8003258:	2300      	movs	r3, #0
 800325a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	f383 8811 	msr	BASEPRI, r3
    }
 8003262:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	20000000 	.word	0x20000000
	...

08003280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003280:	f3ef 8009 	mrs	r0, PSP
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <pxCurrentTCBConst>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f01e 0f10 	tst.w	lr, #16
 8003290:	bf08      	it	eq
 8003292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	6010      	str	r0, [r2, #0]
 800329c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80032a4:	f380 8811 	msr	BASEPRI, r0
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f7fe fb7e 	bl	80019b0 <vTaskSwitchContext>
 80032b4:	f04f 0000 	mov.w	r0, #0
 80032b8:	f380 8811 	msr	BASEPRI, r0
 80032bc:	bc09      	pop	{r0, r3}
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	6808      	ldr	r0, [r1, #0]
 80032c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c6:	f01e 0f10 	tst.w	lr, #16
 80032ca:	bf08      	it	eq
 80032cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032d0:	f380 8809 	msr	PSP, r0
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst>:
 80032e0:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
        __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
    }
 8003300:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003302:	f7fe fa3d 	bl	8001780 <xTaskIncrementTick>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <SysTick_Handler+0x40>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f383 8811 	msr	BASEPRI, r3
    }
 800331e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003330:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <vPortSetupTimerInterrupt+0x34>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003336:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <vPortSetupTimerInterrupt+0x38>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800333c:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <vPortSetupTimerInterrupt+0x3c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <vPortSetupTimerInterrupt+0x40>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <vPortSetupTimerInterrupt+0x44>)
 800334a:	3b01      	subs	r3, #1
 800334c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800334e:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <vPortSetupTimerInterrupt+0x34>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010
 8003364:	e000e018 	.word	0xe000e018
 8003368:	20000020 	.word	0x20000020
 800336c:	10624dd3 	.word	0x10624dd3
 8003370:	e000e014 	.word	0xe000e014

08003374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003384 <vPortEnableVFP+0x10>
 8003378:	6801      	ldr	r1, [r0, #0]
 800337a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800337e:	6001      	str	r1, [r0, #0]
 8003380:	4770      	bx	lr
 8003382:	0000      	.short	0x0000
 8003384:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop

0800338c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003392:	f3ef 8305 	mrs	r3, IPSR
 8003396:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b0f      	cmp	r3, #15
 800339c:	d915      	bls.n	80033ca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <vPortValidateInterruptPriority+0x74>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033a8:	4b16      	ldr	r3, [pc, #88]	@ (8003404 <vPortValidateInterruptPriority+0x78>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	7afa      	ldrb	r2, [r7, #11]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d20b      	bcs.n	80033ca <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	607b      	str	r3, [r7, #4]
    }
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <vPortValidateInterruptPriority+0x7c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <vPortValidateInterruptPriority+0x80>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d90b      	bls.n	80033f2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	603b      	str	r3, [r7, #0]
    }
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	e7fd      	b.n	80033ee <vPortValidateInterruptPriority+0x62>
    }
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000e3f0 	.word	0xe000e3f0
 8003404:	200001c8 	.word	0x200001c8
 8003408:	e000ed0c 	.word	0xe000ed0c
 800340c:	200001cc 	.word	0x200001cc

08003410 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800341c:	f7fe f88a 	bl	8001534 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003420:	4b54      	ldr	r3, [pc, #336]	@ (8003574 <pvPortMalloc+0x164>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003428:	f000 f908 	bl	800363c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003432:	2208      	movs	r2, #8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	3308      	adds	r3, #8
 800343e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	43db      	mvns	r3, r3
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d804      	bhi.n	8003454 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	4413      	add	r3, r2
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	e001      	b.n	8003458 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db71      	blt.n	8003542 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d06e      	beq.n	8003542 <pvPortMalloc+0x132>
 8003464:	4b44      	ldr	r3, [pc, #272]	@ (8003578 <pvPortMalloc+0x168>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d869      	bhi.n	8003542 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800346e:	4b43      	ldr	r3, [pc, #268]	@ (800357c <pvPortMalloc+0x16c>)
 8003470:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003472:	4b42      	ldr	r3, [pc, #264]	@ (800357c <pvPortMalloc+0x16c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003478:	e004      	b.n	8003484 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d903      	bls.n	8003496 <pvPortMalloc+0x86>
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f1      	bne.n	800347a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003496:	4b37      	ldr	r3, [pc, #220]	@ (8003574 <pvPortMalloc+0x164>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349c:	429a      	cmp	r2, r3
 800349e:	d050      	beq.n	8003542 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2208      	movs	r2, #8
 80034a6:	4413      	add	r3, r2
 80034a8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	2308      	movs	r3, #8
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	429a      	cmp	r2, r3
 80034c0:	d920      	bls.n	8003504 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <pvPortMalloc+0xdc>
        __asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	613b      	str	r3, [r7, #16]
    }
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f000 f8f8 	bl	80036f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003504:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <pvPortMalloc+0x168>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a1a      	ldr	r2, [pc, #104]	@ (8003578 <pvPortMalloc+0x168>)
 8003510:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003512:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <pvPortMalloc+0x168>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b1a      	ldr	r3, [pc, #104]	@ (8003580 <pvPortMalloc+0x170>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d203      	bcs.n	8003526 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <pvPortMalloc+0x168>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a17      	ldr	r2, [pc, #92]	@ (8003580 <pvPortMalloc+0x170>)
 8003524:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003538:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <pvPortMalloc+0x174>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	4a11      	ldr	r2, [pc, #68]	@ (8003584 <pvPortMalloc+0x174>)
 8003540:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003542:	f7fe f805 	bl	8001550 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <pvPortMalloc+0x158>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
    }
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <pvPortMalloc+0x154>
    return pvReturn;
 8003568:	69fb      	ldr	r3, [r7, #28]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3728      	adds	r7, #40	@ 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20012dd8 	.word	0x20012dd8
 8003578:	20012ddc 	.word	0x20012ddc
 800357c:	20012dd0 	.word	0x20012dd0
 8003580:	20012de0 	.word	0x20012de0
 8003584:	20012de4 	.word	0x20012de4

08003588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d047      	beq.n	800362a <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800359a:	2308      	movs	r3, #8
 800359c:	425b      	negs	r3, r3
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db0b      	blt.n	80035c8 <vPortFree+0x40>
        __asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	60fb      	str	r3, [r7, #12]
    }
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <vPortFree+0x60>
        __asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	60bb      	str	r3, [r7, #8]
    }
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da1c      	bge.n	800362a <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d118      	bne.n	800362a <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003604:	f7fd ff96 	bl	8001534 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <vPortFree+0xac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4413      	add	r3, r2
 8003612:	4a08      	ldr	r2, [pc, #32]	@ (8003634 <vPortFree+0xac>)
 8003614:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003616:	6938      	ldr	r0, [r7, #16]
 8003618:	f000 f86c 	bl	80036f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <vPortFree+0xb0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <vPortFree+0xb0>)
 8003624:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003626:	f7fd ff93 	bl	8001550 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20012ddc 	.word	0x20012ddc
 8003638:	20012de8 	.word	0x20012de8

0800363c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003642:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003646:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003648:	4b25      	ldr	r3, [pc, #148]	@ (80036e0 <prvHeapInit+0xa4>)
 800364a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3307      	adds	r3, #7
 800365a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4a1d      	ldr	r2, [pc, #116]	@ (80036e0 <prvHeapInit+0xa4>)
 800366c:	4413      	add	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003674:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <prvHeapInit+0xa8>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800367a:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <prvHeapInit+0xa8>)
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003688:	2208      	movs	r2, #8
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a13      	ldr	r2, [pc, #76]	@ (80036e8 <prvHeapInit+0xac>)
 800369c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800369e:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <prvHeapInit+0xac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80036a6:	4b10      	ldr	r3, [pc, #64]	@ (80036e8 <prvHeapInit+0xac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	1ad2      	subs	r2, r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036bc:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <prvHeapInit+0xac>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <prvHeapInit+0xb0>)
 80036ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a07      	ldr	r2, [pc, #28]	@ (80036f0 <prvHeapInit+0xb4>)
 80036d2:	6013      	str	r3, [r2, #0]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	200001d0 	.word	0x200001d0
 80036e4:	20012dd0 	.word	0x20012dd0
 80036e8:	20012dd8 	.word	0x20012dd8
 80036ec:	20012de0 	.word	0x20012de0
 80036f0:	20012ddc 	.word	0x20012ddc

080036f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80036fc:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <prvInsertBlockIntoFreeList+0xac>)
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e002      	b.n	8003708 <prvInsertBlockIntoFreeList+0x14>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d8f7      	bhi.n	8003702 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d108      	bne.n	8003736 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	441a      	add	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	441a      	add	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d118      	bne.n	800377c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d00d      	beq.n	8003772 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e008      	b.n	8003784 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003772:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e003      	b.n	8003784 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d002      	beq.n	8003792 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20012dd0 	.word	0x20012dd0
 80037a4:	20012dd8 	.word	0x20012dd8

080037a8 <LedEffectStop>:
static void TurnOnEvenLeds(void);
static void TurnOnOddLeds(void);


void LedEffectStop(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af02      	add	r7, sp, #8
    uint8_t local_counter ;

    /* stop all timers , this  stops all led effects */
    for(local_counter = 0 ; local_counter < 4 ; local_counter++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	71fb      	strb	r3, [r7, #7]
 80037b2:	e00e      	b.n	80037d2 <LedEffectStop+0x2a>
    {
        xTimerStop(handle_led_timer[local_counter] , portMAX_DELAY);
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	4a0b      	ldr	r2, [pc, #44]	@ (80037e4 <LedEffectStop+0x3c>)
 80037b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	2200      	movs	r2, #0
 80037c6:	2103      	movs	r1, #3
 80037c8:	f7ff f87c 	bl	80028c4 <xTimerGenericCommand>
    for(local_counter = 0 ; local_counter < 4 ; local_counter++)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	3301      	adds	r3, #1
 80037d0:	71fb      	strb	r3, [r7, #7]
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d9ed      	bls.n	80037b4 <LedEffectStop+0xc>
    }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20012e78 	.word	0x20012e78

080037e8 <LedEffectStart>:


void LedEffectStart(uint8_t effect_num)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
    /* stop all sw timers at begining */
    LedEffectStop();
 80037f2:	f7ff ffd9 	bl	80037a8 <LedEffectStop>

    xTimerStart(handle_led_timer[effect_num-1] , portMAX_DELAY);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	4a09      	ldr	r2, [pc, #36]	@ (8003820 <LedEffectStart+0x38>)
 80037fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003800:	f7fd ffa2 	bl	8001748 <xTaskGetTickCount>
 8003804:	4602      	mov	r2, r0
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2300      	movs	r3, #0
 800380e:	2101      	movs	r1, #1
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff f857 	bl	80028c4 <xTimerGenericCommand>
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bd90      	pop	{r4, r7, pc}
 800381e:	bf00      	nop
 8003820:	20012e78 	.word	0x20012e78

08003824 <LedEffectAction1>:

void LedEffectAction1(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
    uint8_t local_counter ;
    /* toggle all leds */
    for(local_counter = 0 ; local_counter < 4 ; local_counter ++)
 800382a:	2300      	movs	r3, #0
 800382c:	71fb      	strb	r3, [r7, #7]
 800382e:	e00e      	b.n	800384e <LedEffectAction1+0x2a>
    {
        HAL_GPIO_TogglePin(LEDPort[local_counter] , LEDPin[local_counter]);
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	4a0b      	ldr	r2, [pc, #44]	@ (8003860 <LedEffectAction1+0x3c>)
 8003834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	490a      	ldr	r1, [pc, #40]	@ (8003864 <LedEffectAction1+0x40>)
 800383c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f001 fa03 	bl	8004c4e <HAL_GPIO_TogglePin>
    for(local_counter = 0 ; local_counter < 4 ; local_counter ++)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	3301      	adds	r3, #1
 800384c:	71fb      	strb	r3, [r7, #7]
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d9ed      	bls.n	8003830 <LedEffectAction1+0xc>
    }

}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000004 	.word	0x20000004
 8003864:	20000014 	.word	0x20000014

08003868 <LedEffectAction2>:
void LedEffectAction2(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
    static uint8_t local_flag = 0 ;
    
    if(local_flag == 0)
 800386c:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <LedEffectAction2+0x28>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <LedEffectAction2+0x12>
    {
        TurnOnEvenLeds();
 8003874:	f000 f846 	bl	8003904 <TurnOnEvenLeds>
 8003878:	e001      	b.n	800387e <LedEffectAction2+0x16>
    }
    else
    {
        TurnOnOddLeds();
 800387a:	f000 f861 	bl	8003940 <TurnOnOddLeds>
    }

    local_flag ^= 1 ;
 800387e:	4b04      	ldr	r3, [pc, #16]	@ (8003890 <LedEffectAction2+0x28>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	f083 0301 	eor.w	r3, r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b01      	ldr	r3, [pc, #4]	@ (8003890 <LedEffectAction2+0x28>)
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20012dec 	.word	0x20012dec

08003894 <LedEffectAction3>:
void LedEffectAction3(void)
{   
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
    /* shift left */
    static uint8_t local_led_num = 0 ;

    LedControl(1 << local_led_num);
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <LedEffectAction3+0x34>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	2301      	movs	r3, #1
 80038a0:	4093      	lsls	r3, r2
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f869 	bl	800397c <LedControl>

    local_led_num++;
 80038aa:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <LedEffectAction3+0x34>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <LedEffectAction3+0x34>)
 80038b4:	701a      	strb	r2, [r3, #0]
    local_led_num %= 4 ;
 80038b6:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <LedEffectAction3+0x34>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b01      	ldr	r3, [pc, #4]	@ (80038c8 <LedEffectAction3+0x34>)
 80038c2:	701a      	strb	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20012ded 	.word	0x20012ded

080038cc <LedEffectAction4>:
void LedEffectAction4(void)
{   
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
    /* shift right */
    static uint8_t local_led_num = 0 ;

    LedControl(8 >> local_led_num);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <LedEffectAction4+0x34>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	2308      	movs	r3, #8
 80038d8:	4113      	asrs	r3, r2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f84d 	bl	800397c <LedControl>

    local_led_num++;
 80038e2:	4b07      	ldr	r3, [pc, #28]	@ (8003900 <LedEffectAction4+0x34>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <LedEffectAction4+0x34>)
 80038ec:	701a      	strb	r2, [r3, #0]
    local_led_num %= 4 ;
 80038ee:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <LedEffectAction4+0x34>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	4b01      	ldr	r3, [pc, #4]	@ (8003900 <LedEffectAction4+0x34>)
 80038fa:	701a      	strb	r2, [r3, #0]
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20012dee 	.word	0x20012dee

08003904 <TurnOnEvenLeds>:

static void TurnOnEvenLeds(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_PORT , LED1_PIN , GPIO_PIN_SET);
 8003908:	2201      	movs	r2, #1
 800390a:	2120      	movs	r1, #32
 800390c:	480a      	ldr	r0, [pc, #40]	@ (8003938 <TurnOnEvenLeds+0x34>)
 800390e:	f001 f985 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT , LED2_PIN , GPIO_PIN_RESET);
 8003912:	2200      	movs	r2, #0
 8003914:	2140      	movs	r1, #64	@ 0x40
 8003916:	4808      	ldr	r0, [pc, #32]	@ (8003938 <TurnOnEvenLeds+0x34>)
 8003918:	f001 f980 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT , LED3_PIN , GPIO_PIN_SET);
 800391c:	2201      	movs	r2, #1
 800391e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003922:	4805      	ldr	r0, [pc, #20]	@ (8003938 <TurnOnEvenLeds+0x34>)
 8003924:	f001 f97a 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT , LED4_PIN , GPIO_PIN_RESET);
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800392e:	4803      	ldr	r0, [pc, #12]	@ (800393c <TurnOnEvenLeds+0x38>)
 8003930:	f001 f974 	bl	8004c1c <HAL_GPIO_WritePin>
    
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40020800 	.word	0x40020800
 800393c:	40020000 	.word	0x40020000

08003940 <TurnOnOddLeds>:

static void TurnOnOddLeds(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_PORT , LED1_PIN , GPIO_PIN_RESET);
 8003944:	2200      	movs	r2, #0
 8003946:	2120      	movs	r1, #32
 8003948:	480a      	ldr	r0, [pc, #40]	@ (8003974 <TurnOnOddLeds+0x34>)
 800394a:	f001 f967 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT , LED2_PIN , GPIO_PIN_SET);
 800394e:	2201      	movs	r2, #1
 8003950:	2140      	movs	r1, #64	@ 0x40
 8003952:	4808      	ldr	r0, [pc, #32]	@ (8003974 <TurnOnOddLeds+0x34>)
 8003954:	f001 f962 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT , LED3_PIN , GPIO_PIN_RESET);
 8003958:	2200      	movs	r2, #0
 800395a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800395e:	4805      	ldr	r0, [pc, #20]	@ (8003974 <TurnOnOddLeds+0x34>)
 8003960:	f001 f95c 	bl	8004c1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT , LED4_PIN , GPIO_PIN_SET);
 8003964:	2201      	movs	r2, #1
 8003966:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800396a:	4803      	ldr	r0, [pc, #12]	@ (8003978 <TurnOnOddLeds+0x38>)
 800396c:	f001 f956 	bl	8004c1c <HAL_GPIO_WritePin>
    
}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40020800 	.word	0x40020800
 8003978:	40020000 	.word	0x40020000

0800397c <LedControl>:


static void LedControl(uint8_t led_num)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
    uint8_t local_counter ; 

    for(local_counter = 0 ; local_counter < 4 ; local_counter++)
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e015      	b.n	80039b8 <LedControl+0x3c>
    {
        HAL_GPIO_WritePin(LEDPort[local_counter] , LEDPin[local_counter] , ((led_num >> local_counter) & 1));
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	4a0e      	ldr	r2, [pc, #56]	@ (80039c8 <LedControl+0x4c>)
 8003990:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <LedControl+0x50>)
 8003998:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800399c:	79fa      	ldrb	r2, [r7, #7]
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	fa42 f303 	asr.w	r3, r2, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	f001 f935 	bl	8004c1c <HAL_GPIO_WritePin>
    for(local_counter = 0 ; local_counter < 4 ; local_counter++)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3301      	adds	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d9e6      	bls.n	800398c <LedControl+0x10>
    }
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000004 	.word	0x20000004
 80039cc:	20000014 	.word	0x20000014

080039d0 <MenuTask>:

const char * invalid_msg = "!!!!!! nvalid MSG !!!!!!! \r\n";


void MenuTask(void* parameter)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	6078      	str	r0, [r7, #4]
  Cmd_t* local_cmd;
  uint32_t local_cmd_address ;

  const char *menu_msg =    "====================\n"
 80039d8:	4b29      	ldr	r3, [pc, #164]	@ (8003a80 <MenuTask+0xb0>)
 80039da:	60fb      	str	r3, [r7, #12]
  //const char *menu_msg = "-led effect  -> 0 \n- ";

  
  while (1)
  {
    xQueueSend(Q_print , (void*)&menu_msg ,portMAX_DELAY);
 80039dc:	4b29      	ldr	r3, [pc, #164]	@ (8003a84 <MenuTask+0xb4>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	f107 010c 	add.w	r1, r7, #12
 80039e4:	2300      	movs	r3, #0
 80039e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039ea:	f7fc ff71 	bl	80008d0 <xQueueGenericSend>

    /* we recieve notification value which is the address of the command */
    xTaskNotifyWait(0 , 0 , &local_cmd_address , portMAX_DELAY);
 80039ee:	f107 0310 	add.w	r3, r7, #16
 80039f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039f6:	9200      	str	r2, [sp, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2100      	movs	r1, #0
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fe fb4d 	bl	800209c <xTaskGenericNotifyWait>

    local_cmd = (Cmd_t*)local_cmd_address;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	617b      	str	r3, [r7, #20]

    /* command length should be 1 */
    if(local_cmd->len  == 1)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	7a9b      	ldrb	r3, [r3, #10]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d12d      	bne.n	8003a6a <MenuTask+0x9a>
    {
      switch (local_cmd->Payload[0])
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b32      	cmp	r3, #50	@ 0x32
 8003a14:	d032      	beq.n	8003a7c <MenuTask+0xac>
 8003a16:	2b32      	cmp	r3, #50	@ 0x32
 8003a18:	dc1e      	bgt.n	8003a58 <MenuTask+0x88>
 8003a1a:	2b30      	cmp	r3, #48	@ 0x30
 8003a1c:	d002      	beq.n	8003a24 <MenuTask+0x54>
 8003a1e:	2b31      	cmp	r3, #49	@ 0x31
 8003a20:	d00d      	beq.n	8003a3e <MenuTask+0x6e>
 8003a22:	e019      	b.n	8003a58 <MenuTask+0x88>
      {
      case '0':  current_state = LED_EFFECT_STATE ; xTaskNotify(handle_led_task , 0 , eNoAction); break;
 8003a24:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <MenuTask+0xb8>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	4b18      	ldr	r3, [pc, #96]	@ (8003a8c <MenuTask+0xbc>)
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	f7fe fbb0 	bl	800219c <xTaskGenericNotify>
 8003a3c:	e01f      	b.n	8003a7e <MenuTask+0xae>
      case '1':  current_state = RTC_MENU_STATE ; xTaskNotify(handle_rtc_task , 0 , eNoAction); break;
 8003a3e:	4b12      	ldr	r3, [pc, #72]	@ (8003a88 <MenuTask+0xb8>)
 8003a40:	2202      	movs	r2, #2
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <MenuTask+0xc0>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	f7fe fba3 	bl	800219c <xTaskGenericNotify>
 8003a56:	e012      	b.n	8003a7e <MenuTask+0xae>
      case '2':  break;
      default : xQueueSend(Q_print , (void*)&invalid_msg, portMAX_DELAY); continue;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <MenuTask+0xb4>)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a62:	490c      	ldr	r1, [pc, #48]	@ (8003a94 <MenuTask+0xc4>)
 8003a64:	f7fc ff34 	bl	80008d0 <xQueueGenericSend>
 8003a68:	e009      	b.n	8003a7e <MenuTask+0xae>
      }
    }
    else
    {
      /* invalid entry */
      xQueueSend(Q_print , (void*)&invalid_msg, portMAX_DELAY); continue;
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <MenuTask+0xb4>)
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a74:	4907      	ldr	r1, [pc, #28]	@ (8003a94 <MenuTask+0xc4>)
 8003a76:	f7fc ff2b 	bl	80008d0 <xQueueGenericSend>
 8003a7a:	e000      	b.n	8003a7e <MenuTask+0xae>
      case '2':  break;
 8003a7c:	bf00      	nop
    xQueueSend(Q_print , (void*)&menu_msg ,portMAX_DELAY);
 8003a7e:	e7ad      	b.n	80039dc <MenuTask+0xc>
 8003a80:	080077cc 	.word	0x080077cc
 8003a84:	20012e6c 	.word	0x20012e6c
 8003a88:	20012e75 	.word	0x20012e75
 8003a8c:	20012e5c 	.word	0x20012e5c
 8003a90:	20012e60 	.word	0x20012e60
 8003a94:	2000001c 	.word	0x2000001c

08003a98 <PrintTask>:

  xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
  
}
void PrintTask(void* parameter)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t* local_msg;
  while (1)
  {
    xQueueReceive(Q_print , &local_msg , portMAX_DELAY);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <PrintTask+0x38>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f107 010c 	add.w	r1, r7, #12
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd f8c7 	bl	8000c40 <xQueueReceive>
    HAL_UART_Transmit(&huart2 , (uint8_t*)local_msg , strlen((char*)local_msg) , HAL_MAX_DELAY);
 8003ab2:	68fc      	ldr	r4, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fc fbb4 	bl	8000224 <strlen>
 8003abc:	4603      	mov	r3, r0
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4803      	ldr	r0, [pc, #12]	@ (8003ad4 <PrintTask+0x3c>)
 8003ac8:	f002 fe18 	bl	80066fc <HAL_UART_Transmit>
    xQueueReceive(Q_print , &local_msg , portMAX_DELAY);
 8003acc:	bf00      	nop
 8003ace:	e7e7      	b.n	8003aa0 <PrintTask+0x8>
 8003ad0:	20012e6c 	.word	0x20012e6c
 8003ad4:	20012e10 	.word	0x20012e10

08003ad8 <LedTask>:

  return LocalDecNum ;
}

void LedTask(void* parameter)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
   Cmd_t* local_cmd;
  uint32_t local_cmd_address ;

  const char *led_msg = "===================================\n" 
 8003ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8003bcc <LedTask+0xf4>)
 8003ae2:	60fb      	str	r3, [r7, #12]
                        "Enter your choice here:   " ;

  while (1)
  {
    /* wait for notification */
    xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	2200      	movs	r2, #0
 8003aee:	2100      	movs	r1, #0
 8003af0:	2000      	movs	r0, #0
 8003af2:	f7fe fad3 	bl	800209c <xTaskGenericNotifyWait>

    /*print led menu */
    xQueueSend(Q_data , &led_msg , portMAX_DELAY);
 8003af6:	4b36      	ldr	r3, [pc, #216]	@ (8003bd0 <LedTask+0xf8>)
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f107 010c 	add.w	r1, r7, #12
 8003afe:	2300      	movs	r3, #0
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b04:	f7fc fee4 	bl	80008d0 <xQueueGenericSend>

    /*wait for command */
    xTaskNotifyWait(0 , 0 , &local_cmd_address , portMAX_DELAY);
 8003b08:	f107 0310 	add.w	r3, r7, #16
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b10:	9200      	str	r2, [sp, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7fe fac0 	bl	800209c <xTaskGenericNotifyWait>
    
    local_cmd = (Cmd_t*)local_cmd_address;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	617b      	str	r3, [r7, #20]

    /* command len should be less than or equal to 4 */
    if(local_cmd->len <= 4)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	7a9b      	ldrb	r3, [r3, #10]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d83a      	bhi.n	8003b9e <LedTask+0xc6>
    {
      if(strcmp((char*)local_cmd->Payload , "none") == 0)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	492a      	ldr	r1, [pc, #168]	@ (8003bd4 <LedTask+0xfc>)
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fc fb6f 	bl	8000210 <strcmp>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <LedTask+0x66>
      {
        LedEffectStop();
 8003b38:	f7ff fe36 	bl	80037a8 <LedEffectStop>
 8003b3c:	e038      	b.n	8003bb0 <LedTask+0xd8>
      }
      else if(strcmp((char*)local_cmd->Payload , "e1") == 0)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	4925      	ldr	r1, [pc, #148]	@ (8003bd8 <LedTask+0x100>)
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fb64 	bl	8000210 <strcmp>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <LedTask+0x7e>
      {
        LedEffectStart(1);
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f7ff fe4a 	bl	80037e8 <LedEffectStart>
 8003b54:	e02c      	b.n	8003bb0 <LedTask+0xd8>
      }
      else if(strcmp((char*)local_cmd->Payload , "e2") == 0)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4920      	ldr	r1, [pc, #128]	@ (8003bdc <LedTask+0x104>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fb58 	bl	8000210 <strcmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <LedTask+0x96>
      {
        LedEffectStart(2);
 8003b66:	2002      	movs	r0, #2
 8003b68:	f7ff fe3e 	bl	80037e8 <LedEffectStart>
 8003b6c:	e020      	b.n	8003bb0 <LedTask+0xd8>
      }
      else if(strcmp((char*)local_cmd->Payload , "e3") == 0)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	491b      	ldr	r1, [pc, #108]	@ (8003be0 <LedTask+0x108>)
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fb4c 	bl	8000210 <strcmp>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <LedTask+0xae>
      {
        LedEffectStart(3);
 8003b7e:	2003      	movs	r0, #3
 8003b80:	f7ff fe32 	bl	80037e8 <LedEffectStart>
 8003b84:	e014      	b.n	8003bb0 <LedTask+0xd8>
      }
      else if(strcmp((char*)local_cmd->Payload , "e4") == 0)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	4916      	ldr	r1, [pc, #88]	@ (8003be4 <LedTask+0x10c>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc fb40 	bl	8000210 <strcmp>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10c      	bne.n	8003bb0 <LedTask+0xd8>
      {
        LedEffectStart(4);
 8003b96:	2004      	movs	r0, #4
 8003b98:	f7ff fe26 	bl	80037e8 <LedEffectStart>
 8003b9c:	e008      	b.n	8003bb0 <LedTask+0xd8>
    }  
    
    else
    {
      /* invalid entry */
      xQueueSend(Q_print , (void*)&invalid_msg, portMAX_DELAY); continue;
 8003b9e:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <LedTask+0x110>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ba8:	4910      	ldr	r1, [pc, #64]	@ (8003bec <LedTask+0x114>)
 8003baa:	f7fc fe91 	bl	80008d0 <xQueueGenericSend>
 8003bae:	e00b      	b.n	8003bc8 <LedTask+0xf0>
    }

    /* update the state variable */
    current_state = MAIN_MENU_STATE ;
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <LedTask+0x118>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]

    xTaskNotify(handle_menu_task , 0 , eNoAction);
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <LedTask+0x11c>)
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f7fe faea 	bl	800219c <xTaskGenericNotify>
    xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8003bc8:	e78c      	b.n	8003ae4 <LedTask+0xc>
 8003bca:	bf00      	nop
 8003bcc:	08007a68 	.word	0x08007a68
 8003bd0:	20012e70 	.word	0x20012e70
 8003bd4:	08007b0c 	.word	0x08007b0c
 8003bd8:	08007b14 	.word	0x08007b14
 8003bdc:	08007b18 	.word	0x08007b18
 8003be0:	08007b1c 	.word	0x08007b1c
 8003be4:	08007b20 	.word	0x08007b20
 8003be8:	20012e6c 	.word	0x20012e6c
 8003bec:	2000001c 	.word	0x2000001c
 8003bf0:	20012e75 	.word	0x20012e75
 8003bf4:	20012e58 	.word	0x20012e58

08003bf8 <CmdHandleTask>:
  
}


void CmdHandleTask(void* parameter)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  BaseType_t local_return ;

  Cmd_t cmd ;
  while (1)
  {
    local_return = xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7fe fa45 	bl	800209c <xTaskGenericNotifyWait>
 8003c12:	6178      	str	r0, [r7, #20]

    if(local_return == pdTRUE)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d1f2      	bne.n	8003c00 <CmdHandleTask+0x8>
    {
      ProcessCmd(&cmd);
 8003c1a:	f107 0308 	add.w	r3, r7, #8
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f802 	bl	8003c28 <ProcessCmd>
    local_return = xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8003c24:	e7ec      	b.n	8003c00 <CmdHandleTask+0x8>
	...

08003c28 <ProcessCmd>:
  }
  
}

static void ProcessCmd(Cmd_t* cmd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	6078      	str	r0, [r7, #4]
  ExtractCmd(cmd);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f835 	bl	8003ca0 <ExtractCmd>

  switch (current_state)
 8003c36:	4b16      	ldr	r3, [pc, #88]	@ (8003c90 <ProcessCmd+0x68>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	dc24      	bgt.n	8003c88 <ProcessCmd+0x60>
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	da18      	bge.n	8003c74 <ProcessCmd+0x4c>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <ProcessCmd+0x24>
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d00a      	beq.n	8003c60 <ProcessCmd+0x38>
         /*notify rtc task of the cmd */
         xTaskNotify(handle_rtc_task , (uint32_t)cmd , eSetValueWithOverwrite); break;

  }

}
 8003c4a:	e01d      	b.n	8003c88 <ProcessCmd+0x60>
         xTaskNotify(handle_menu_task , (uint32_t)cmd , eSetValueWithOverwrite); break;
 8003c4c:	4b11      	ldr	r3, [pc, #68]	@ (8003c94 <ProcessCmd+0x6c>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	2300      	movs	r3, #0
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2303      	movs	r3, #3
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f7fe fa9f 	bl	800219c <xTaskGenericNotify>
 8003c5e:	e013      	b.n	8003c88 <ProcessCmd+0x60>
         xTaskNotify(handle_led_task , (uint32_t)cmd , eSetValueWithOverwrite); break;
 8003c60:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <ProcessCmd+0x70>)
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	f7fe fa95 	bl	800219c <xTaskGenericNotify>
 8003c72:	e009      	b.n	8003c88 <ProcessCmd+0x60>
         xTaskNotify(handle_rtc_task , (uint32_t)cmd , eSetValueWithOverwrite); break;
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <ProcessCmd+0x74>)
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	2303      	movs	r3, #3
 8003c80:	2100      	movs	r1, #0
 8003c82:	f7fe fa8b 	bl	800219c <xTaskGenericNotify>
 8003c86:	bf00      	nop
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20012e75 	.word	0x20012e75
 8003c94:	20012e58 	.word	0x20012e58
 8003c98:	20012e5c 	.word	0x20012e5c
 8003c9c:	20012e60 	.word	0x20012e60

08003ca0 <ExtractCmd>:

static void ExtractCmd(Cmd_t* cmd)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UBaseType_t local_num_messgs ;
  uint8_t local_counter ;

  local_num_messgs = uxQueueMessagesWaiting(Q_data);
 8003ca8:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <ExtractCmd+0x60>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd f8a9 	bl	8000e04 <uxQueueMessagesWaiting>
 8003cb2:	60b8      	str	r0, [r7, #8]

  for(local_counter = 0u ; local_counter < local_num_messgs ; local_counter++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e010      	b.n	8003cdc <ExtractCmd+0x3c>
  {
    xQueueReceive(Q_data , (void*)&cmd->Payload[local_counter] , 0);
 8003cba:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <ExtractCmd+0x60>)
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f7fc ffba 	bl	8000c40 <xQueueReceive>

    if((char)cmd->Payload[local_counter] == '\n')
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	2b0a      	cmp	r3, #10
 8003cd4:	d007      	beq.n	8003ce6 <ExtractCmd+0x46>
  for(local_counter = 0u ; local_counter < local_num_messgs ; local_counter++)
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d8ea      	bhi.n	8003cba <ExtractCmd+0x1a>
 8003ce4:	e000      	b.n	8003ce8 <ExtractCmd+0x48>
    {
      break;
 8003ce6:	bf00      	nop
    }
  }

  /* put null char at the end of cmd to make it string */
  cmd->Payload[local_counter] = '\0';
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	2100      	movs	r1, #0
 8003cee:	54d1      	strb	r1, [r2, r3]

  /* save len of cmd excluding null char*/
  cmd->len = local_counter ;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	729a      	strb	r2, [r3, #10]
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20012e70 	.word	0x20012e70

08003d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b08b      	sub	sp, #44	@ 0x2c
 8003d08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8003d0a:	f000 fc3d 	bl	8004588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d0e:	f000 f8e7 	bl	8003ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d12:	f000 f9a7 	bl	8004064 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d16:	f000 f97b 	bl	8004010 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8003d1a:	f000 f953 	bl	8003fc4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* enable cycle counter feature */


local_status = xTaskCreate(MenuTask, "menu_task", 250, NULL, 2, &handle_menu_task);
 8003d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003e94 <main+0x190>)
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2302      	movs	r3, #2
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	2300      	movs	r3, #0
 8003d28:	22fa      	movs	r2, #250	@ 0xfa
 8003d2a:	495b      	ldr	r1, [pc, #364]	@ (8003e98 <main+0x194>)
 8003d2c:	485b      	ldr	r0, [pc, #364]	@ (8003e9c <main+0x198>)
 8003d2e:	f7fd fa43 	bl	80011b8 <xTaskCreate>
 8003d32:	61b8      	str	r0, [r7, #24]

configASSERT(local_status == pdPASS);
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d00b      	beq.n	8003d52 <main+0x4e>
        __asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	617b      	str	r3, [r7, #20]
    }
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	e7fd      	b.n	8003d4e <main+0x4a>

local_status = xTaskCreate(PrintTask, "print_task", 250, NULL, 2, &handle_print_task);
 8003d52:	4b53      	ldr	r3, [pc, #332]	@ (8003ea0 <main+0x19c>)
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	2302      	movs	r3, #2
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	22fa      	movs	r2, #250	@ 0xfa
 8003d5e:	4951      	ldr	r1, [pc, #324]	@ (8003ea4 <main+0x1a0>)
 8003d60:	4851      	ldr	r0, [pc, #324]	@ (8003ea8 <main+0x1a4>)
 8003d62:	f7fd fa29 	bl	80011b8 <xTaskCreate>
 8003d66:	61b8      	str	r0, [r7, #24]

configASSERT(local_status == pdPASS);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d00b      	beq.n	8003d86 <main+0x82>
        __asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	613b      	str	r3, [r7, #16]
    }
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	e7fd      	b.n	8003d82 <main+0x7e>

//local_status = xTaskCreate(RtcTask, "rtc_task", 250, NULL, 2, &handle_rtc_task);

//configASSERT(local_status == pdPASS);

local_status = xTaskCreate(LedTask, "led_task", 250, NULL, 2, &handle_led_task);
 8003d86:	4b49      	ldr	r3, [pc, #292]	@ (8003eac <main+0x1a8>)
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	22fa      	movs	r2, #250	@ 0xfa
 8003d92:	4947      	ldr	r1, [pc, #284]	@ (8003eb0 <main+0x1ac>)
 8003d94:	4847      	ldr	r0, [pc, #284]	@ (8003eb4 <main+0x1b0>)
 8003d96:	f7fd fa0f 	bl	80011b8 <xTaskCreate>
 8003d9a:	61b8      	str	r0, [r7, #24]

configASSERT(local_status == pdPASS);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d00b      	beq.n	8003dba <main+0xb6>
        __asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60fb      	str	r3, [r7, #12]
    }
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	e7fd      	b.n	8003db6 <main+0xb2>

local_status = xTaskCreate(CmdHandleTask, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8003dba:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb8 <main+0x1b4>)
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	22fa      	movs	r2, #250	@ 0xfa
 8003dc6:	493d      	ldr	r1, [pc, #244]	@ (8003ebc <main+0x1b8>)
 8003dc8:	483d      	ldr	r0, [pc, #244]	@ (8003ec0 <main+0x1bc>)
 8003dca:	f7fd f9f5 	bl	80011b8 <xTaskCreate>
 8003dce:	61b8      	str	r0, [r7, #24]

configASSERT(local_status == pdPASS);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d00b      	beq.n	8003dee <main+0xea>
        __asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60bb      	str	r3, [r7, #8]
    }
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	e7fd      	b.n	8003dea <main+0xe6>


Q_print = xQueueCreate(10 , sizeof(size_t));
 8003dee:	2200      	movs	r2, #0
 8003df0:	2104      	movs	r1, #4
 8003df2:	200a      	movs	r0, #10
 8003df4:	f7fc fcfa 	bl	80007ec <xQueueGenericCreate>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a32      	ldr	r2, [pc, #200]	@ (8003ec4 <main+0x1c0>)
 8003dfc:	6013      	str	r3, [r2, #0]
configASSERT(Q_print != NULL);
 8003dfe:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <main+0x1c0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <main+0x11a>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	607b      	str	r3, [r7, #4]
    }
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	e7fd      	b.n	8003e1a <main+0x116>

Q_data = xQueueCreate(10 , sizeof(char));
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2101      	movs	r1, #1
 8003e22:	200a      	movs	r0, #10
 8003e24:	f7fc fce2 	bl	80007ec <xQueueGenericCreate>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <main+0x1c4>)
 8003e2c:	6013      	str	r3, [r2, #0]
configASSERT(Q_data != NULL);
 8003e2e:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <main+0x1c4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <main+0x14a>
        __asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	603b      	str	r3, [r7, #0]
    }
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <main+0x146>

for(local_counter = 0 ; local_counter < 4 ; local_counter++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e013      	b.n	8003e7c <main+0x178>
{
handle_led_timer[local_counter] = xTimerCreate("LedTimer" , pdMS_TO_TICKS(500) , pdTRUE , (void*)(local_counter+1) , &LedEffectCallBackFunc);
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
 8003e56:	3301      	adds	r3, #1
 8003e58:	461a      	mov	r2, r3
 8003e5a:	7ffc      	ldrb	r4, [r7, #31]
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <main+0x1c8>)
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	2201      	movs	r2, #1
 8003e64:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003e68:	4819      	ldr	r0, [pc, #100]	@ (8003ed0 <main+0x1cc>)
 8003e6a:	f7fe fcd1 	bl	8002810 <xTimerCreate>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4a18      	ldr	r2, [pc, #96]	@ (8003ed4 <main+0x1d0>)
 8003e72:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
for(local_counter = 0 ; local_counter < 4 ; local_counter++)
 8003e76:	7ffb      	ldrb	r3, [r7, #31]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	7ffb      	ldrb	r3, [r7, #31]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d9e8      	bls.n	8003e54 <main+0x150>
}

HAL_UART_Receive_IT(&huart2 , (uint8_t*)&user_data , 1);
 8003e82:	2201      	movs	r2, #1
 8003e84:	4914      	ldr	r1, [pc, #80]	@ (8003ed8 <main+0x1d4>)
 8003e86:	4815      	ldr	r0, [pc, #84]	@ (8003edc <main+0x1d8>)
 8003e88:	f002 fcc3 	bl	8006812 <HAL_UART_Receive_IT>


vTaskStartScheduler();
 8003e8c:	f7fd fb00 	bl	8001490 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <main+0x18c>
 8003e94:	20012e58 	.word	0x20012e58
 8003e98:	08007b24 	.word	0x08007b24
 8003e9c:	080039d1 	.word	0x080039d1
 8003ea0:	20012e64 	.word	0x20012e64
 8003ea4:	08007b30 	.word	0x08007b30
 8003ea8:	08003a99 	.word	0x08003a99
 8003eac:	20012e5c 	.word	0x20012e5c
 8003eb0:	08007b3c 	.word	0x08007b3c
 8003eb4:	08003ad9 	.word	0x08003ad9
 8003eb8:	20012e68 	.word	0x20012e68
 8003ebc:	08007b48 	.word	0x08007b48
 8003ec0:	08003bf9 	.word	0x08003bf9
 8003ec4:	20012e6c 	.word	0x20012e6c
 8003ec8:	20012e70 	.word	0x20012e70
 8003ecc:	08004171 	.word	0x08004171
 8003ed0:	08007b54 	.word	0x08007b54
 8003ed4:	20012e78 	.word	0x20012e78
 8003ed8:	20012e74 	.word	0x20012e74
 8003edc:	20012e10 	.word	0x20012e10

08003ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b094      	sub	sp, #80	@ 0x50
 8003ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	2234      	movs	r2, #52	@ 0x34
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 fc0a 	bl	8007708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef4:	f107 0308 	add.w	r3, r7, #8
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <SystemClock_Config+0xdc>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fbc <SystemClock_Config+0xdc>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f14:	4b29      	ldr	r3, [pc, #164]	@ (8003fbc <SystemClock_Config+0xdc>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f20:	2300      	movs	r3, #0
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <SystemClock_Config+0xe0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003f2c:	4a24      	ldr	r2, [pc, #144]	@ (8003fc0 <SystemClock_Config+0xe0>)
 8003f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <SystemClock_Config+0xe0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003f40:	230a      	movs	r3, #10
 8003f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f44:	2301      	movs	r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f50:	2301      	movs	r3, #1
 8003f52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f54:	2302      	movs	r3, #2
 8003f56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003f64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003f66:	2304      	movs	r3, #4
 8003f68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f72:	f107 031c 	add.w	r3, r7, #28
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fd2a 	bl	80059d0 <HAL_RCC_OscConfig>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003f82:	f000 f971 	bl	8004268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f86:	230f      	movs	r3, #15
 8003f88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f9c:	f107 0308 	add.w	r3, r7, #8
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fe6e 	bl	8004c84 <HAL_RCC_ClockConfig>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003fae:	f000 f95b 	bl	8004268 <Error_Handler>
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3750      	adds	r7, #80	@ 0x50
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40007000 	.word	0x40007000

08003fc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <MX_RTC_Init+0x44>)
 8003fca:	4a10      	ldr	r2, [pc, #64]	@ (800400c <MX_RTC_Init+0x48>)
 8003fcc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003fce:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <MX_RTC_Init+0x44>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <MX_RTC_Init+0x44>)
 8003fd6:	227f      	movs	r2, #127	@ 0x7f
 8003fd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003fda:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <MX_RTC_Init+0x44>)
 8003fdc:	22ff      	movs	r2, #255	@ 0xff
 8003fde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003fe0:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <MX_RTC_Init+0x44>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fe6:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <MX_RTC_Init+0x44>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fec:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <MX_RTC_Init+0x44>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ff2:	4805      	ldr	r0, [pc, #20]	@ (8004008 <MX_RTC_Init+0x44>)
 8003ff4:	f001 ff8a 	bl	8005f0c <HAL_RTC_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003ffe:	f000 f933 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20012df0 	.word	0x20012df0
 800400c:	40002800 	.word	0x40002800

08004010 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004014:	4b11      	ldr	r3, [pc, #68]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 8004016:	4a12      	ldr	r2, [pc, #72]	@ (8004060 <MX_USART2_UART_Init+0x50>)
 8004018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800401a:	4b10      	ldr	r3, [pc, #64]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 800401c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004022:	4b0e      	ldr	r3, [pc, #56]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 800402a:	2200      	movs	r2, #0
 800402c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800402e:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 8004030:	2200      	movs	r2, #0
 8004032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004034:	4b09      	ldr	r3, [pc, #36]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 8004036:	220c      	movs	r2, #12
 8004038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800403a:	4b08      	ldr	r3, [pc, #32]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004040:	4b06      	ldr	r3, [pc, #24]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 8004042:	2200      	movs	r2, #0
 8004044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004046:	4805      	ldr	r0, [pc, #20]	@ (800405c <MX_USART2_UART_Init+0x4c>)
 8004048:	f002 fb08 	bl	800665c <HAL_UART_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004052:	f000 f909 	bl	8004268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20012e10 	.word	0x20012e10
 8004060:	40004400 	.word	0x40004400

08004064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406a:	f107 0314 	add.w	r3, r7, #20
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	4b39      	ldr	r3, [pc, #228]	@ (8004164 <MX_GPIO_Init+0x100>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	4a38      	ldr	r2, [pc, #224]	@ (8004164 <MX_GPIO_Init+0x100>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	6313      	str	r3, [r2, #48]	@ 0x30
 800408a:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <MX_GPIO_Init+0x100>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4b32      	ldr	r3, [pc, #200]	@ (8004164 <MX_GPIO_Init+0x100>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	4a31      	ldr	r2, [pc, #196]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c2:	4b28      	ldr	r3, [pc, #160]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	4b24      	ldr	r3, [pc, #144]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	4a23      	ldr	r2, [pc, #140]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040de:	4b21      	ldr	r3, [pc, #132]	@ (8004164 <MX_GPIO_Init+0x100>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80040ea:	2200      	movs	r2, #0
 80040ec:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 80040f0:	481d      	ldr	r0, [pc, #116]	@ (8004168 <MX_GPIO_Init+0x104>)
 80040f2:	f000 fd93 	bl	8004c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80040f6:	2200      	movs	r2, #0
 80040f8:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 80040fc:	481b      	ldr	r0, [pc, #108]	@ (800416c <MX_GPIO_Init+0x108>)
 80040fe:	f000 fd8d 	bl	8004c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004108:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800410c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	4619      	mov	r1, r3
 8004118:	4814      	ldr	r0, [pc, #80]	@ (800416c <MX_GPIO_Init+0x108>)
 800411a:	f000 fbeb 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 800411e:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8004122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004124:	2301      	movs	r3, #1
 8004126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412c:	2300      	movs	r3, #0
 800412e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004130:	f107 0314 	add.w	r3, r7, #20
 8004134:	4619      	mov	r1, r3
 8004136:	480c      	ldr	r0, [pc, #48]	@ (8004168 <MX_GPIO_Init+0x104>)
 8004138:	f000 fbdc 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800413c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8004140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004142:	2301      	movs	r3, #1
 8004144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414a:	2300      	movs	r3, #0
 800414c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	4619      	mov	r1, r3
 8004154:	4805      	ldr	r0, [pc, #20]	@ (800416c <MX_GPIO_Init+0x108>)
 8004156:	f000 fbcd 	bl	80048f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800415a:	bf00      	nop
 800415c:	3728      	adds	r7, #40	@ 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40020000 	.word	0x40020000
 800416c:	40020800 	.word	0x40020800

08004170 <LedEffectCallBackFunc>:

/* USER CODE BEGIN 4 */

void LedEffectCallBackFunc(TimerHandle_t xTimer)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint8_t local_timer_id ;
  local_timer_id = (uint8_t)pvTimerGetTimerID(xTimer);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fe fe49 	bl	8002e10 <pvTimerGetTimerID>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]

  switch(local_timer_id)
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	3b01      	subs	r3, #1
 8004186:	2b03      	cmp	r3, #3
 8004188:	d816      	bhi.n	80041b8 <LedEffectCallBackFunc+0x48>
 800418a:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <LedEffectCallBackFunc+0x20>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a7 	.word	0x080041a7
 8004198:	080041ad 	.word	0x080041ad
 800419c:	080041b3 	.word	0x080041b3
  {
    case 1 : LedEffectAction1(); break;
 80041a0:	f7ff fb40 	bl	8003824 <LedEffectAction1>
 80041a4:	e008      	b.n	80041b8 <LedEffectCallBackFunc+0x48>
    case 2 : LedEffectAction2(); break;
 80041a6:	f7ff fb5f 	bl	8003868 <LedEffectAction2>
 80041aa:	e005      	b.n	80041b8 <LedEffectCallBackFunc+0x48>
    case 3 : LedEffectAction3(); break;
 80041ac:	f7ff fb72 	bl	8003894 <LedEffectAction3>
 80041b0:	e002      	b.n	80041b8 <LedEffectCallBackFunc+0x48>
    case 4 : LedEffectAction4(); break;
 80041b2:	f7ff fb8b 	bl	80038cc <LedEffectAction4>
 80041b6:	bf00      	nop
  }
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	6078      	str	r0, [r7, #4]
  if(!xQueueIsQueueFullFromISR(Q_data))
 80041c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <HAL_UART_RxCpltCallback+0x74>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc ff48 	bl	8001062 <xQueueIsQueueFullFromISR>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_UART_RxCpltCallback+0x28>
  {
    /*queue is not full */
    xQueueSendFromISR(Q_data ,  (void*)&user_data , NULL);
 80041d8:	4b16      	ldr	r3, [pc, #88]	@ (8004234 <HAL_UART_RxCpltCallback+0x74>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	2300      	movs	r3, #0
 80041de:	2200      	movs	r2, #0
 80041e0:	4915      	ldr	r1, [pc, #84]	@ (8004238 <HAL_UART_RxCpltCallback+0x78>)
 80041e2:	f7fc fc77 	bl	8000ad4 <xQueueGenericSendFromISR>
 80041e6:	e00b      	b.n	8004200 <HAL_UART_RxCpltCallback+0x40>
  }

  else
  {
    /* queue is full */
    if(user_data == '\r')
 80041e8:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <HAL_UART_RxCpltCallback+0x78>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b0d      	cmp	r3, #13
 80041f0:	d106      	bne.n	8004200 <HAL_UART_RxCpltCallback+0x40>
    {

      xQueueOverwriteFromISR(Q_data , (void*)&user_data , NULL);
 80041f2:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_UART_RxCpltCallback+0x74>)
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	2302      	movs	r3, #2
 80041f8:	2200      	movs	r2, #0
 80041fa:	490f      	ldr	r1, [pc, #60]	@ (8004238 <HAL_UART_RxCpltCallback+0x78>)
 80041fc:	f7fc fc6a 	bl	8000ad4 <xQueueGenericSendFromISR>
    {
      /* Do nothing , ignore the data */
    }
  }

  if(user_data == '\n')
 8004200:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_UART_RxCpltCallback+0x78>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b0a      	cmp	r3, #10
 8004208:	d10a      	bne.n	8004220 <HAL_UART_RxCpltCallback+0x60>
  {
    /* cmd is finished , time to notify the command handling task */
    xTaskNotifyFromISR(handle_cmd_task , 0 , eNoAction , NULL);
 800420a:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <HAL_UART_RxCpltCallback+0x7c>)
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	2300      	movs	r3, #0
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2300      	movs	r3, #0
 8004218:	2200      	movs	r2, #0
 800421a:	2100      	movs	r1, #0
 800421c:	f7fe f8e4 	bl	80023e8 <xTaskGenericNotifyFromISR>
  }

  HAL_UART_Receive_IT(&huart2 , (uint8_t*)&user_data , 1);
 8004220:	2201      	movs	r2, #1
 8004222:	4905      	ldr	r1, [pc, #20]	@ (8004238 <HAL_UART_RxCpltCallback+0x78>)
 8004224:	4806      	ldr	r0, [pc, #24]	@ (8004240 <HAL_UART_RxCpltCallback+0x80>)
 8004226:	f002 faf4 	bl	8006812 <HAL_UART_Receive_IT>

}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20012e70 	.word	0x20012e70
 8004238:	20012e74 	.word	0x20012e74
 800423c:	20012e68 	.word	0x20012e68
 8004240:	20012e10 	.word	0x20012e10

08004244 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004256:	f000 f9b9 	bl	80045cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40001000 	.word	0x40001000

08004268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800426c:	b672      	cpsid	i
}
 800426e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <Error_Handler+0x8>

08004274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <HAL_MspInit+0x4c>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	4a0f      	ldr	r2, [pc, #60]	@ (80042c0 <HAL_MspInit+0x4c>)
 8004284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004288:	6453      	str	r3, [r2, #68]	@ 0x44
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <HAL_MspInit+0x4c>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <HAL_MspInit+0x4c>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	4a08      	ldr	r2, [pc, #32]	@ (80042c0 <HAL_MspInit+0x4c>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_MspInit+0x4c>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80042b2:	f7fe ff03 	bl	80030bc <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800

080042c4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b09a      	sub	sp, #104	@ 0x68
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	225c      	movs	r2, #92	@ 0x5c
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f003 fa17 	bl	8007708 <memset>
  if(hrtc->Instance==RTC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a0c      	ldr	r2, [pc, #48]	@ (8004310 <HAL_RTC_MspInit+0x4c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d111      	bne.n	8004308 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042e4:	2320      	movs	r3, #32
 80042e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80042e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ee:	f107 030c 	add.w	r3, r7, #12
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fe12 	bl	8004f1c <HAL_RCCEx_PeriphCLKConfig>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80042fe:	f7ff ffb3 	bl	8004268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004302:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <HAL_RTC_MspInit+0x50>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004308:	bf00      	nop
 800430a:	3768      	adds	r7, #104	@ 0x68
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40002800 	.word	0x40002800
 8004314:	42470e3c 	.word	0x42470e3c

08004318 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	@ 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_UART_MspInit+0x94>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d133      	bne.n	80043a2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	4b1c      	ldr	r3, [pc, #112]	@ (80043b0 <HAL_UART_MspInit+0x98>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	4a1b      	ldr	r2, [pc, #108]	@ (80043b0 <HAL_UART_MspInit+0x98>)
 8004344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004348:	6413      	str	r3, [r2, #64]	@ 0x40
 800434a:	4b19      	ldr	r3, [pc, #100]	@ (80043b0 <HAL_UART_MspInit+0x98>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <HAL_UART_MspInit+0x98>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <HAL_UART_MspInit+0x98>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6313      	str	r3, [r2, #48]	@ 0x30
 8004366:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_UART_MspInit+0x98>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004372:	230c      	movs	r3, #12
 8004374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004376:	2302      	movs	r3, #2
 8004378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437e:	2303      	movs	r3, #3
 8004380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004382:	2307      	movs	r3, #7
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	4619      	mov	r1, r3
 800438c:	4809      	ldr	r0, [pc, #36]	@ (80043b4 <HAL_UART_MspInit+0x9c>)
 800438e:	f000 fab1 	bl	80048f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	2106      	movs	r1, #6
 8004396:	2026      	movs	r0, #38	@ 0x26
 8004398:	f000 f9f0 	bl	800477c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800439c:	2026      	movs	r0, #38	@ 0x26
 800439e:	f000 fa09 	bl	80047b4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80043a2:	bf00      	nop
 80043a4:	3728      	adds	r7, #40	@ 0x28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40004400 	.word	0x40004400
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40020000 	.word	0x40020000

080043b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	@ 0x38
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	4b33      	ldr	r3, [pc, #204]	@ (800449c <HAL_InitTick+0xe4>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	4a32      	ldr	r2, [pc, #200]	@ (800449c <HAL_InitTick+0xe4>)
 80043d2:	f043 0310 	orr.w	r3, r3, #16
 80043d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80043d8:	4b30      	ldr	r3, [pc, #192]	@ (800449c <HAL_InitTick+0xe4>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043e4:	f107 0210 	add.w	r2, r7, #16
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fd62 	bl	8004eb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043fe:	f000 fd33 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 8004402:	6378      	str	r0, [r7, #52]	@ 0x34
 8004404:	e004      	b.n	8004410 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004406:	f000 fd2f 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 800440a:	4603      	mov	r3, r0
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004412:	4a23      	ldr	r2, [pc, #140]	@ (80044a0 <HAL_InitTick+0xe8>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	0c9b      	lsrs	r3, r3, #18
 800441a:	3b01      	subs	r3, #1
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800441e:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <HAL_InitTick+0xec>)
 8004420:	4a21      	ldr	r2, [pc, #132]	@ (80044a8 <HAL_InitTick+0xf0>)
 8004422:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004424:	4b1f      	ldr	r3, [pc, #124]	@ (80044a4 <HAL_InitTick+0xec>)
 8004426:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800442a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800442c:	4a1d      	ldr	r2, [pc, #116]	@ (80044a4 <HAL_InitTick+0xec>)
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004432:	4b1c      	ldr	r3, [pc, #112]	@ (80044a4 <HAL_InitTick+0xec>)
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004438:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <HAL_InitTick+0xec>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800443e:	4b19      	ldr	r3, [pc, #100]	@ (80044a4 <HAL_InitTick+0xec>)
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004444:	4817      	ldr	r0, [pc, #92]	@ (80044a4 <HAL_InitTick+0xec>)
 8004446:	f001 fe67 	bl	8006118 <HAL_TIM_Base_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004450:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11b      	bne.n	8004490 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004458:	4812      	ldr	r0, [pc, #72]	@ (80044a4 <HAL_InitTick+0xec>)
 800445a:	f001 feb7 	bl	80061cc <HAL_TIM_Base_Start_IT>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004464:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800446c:	2036      	movs	r0, #54	@ 0x36
 800446e:	f000 f9a1 	bl	80047b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b0f      	cmp	r3, #15
 8004476:	d808      	bhi.n	800448a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004478:	2200      	movs	r2, #0
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	2036      	movs	r0, #54	@ 0x36
 800447e:	f000 f97d 	bl	800477c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004482:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <HAL_InitTick+0xf4>)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e002      	b.n	8004490 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004490:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004494:	4618      	mov	r0, r3
 8004496:	3738      	adds	r7, #56	@ 0x38
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	431bde83 	.word	0x431bde83
 80044a4:	20012e88 	.word	0x20012e88
 80044a8:	40001000 	.word	0x40001000
 80044ac:	20000024 	.word	0x20000024

080044b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <NMI_Handler+0x4>

080044b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <HardFault_Handler+0x4>

080044c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <MemManage_Handler+0x4>

080044c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <BusFault_Handler+0x4>

080044d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <UsageFault_Handler+0x4>

080044d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80044ec:	4802      	ldr	r0, [pc, #8]	@ (80044f8 <USART2_IRQHandler+0x10>)
 80044ee:	f002 f9b5 	bl	800685c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20012e10 	.word	0x20012e10

080044fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004500:	4802      	ldr	r0, [pc, #8]	@ (800450c <TIM6_DAC_IRQHandler+0x10>)
 8004502:	f001 fed3 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20012e88 	.word	0x20012e88

08004510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <SystemInit+0x20>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451a:	4a05      	ldr	r2, [pc, #20]	@ (8004530 <SystemInit+0x20>)
 800451c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800456c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004538:	f7ff ffea 	bl	8004510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800453c:	480c      	ldr	r0, [pc, #48]	@ (8004570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800453e:	490d      	ldr	r1, [pc, #52]	@ (8004574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004540:	4a0d      	ldr	r2, [pc, #52]	@ (8004578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004544:	e002      	b.n	800454c <LoopCopyDataInit>

08004546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800454a:	3304      	adds	r3, #4

0800454c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800454c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800454e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004550:	d3f9      	bcc.n	8004546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004552:	4a0a      	ldr	r2, [pc, #40]	@ (800457c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004554:	4c0a      	ldr	r4, [pc, #40]	@ (8004580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004558:	e001      	b.n	800455e <LoopFillZerobss>

0800455a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800455a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800455c:	3204      	adds	r2, #4

0800455e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800455e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004560:	d3fb      	bcc.n	800455a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004562:	f003 f8d9 	bl	8007718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004566:	f7ff fbcd 	bl	8003d04 <main>
  bx  lr    
 800456a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800456c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004574:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8004578:	08007b8c 	.word	0x08007b8c
  ldr r2, =_sbss
 800457c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8004580:	20012ed4 	.word	0x20012ed4

08004584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004584:	e7fe      	b.n	8004584 <ADC_IRQHandler>
	...

08004588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800458c:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <HAL_Init+0x40>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0d      	ldr	r2, [pc, #52]	@ (80045c8 <HAL_Init+0x40>)
 8004592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004598:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <HAL_Init+0x40>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0a      	ldr	r2, [pc, #40]	@ (80045c8 <HAL_Init+0x40>)
 800459e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045a4:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <HAL_Init+0x40>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a07      	ldr	r2, [pc, #28]	@ (80045c8 <HAL_Init+0x40>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045b0:	2003      	movs	r0, #3
 80045b2:	f000 f8d8 	bl	8004766 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7ff fefe 	bl	80043b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045bc:	f7ff fe5a 	bl	8004274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00

080045cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d0:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <HAL_IncTick+0x20>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_IncTick+0x24>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4413      	add	r3, r2
 80045dc:	4a04      	ldr	r2, [pc, #16]	@ (80045f0 <HAL_IncTick+0x24>)
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20000028 	.word	0x20000028
 80045f0:	20012ed0 	.word	0x20012ed0

080045f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return uwTick;
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <HAL_GetTick+0x14>)
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20012ed0 	.word	0x20012ed0

0800460c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004628:	4013      	ands	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463e:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	60d3      	str	r3, [r2, #12]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004658:	4b04      	ldr	r3, [pc, #16]	@ (800466c <__NVIC_GetPriorityGrouping+0x18>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	f003 0307 	and.w	r3, r3, #7
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db0b      	blt.n	800469a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	4907      	ldr	r1, [pc, #28]	@ (80046a8 <__NVIC_EnableIRQ+0x38>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2001      	movs	r0, #1
 8004692:	fa00 f202 	lsl.w	r2, r0, r2
 8004696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000e100 	.word	0xe000e100

080046ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db0a      	blt.n	80046d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	490c      	ldr	r1, [pc, #48]	@ (80046f8 <__NVIC_SetPriority+0x4c>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	0112      	lsls	r2, r2, #4
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	440b      	add	r3, r1
 80046d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d4:	e00a      	b.n	80046ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4908      	ldr	r1, [pc, #32]	@ (80046fc <__NVIC_SetPriority+0x50>)
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	3b04      	subs	r3, #4
 80046e4:	0112      	lsls	r2, r2, #4
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	440b      	add	r3, r1
 80046ea:	761a      	strb	r2, [r3, #24]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000e100 	.word	0xe000e100
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f1c3 0307 	rsb	r3, r3, #7
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf28      	it	cs
 800471e:	2304      	movcs	r3, #4
 8004720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3304      	adds	r3, #4
 8004726:	2b06      	cmp	r3, #6
 8004728:	d902      	bls.n	8004730 <NVIC_EncodePriority+0x30>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3b03      	subs	r3, #3
 800472e:	e000      	b.n	8004732 <NVIC_EncodePriority+0x32>
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	401a      	ands	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004748:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	43d9      	mvns	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	4313      	orrs	r3, r2
         );
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	@ 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff4c 	bl	800460c <__NVIC_SetPriorityGrouping>
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800478e:	f7ff ff61 	bl	8004654 <__NVIC_GetPriorityGrouping>
 8004792:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	f7ff ffb1 	bl	8004700 <NVIC_EncodePriority>
 800479e:	4602      	mov	r2, r0
 80047a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff80 	bl	80046ac <__NVIC_SetPriority>
}
 80047ac:	bf00      	nop
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ff54 	bl	8004670 <__NVIC_EnableIRQ>
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047de:	f7ff ff09 	bl	80045f4 <HAL_GetTick>
 80047e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d008      	beq.n	8004802 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2280      	movs	r2, #128	@ 0x80
 80047f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e052      	b.n	80048a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0216 	bic.w	r2, r2, #22
 8004810:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004820:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_DMA_Abort+0x62>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0208 	bic.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004852:	e013      	b.n	800487c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004854:	f7ff fece 	bl	80045f4 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b05      	cmp	r3, #5
 8004860:	d90c      	bls.n	800487c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2203      	movs	r2, #3
 800486c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e015      	b.n	80048a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e4      	bne.n	8004854 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488e:	223f      	movs	r2, #63	@ 0x3f
 8004890:	409a      	lsls	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2280      	movs	r2, #128	@ 0x80
 80048c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00c      	b.n	80048e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2205      	movs	r2, #5
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	@ 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e165      	b.n	8004bdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004910:	2201      	movs	r2, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4013      	ands	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	429a      	cmp	r2, r3
 800492a:	f040 8154 	bne.w	8004bd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d005      	beq.n	8004946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004942:	2b02      	cmp	r3, #2
 8004944:	d130      	bne.n	80049a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	2203      	movs	r2, #3
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4313      	orrs	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800497c:	2201      	movs	r2, #1
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 0201 	and.w	r2, r3, #1
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d017      	beq.n	80049e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2203      	movs	r2, #3
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d123      	bne.n	8004a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	08da      	lsrs	r2, r3, #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3208      	adds	r2, #8
 80049f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	220f      	movs	r2, #15
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	08da      	lsrs	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3208      	adds	r2, #8
 8004a32:	69b9      	ldr	r1, [r7, #24]
 8004a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	2203      	movs	r2, #3
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0203 	and.w	r2, r3, #3
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80ae 	beq.w	8004bd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004bf4 <HAL_GPIO_Init+0x300>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf4 <HAL_GPIO_Init+0x300>)
 8004a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <HAL_GPIO_Init+0x300>)
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a96:	4a58      	ldr	r2, [pc, #352]	@ (8004bf8 <HAL_GPIO_Init+0x304>)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	220f      	movs	r2, #15
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a4f      	ldr	r2, [pc, #316]	@ (8004bfc <HAL_GPIO_Init+0x308>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d025      	beq.n	8004b0e <HAL_GPIO_Init+0x21a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8004c00 <HAL_GPIO_Init+0x30c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01f      	beq.n	8004b0a <HAL_GPIO_Init+0x216>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a4d      	ldr	r2, [pc, #308]	@ (8004c04 <HAL_GPIO_Init+0x310>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d019      	beq.n	8004b06 <HAL_GPIO_Init+0x212>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a4c      	ldr	r2, [pc, #304]	@ (8004c08 <HAL_GPIO_Init+0x314>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_GPIO_Init+0x20e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a4b      	ldr	r2, [pc, #300]	@ (8004c0c <HAL_GPIO_Init+0x318>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00d      	beq.n	8004afe <HAL_GPIO_Init+0x20a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8004c10 <HAL_GPIO_Init+0x31c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <HAL_GPIO_Init+0x206>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a49      	ldr	r2, [pc, #292]	@ (8004c14 <HAL_GPIO_Init+0x320>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_GPIO_Init+0x202>
 8004af2:	2306      	movs	r3, #6
 8004af4:	e00c      	b.n	8004b10 <HAL_GPIO_Init+0x21c>
 8004af6:	2307      	movs	r3, #7
 8004af8:	e00a      	b.n	8004b10 <HAL_GPIO_Init+0x21c>
 8004afa:	2305      	movs	r3, #5
 8004afc:	e008      	b.n	8004b10 <HAL_GPIO_Init+0x21c>
 8004afe:	2304      	movs	r3, #4
 8004b00:	e006      	b.n	8004b10 <HAL_GPIO_Init+0x21c>
 8004b02:	2303      	movs	r3, #3
 8004b04:	e004      	b.n	8004b10 <HAL_GPIO_Init+0x21c>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e002      	b.n	8004b10 <HAL_GPIO_Init+0x21c>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_GPIO_Init+0x21c>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	f002 0203 	and.w	r2, r2, #3
 8004b16:	0092      	lsls	r2, r2, #2
 8004b18:	4093      	lsls	r3, r2
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b20:	4935      	ldr	r1, [pc, #212]	@ (8004bf8 <HAL_GPIO_Init+0x304>)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	089b      	lsrs	r3, r3, #2
 8004b26:	3302      	adds	r3, #2
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	43db      	mvns	r3, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b52:	4a31      	ldr	r2, [pc, #196]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b58:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b7c:	4a26      	ldr	r2, [pc, #152]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b82:	4b25      	ldr	r3, [pc, #148]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bac:	4b1a      	ldr	r3, [pc, #104]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bd0:	4a11      	ldr	r2, [pc, #68]	@ (8004c18 <HAL_GPIO_Init+0x324>)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2b0f      	cmp	r3, #15
 8004be0:	f67f ae96 	bls.w	8004910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	3724      	adds	r7, #36	@ 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40013800 	.word	0x40013800
 8004bfc:	40020000 	.word	0x40020000
 8004c00:	40020400 	.word	0x40020400
 8004c04:	40020800 	.word	0x40020800
 8004c08:	40020c00 	.word	0x40020c00
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40021400 	.word	0x40021400
 8004c14:	40021800 	.word	0x40021800
 8004c18:	40013c00 	.word	0x40013c00

08004c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c2c:	787b      	ldrb	r3, [r7, #1]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c38:	e003      	b.n	8004c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	041a      	lsls	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	619a      	str	r2, [r3, #24]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c60:	887a      	ldrh	r2, [r7, #2]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4013      	ands	r3, r2
 8004c66:	041a      	lsls	r2, r3, #16
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	43d9      	mvns	r1, r3
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	400b      	ands	r3, r1
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	619a      	str	r2, [r3, #24]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0cc      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b68      	ldr	r3, [pc, #416]	@ (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90c      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	@ (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b63      	ldr	r3, [pc, #396]	@ (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b8      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd8:	4b59      	ldr	r3, [pc, #356]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a58      	ldr	r2, [pc, #352]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf0:	4b53      	ldr	r3, [pc, #332]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b50      	ldr	r3, [pc, #320]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	494d      	ldr	r1, [pc, #308]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d044      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b47      	ldr	r3, [pc, #284]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d119      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	4b3f      	ldr	r3, [pc, #252]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e06f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b3b      	ldr	r3, [pc, #236]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e067      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b37      	ldr	r3, [pc, #220]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4934      	ldr	r1, [pc, #208]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d74:	f7ff fc3e 	bl	80045f4 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7ff fc3a 	bl	80045f4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e04f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b2b      	ldr	r3, [pc, #172]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b25      	ldr	r3, [pc, #148]	@ (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20c      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b22      	ldr	r3, [pc, #136]	@ (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b20      	ldr	r3, [pc, #128]	@ (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e032      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd8:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4916      	ldr	r1, [pc, #88]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df6:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	490e      	ldr	r1, [pc, #56]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e0a:	f000 fbb1 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	490a      	ldr	r1, [pc, #40]	@ (8004e44 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	5ccb      	ldrb	r3, [r1, r3]
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4a09      	ldr	r2, [pc, #36]	@ (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e26:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fac4 	bl	80043b8 <HAL_InitTick>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023c00 	.word	0x40023c00
 8004e40:	40023800 	.word	0x40023800
 8004e44:	08007b64 	.word	0x08007b64
 8004e48:	20000020 	.word	0x20000020
 8004e4c:	20000024 	.word	0x20000024

08004e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e54:	4b03      	ldr	r3, [pc, #12]	@ (8004e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e56:	681b      	ldr	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000020 	.word	0x20000020

08004e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e6c:	f7ff fff0 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0a9b      	lsrs	r3, r3, #10
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4903      	ldr	r1, [pc, #12]	@ (8004e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	08007b74 	.word	0x08007b74

08004e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e94:	f7ff ffdc 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0b5b      	lsrs	r3, r3, #13
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	@ (8004eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	08007b74 	.word	0x08007b74

08004eb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec8:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0203 	and.w	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004eec:	4b09      	ldr	r3, [pc, #36]	@ (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004efa:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <HAL_RCC_GetClockConfig+0x60>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 020f 	and.w	r2, r3, #15
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40023c00 	.word	0x40023c00

08004f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	@ 0x30
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f54:	4b6f      	ldr	r3, [pc, #444]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f5a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	496c      	ldr	r1, [pc, #432]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f72:	2301      	movs	r3, #1
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f82:	4b64      	ldr	r3, [pc, #400]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f88:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f90:	4960      	ldr	r1, [pc, #384]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fb0:	4b58      	ldr	r3, [pc, #352]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	4955      	ldr	r1, [pc, #340]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d017      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fec:	4b49      	ldr	r3, [pc, #292]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffa:	4946      	ldr	r1, [pc, #280]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800500a:	d101      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800500c:	2301      	movs	r3, #1
 800500e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005018:	2301      	movs	r3, #1
 800501a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 808a 	beq.w	800513e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	4b39      	ldr	r3, [pc, #228]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	4a38      	ldr	r2, [pc, #224]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005038:	6413      	str	r3, [r2, #64]	@ 0x40
 800503a:	4b36      	ldr	r3, [pc, #216]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a33      	ldr	r2, [pc, #204]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800504c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005050:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005052:	f7ff facf 	bl	80045f4 <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505a:	f7ff facb 	bl	80045f4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e278      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800506c:	4b2a      	ldr	r3, [pc, #168]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005078:	4b26      	ldr	r3, [pc, #152]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005080:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02f      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	429a      	cmp	r2, r3
 8005094:	d028      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005096:	4b1f      	ldr	r3, [pc, #124]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050a0:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050a6:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050ac:	4a19      	ldr	r2, [pc, #100]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050b2:	4b18      	ldr	r3, [pc, #96]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d114      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050be:	f7ff fa99 	bl	80045f4 <HAL_GetTick>
 80050c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	e00a      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7ff fa95 	bl	80045f4 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e240      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ee      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050f4:	d114      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80050f6:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510a:	4902      	ldr	r1, [pc, #8]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]
 8005110:	e00c      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000
 800511c:	42470e40 	.word	0x42470e40
 8005120:	4b4a      	ldr	r3, [pc, #296]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a49      	ldr	r2, [pc, #292]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005126:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800512a:	6093      	str	r3, [r2, #8]
 800512c:	4b47      	ldr	r3, [pc, #284]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800512e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005138:	4944      	ldr	r1, [pc, #272]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800513a:	4313      	orrs	r3, r2
 800513c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005150:	4b3f      	ldr	r3, [pc, #252]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005152:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005160:	4b3a      	ldr	r3, [pc, #232]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005166:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516e:	4937      	ldr	r1, [pc, #220]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005182:	4b32      	ldr	r3, [pc, #200]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005188:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005190:	492e      	ldr	r1, [pc, #184]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d011      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051a4:	4b29      	ldr	r3, [pc, #164]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051aa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b2:	4926      	ldr	r1, [pc, #152]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051c2:	d101      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80051c4:	2301      	movs	r3, #1
 80051c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80051d4:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	491a      	ldr	r1, [pc, #104]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d011      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80051f6:	4b15      	ldr	r3, [pc, #84]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005204:	4911      	ldr	r1, [pc, #68]	@ (800524c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005214:	d101      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005216:	2301      	movs	r3, #1
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d005      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005228:	f040 80ff 	bne.w	800542a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005232:	f7ff f9df 	bl	80045f4 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005238:	e00e      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800523a:	f7ff f9db 	bl	80045f4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d907      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e188      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800524c:	40023800 	.word	0x40023800
 8005250:	424711e0 	.word	0x424711e0
 8005254:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005258:	4b7e      	ldr	r3, [pc, #504]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ea      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005280:	2b00      	cmp	r3, #0
 8005282:	d028      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d124      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800528c:	4b71      	ldr	r3, [pc, #452]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800528e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	3301      	adds	r3, #1
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800529e:	4b6d      	ldr	r3, [pc, #436]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a4:	0e1b      	lsrs	r3, r3, #24
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	019b      	lsls	r3, r3, #6
 80052b6:	431a      	orrs	r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	3b01      	subs	r3, #1
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	431a      	orrs	r2, r3
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	4961      	ldr	r1, [pc, #388]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d035      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005300:	d130      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005302:	4b54      	ldr	r3, [pc, #336]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005308:	0c1b      	lsrs	r3, r3, #16
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	3301      	adds	r3, #1
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005314:	4b4f      	ldr	r3, [pc, #316]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800531a:	0f1b      	lsrs	r3, r3, #28
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	019b      	lsls	r3, r3, #6
 800532c:	431a      	orrs	r2, r3
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	3b01      	subs	r3, #1
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	431a      	orrs	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	071b      	lsls	r3, r3, #28
 8005344:	4943      	ldr	r1, [pc, #268]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800534c:	4b41      	ldr	r3, [pc, #260]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800534e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005352:	f023 021f 	bic.w	r2, r3, #31
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	3b01      	subs	r3, #1
 800535c:	493d      	ldr	r1, [pc, #244]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d029      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005378:	d124      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800537a:	4b36      	ldr	r3, [pc, #216]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800537c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	3301      	adds	r3, #1
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800538c:	4b31      	ldr	r3, [pc, #196]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005392:	0f1b      	lsrs	r3, r3, #28
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	019b      	lsls	r3, r3, #6
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	3b01      	subs	r3, #1
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	431a      	orrs	r2, r3
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	061b      	lsls	r3, r3, #24
 80053b6:	431a      	orrs	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	071b      	lsls	r3, r3, #28
 80053bc:	4925      	ldr	r1, [pc, #148]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	3b01      	subs	r3, #1
 80053e4:	041b      	lsls	r3, r3, #16
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	071b      	lsls	r3, r3, #28
 80053f6:	4917      	ldr	r1, [pc, #92]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053fe:	4b16      	ldr	r3, [pc, #88]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005404:	f7ff f8f6 	bl	80045f4 <HAL_GetTick>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800540c:	f7ff f8f2 	bl	80045f4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e09f      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541e:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800542a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 8095 	bne.w	800555c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005432:	4b0a      	ldr	r3, [pc, #40]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005438:	f7ff f8dc 	bl	80045f4 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800543e:	e00f      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005440:	f7ff f8d8 	bl	80045f4 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d908      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e085      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800
 8005458:	42470068 	.word	0x42470068
 800545c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005460:	4b41      	ldr	r3, [pc, #260]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546c:	d0e8      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800548a:	2b00      	cmp	r3, #0
 800548c:	d02b      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005492:	2b00      	cmp	r3, #0
 8005494:	d127      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005496:	4b34      	ldr	r3, [pc, #208]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	431a      	orrs	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	3b01      	subs	r3, #1
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	4928      	ldr	r1, [pc, #160]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054cc:	4b26      	ldr	r3, [pc, #152]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054d2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	3b01      	subs	r3, #1
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	4922      	ldr	r1, [pc, #136]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01d      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054fa:	d118      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	0e1b      	lsrs	r3, r3, #24
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	019b      	lsls	r3, r3, #6
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	3b01      	subs	r3, #1
 800551e:	041b      	lsls	r3, r3, #16
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	061b      	lsls	r3, r3, #24
 8005526:	4910      	ldr	r1, [pc, #64]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800552e:	4b0f      	ldr	r3, [pc, #60]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005534:	f7ff f85e 	bl	80045f4 <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800553c:	f7ff f85a 	bl	80045f4 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e007      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554e:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800555a:	d1ef      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3730      	adds	r7, #48	@ 0x30
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	42470070 	.word	0x42470070

08005570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005574:	b0ae      	sub	sp, #184	@ 0xb8
 8005576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005596:	4bcb      	ldr	r3, [pc, #812]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	f200 8206 	bhi.w	80059b0 <HAL_RCC_GetSysClockFreq+0x440>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	080059b1 	.word	0x080059b1
 80055b4:	080059b1 	.word	0x080059b1
 80055b8:	080059b1 	.word	0x080059b1
 80055bc:	080055e9 	.word	0x080055e9
 80055c0:	080059b1 	.word	0x080059b1
 80055c4:	080059b1 	.word	0x080059b1
 80055c8:	080059b1 	.word	0x080059b1
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080059b1 	.word	0x080059b1
 80055d4:	080059b1 	.word	0x080059b1
 80055d8:	080059b1 	.word	0x080059b1
 80055dc:	080057e1 	.word	0x080057e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055e0:	4bb9      	ldr	r3, [pc, #740]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80055e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055e6:	e1e7      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055e8:	4bb8      	ldr	r3, [pc, #736]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80055ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055ee:	e1e3      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055f0:	4bb4      	ldr	r3, [pc, #720]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055fc:	4bb1      	ldr	r3, [pc, #708]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d071      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005608:	4bae      	ldr	r3, [pc, #696]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	099b      	lsrs	r3, r3, #6
 800560e:	2200      	movs	r2, #0
 8005610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005614:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800561c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005620:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800562a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800562e:	4622      	mov	r2, r4
 8005630:	462b      	mov	r3, r5
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f04f 0100 	mov.w	r1, #0
 800563a:	0159      	lsls	r1, r3, #5
 800563c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005640:	0150      	lsls	r0, r2, #5
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4621      	mov	r1, r4
 8005648:	1a51      	subs	r1, r2, r1
 800564a:	6439      	str	r1, [r7, #64]	@ 0x40
 800564c:	4629      	mov	r1, r5
 800564e:	eb63 0301 	sbc.w	r3, r3, r1
 8005652:	647b      	str	r3, [r7, #68]	@ 0x44
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005660:	4649      	mov	r1, r9
 8005662:	018b      	lsls	r3, r1, #6
 8005664:	4641      	mov	r1, r8
 8005666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800566a:	4641      	mov	r1, r8
 800566c:	018a      	lsls	r2, r1, #6
 800566e:	4641      	mov	r1, r8
 8005670:	1a51      	subs	r1, r2, r1
 8005672:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005674:	4649      	mov	r1, r9
 8005676:	eb63 0301 	sbc.w	r3, r3, r1
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005688:	4649      	mov	r1, r9
 800568a:	00cb      	lsls	r3, r1, #3
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005692:	4641      	mov	r1, r8
 8005694:	00ca      	lsls	r2, r1, #3
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	4603      	mov	r3, r0
 800569c:	4622      	mov	r2, r4
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056a2:	462b      	mov	r3, r5
 80056a4:	460a      	mov	r2, r1
 80056a6:	eb42 0303 	adc.w	r3, r2, r3
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056b8:	4629      	mov	r1, r5
 80056ba:	024b      	lsls	r3, r1, #9
 80056bc:	4621      	mov	r1, r4
 80056be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056c2:	4621      	mov	r1, r4
 80056c4:	024a      	lsls	r2, r1, #9
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80056dc:	f7fa fdaa 	bl	8000234 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4613      	mov	r3, r2
 80056e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056ea:	e067      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ec:	4b75      	ldr	r3, [pc, #468]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	099b      	lsrs	r3, r3, #6
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80056fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005706:	2300      	movs	r3, #0
 8005708:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800570a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	0159      	lsls	r1, r3, #5
 800571c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005720:	0150      	lsls	r0, r2, #5
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4621      	mov	r1, r4
 8005728:	1a51      	subs	r1, r2, r1
 800572a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800572c:	4629      	mov	r1, r5
 800572e:	eb63 0301 	sbc.w	r3, r3, r1
 8005732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005740:	4649      	mov	r1, r9
 8005742:	018b      	lsls	r3, r1, #6
 8005744:	4641      	mov	r1, r8
 8005746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574a:	4641      	mov	r1, r8
 800574c:	018a      	lsls	r2, r1, #6
 800574e:	4641      	mov	r1, r8
 8005750:	ebb2 0a01 	subs.w	sl, r2, r1
 8005754:	4649      	mov	r1, r9
 8005756:	eb63 0b01 	sbc.w	fp, r3, r1
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005766:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800576a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576e:	4692      	mov	sl, r2
 8005770:	469b      	mov	fp, r3
 8005772:	4623      	mov	r3, r4
 8005774:	eb1a 0303 	adds.w	r3, sl, r3
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	462b      	mov	r3, r5
 800577c:	eb4b 0303 	adc.w	r3, fp, r3
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800578e:	4629      	mov	r1, r5
 8005790:	028b      	lsls	r3, r1, #10
 8005792:	4621      	mov	r1, r4
 8005794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005798:	4621      	mov	r1, r4
 800579a:	028a      	lsls	r2, r1, #10
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057a4:	2200      	movs	r2, #0
 80057a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80057a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80057aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80057ae:	f7fa fd41 	bl	8000234 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4613      	mov	r3, r2
 80057b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057bc:	4b41      	ldr	r3, [pc, #260]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	0c1b      	lsrs	r3, r3, #16
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	3301      	adds	r3, #1
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80057ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80057de:	e0eb      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e0:	4b38      	ldr	r3, [pc, #224]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ec:	4b35      	ldr	r3, [pc, #212]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d06b      	beq.n	80058d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f8:	4b32      	ldr	r3, [pc, #200]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	099b      	lsrs	r3, r3, #6
 80057fe:	2200      	movs	r2, #0
 8005800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005802:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	663b      	str	r3, [r7, #96]	@ 0x60
 800580c:	2300      	movs	r3, #0
 800580e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005810:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005814:	4622      	mov	r2, r4
 8005816:	462b      	mov	r3, r5
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	0159      	lsls	r1, r3, #5
 8005822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005826:	0150      	lsls	r0, r2, #5
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4621      	mov	r1, r4
 800582e:	1a51      	subs	r1, r2, r1
 8005830:	61b9      	str	r1, [r7, #24]
 8005832:	4629      	mov	r1, r5
 8005834:	eb63 0301 	sbc.w	r3, r3, r1
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005846:	4659      	mov	r1, fp
 8005848:	018b      	lsls	r3, r1, #6
 800584a:	4651      	mov	r1, sl
 800584c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005850:	4651      	mov	r1, sl
 8005852:	018a      	lsls	r2, r1, #6
 8005854:	4651      	mov	r1, sl
 8005856:	ebb2 0801 	subs.w	r8, r2, r1
 800585a:	4659      	mov	r1, fp
 800585c:	eb63 0901 	sbc.w	r9, r3, r1
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800586c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005870:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005874:	4690      	mov	r8, r2
 8005876:	4699      	mov	r9, r3
 8005878:	4623      	mov	r3, r4
 800587a:	eb18 0303 	adds.w	r3, r8, r3
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	462b      	mov	r3, r5
 8005882:	eb49 0303 	adc.w	r3, r9, r3
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005894:	4629      	mov	r1, r5
 8005896:	024b      	lsls	r3, r1, #9
 8005898:	4621      	mov	r1, r4
 800589a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800589e:	4621      	mov	r1, r4
 80058a0:	024a      	lsls	r2, r1, #9
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058aa:	2200      	movs	r2, #0
 80058ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80058b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058b4:	f7fa fcbe 	bl	8000234 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4613      	mov	r3, r2
 80058be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058c2:	e065      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x420>
 80058c4:	40023800 	.word	0x40023800
 80058c8:	00f42400 	.word	0x00f42400
 80058cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058d0:	4b3d      	ldr	r3, [pc, #244]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	099b      	lsrs	r3, r3, #6
 80058d6:	2200      	movs	r2, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	4611      	mov	r1, r2
 80058dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058e2:	2300      	movs	r3, #0
 80058e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80058e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	0159      	lsls	r1, r3, #5
 80058f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058fc:	0150      	lsls	r0, r2, #5
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4641      	mov	r1, r8
 8005904:	1a51      	subs	r1, r2, r1
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	4649      	mov	r1, r9
 800590a:	eb63 0301 	sbc.w	r3, r3, r1
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800591c:	4659      	mov	r1, fp
 800591e:	018b      	lsls	r3, r1, #6
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005926:	4651      	mov	r1, sl
 8005928:	018a      	lsls	r2, r1, #6
 800592a:	4651      	mov	r1, sl
 800592c:	1a54      	subs	r4, r2, r1
 800592e:	4659      	mov	r1, fp
 8005930:	eb63 0501 	sbc.w	r5, r3, r1
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	00eb      	lsls	r3, r5, #3
 800593e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005942:	00e2      	lsls	r2, r4, #3
 8005944:	4614      	mov	r4, r2
 8005946:	461d      	mov	r5, r3
 8005948:	4643      	mov	r3, r8
 800594a:	18e3      	adds	r3, r4, r3
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	464b      	mov	r3, r9
 8005950:	eb45 0303 	adc.w	r3, r5, r3
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005962:	4629      	mov	r1, r5
 8005964:	028b      	lsls	r3, r1, #10
 8005966:	4621      	mov	r1, r4
 8005968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800596c:	4621      	mov	r1, r4
 800596e:	028a      	lsls	r2, r1, #10
 8005970:	4610      	mov	r0, r2
 8005972:	4619      	mov	r1, r3
 8005974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005978:	2200      	movs	r2, #0
 800597a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800597c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800597e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005982:	f7fa fc57 	bl	8000234 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4613      	mov	r3, r2
 800598c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005990:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	0f1b      	lsrs	r3, r3, #28
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800599e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059ae:	e003      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b0:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80059b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	37b8      	adds	r7, #184	@ 0xb8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800
 80059cc:	00f42400 	.word	0x00f42400

080059d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e28d      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8083 	beq.w	8005af6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059f0:	4b94      	ldr	r3, [pc, #592]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d019      	beq.n	8005a30 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059fc:	4b91      	ldr	r3, [pc, #580]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d106      	bne.n	8005a16 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a08:	4b8e      	ldr	r3, [pc, #568]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a14:	d00c      	beq.n	8005a30 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a16:	4b8b      	ldr	r3, [pc, #556]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a1e:	2b0c      	cmp	r3, #12
 8005a20:	d112      	bne.n	8005a48 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a22:	4b88      	ldr	r3, [pc, #544]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a2e:	d10b      	bne.n	8005a48 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a30:	4b84      	ldr	r3, [pc, #528]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d05b      	beq.n	8005af4 <HAL_RCC_OscConfig+0x124>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d157      	bne.n	8005af4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e25a      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a50:	d106      	bne.n	8005a60 <HAL_RCC_OscConfig+0x90>
 8005a52:	4b7c      	ldr	r3, [pc, #496]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a7b      	ldr	r2, [pc, #492]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e01d      	b.n	8005a9c <HAL_RCC_OscConfig+0xcc>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0xb4>
 8005a6a:	4b76      	ldr	r3, [pc, #472]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a75      	ldr	r2, [pc, #468]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	4b73      	ldr	r3, [pc, #460]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a72      	ldr	r2, [pc, #456]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e00b      	b.n	8005a9c <HAL_RCC_OscConfig+0xcc>
 8005a84:	4b6f      	ldr	r3, [pc, #444]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a6e      	ldr	r2, [pc, #440]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4b6c      	ldr	r3, [pc, #432]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a6b      	ldr	r2, [pc, #428]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d013      	beq.n	8005acc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fe fda6 	bl	80045f4 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aac:	f7fe fda2 	bl	80045f4 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b64      	cmp	r3, #100	@ 0x64
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e21f      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	4b61      	ldr	r3, [pc, #388]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0xdc>
 8005aca:	e014      	b.n	8005af6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fe fd92 	bl	80045f4 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad4:	f7fe fd8e 	bl	80045f4 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b64      	cmp	r3, #100	@ 0x64
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e20b      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae6:	4b57      	ldr	r3, [pc, #348]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x104>
 8005af2:	e000      	b.n	8005af6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d06f      	beq.n	8005be2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b02:	4b50      	ldr	r3, [pc, #320]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d017      	beq.n	8005b3e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 030c 	and.w	r3, r3, #12
        || \
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d105      	bne.n	8005b26 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d11c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b32:	4b44      	ldr	r3, [pc, #272]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d116      	bne.n	8005b6c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	4b41      	ldr	r3, [pc, #260]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_RCC_OscConfig+0x186>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e1d3      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b56:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4937      	ldr	r1, [pc, #220]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6a:	e03a      	b.n	8005be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b74:	4b34      	ldr	r3, [pc, #208]	@ (8005c48 <HAL_RCC_OscConfig+0x278>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fe fd3b 	bl	80045f4 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b82:	f7fe fd37 	bl	80045f4 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e1b4      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b94:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	4b28      	ldr	r3, [pc, #160]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4925      	ldr	r1, [pc, #148]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
 8005bb4:	e015      	b.n	8005be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb6:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <HAL_RCC_OscConfig+0x278>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fe fd1a 	bl	80045f4 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc4:	f7fe fd16 	bl	80045f4 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e193      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d036      	beq.n	8005c5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <HAL_RCC_OscConfig+0x27c>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fe fcfa 	bl	80045f4 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c04:	f7fe fcf6 	bl	80045f4 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e173      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_RCC_OscConfig+0x274>)
 8005c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x234>
 8005c22:	e01b      	b.n	8005c5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <HAL_RCC_OscConfig+0x27c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2a:	f7fe fce3 	bl	80045f4 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	e00e      	b.n	8005c50 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c32:	f7fe fcdf 	bl	80045f4 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d907      	bls.n	8005c50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e15c      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
 8005c44:	40023800 	.word	0x40023800
 8005c48:	42470000 	.word	0x42470000
 8005c4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c50:	4b8a      	ldr	r3, [pc, #552]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1ea      	bne.n	8005c32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8097 	beq.w	8005d98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6e:	4b83      	ldr	r3, [pc, #524]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10f      	bne.n	8005c9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	4a7e      	ldr	r2, [pc, #504]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9a:	4b79      	ldr	r3, [pc, #484]	@ (8005e80 <HAL_RCC_OscConfig+0x4b0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d118      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca6:	4b76      	ldr	r3, [pc, #472]	@ (8005e80 <HAL_RCC_OscConfig+0x4b0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a75      	ldr	r2, [pc, #468]	@ (8005e80 <HAL_RCC_OscConfig+0x4b0>)
 8005cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb2:	f7fe fc9f 	bl	80045f4 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cba:	f7fe fc9b 	bl	80045f4 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e118      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8005e80 <HAL_RCC_OscConfig+0x4b0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0x31e>
 8005ce0:	4b66      	ldr	r3, [pc, #408]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	4a65      	ldr	r2, [pc, #404]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cec:	e01c      	b.n	8005d28 <HAL_RCC_OscConfig+0x358>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x340>
 8005cf6:	4b61      	ldr	r3, [pc, #388]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	4a60      	ldr	r2, [pc, #384]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005cfc:	f043 0304 	orr.w	r3, r3, #4
 8005d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d02:	4b5e      	ldr	r3, [pc, #376]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d06:	4a5d      	ldr	r2, [pc, #372]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0x358>
 8005d10:	4b5a      	ldr	r3, [pc, #360]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d14:	4a59      	ldr	r2, [pc, #356]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1c:	4b57      	ldr	r3, [pc, #348]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d20:	4a56      	ldr	r2, [pc, #344]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d015      	beq.n	8005d5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fe fc60 	bl	80045f4 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fe fc5c 	bl	80045f4 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0d7      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ee      	beq.n	8005d38 <HAL_RCC_OscConfig+0x368>
 8005d5a:	e014      	b.n	8005d86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fe fc4a 	bl	80045f4 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d62:	e00a      	b.n	8005d7a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d64:	f7fe fc46 	bl	80045f4 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e0c1      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7a:	4b40      	ldr	r3, [pc, #256]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ee      	bne.n	8005d64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	4a3a      	ldr	r2, [pc, #232]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80ad 	beq.w	8005efc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da2:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d060      	beq.n	8005e70 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d145      	bne.n	8005e42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db6:	4b33      	ldr	r3, [pc, #204]	@ (8005e84 <HAL_RCC_OscConfig+0x4b4>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fe fc1a 	bl	80045f4 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fe fc16 	bl	80045f4 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e093      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd6:	4b29      	ldr	r3, [pc, #164]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	019b      	lsls	r3, r3, #6
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	071b      	lsls	r3, r3, #28
 8005e0e:	491b      	ldr	r1, [pc, #108]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e14:	4b1b      	ldr	r3, [pc, #108]	@ (8005e84 <HAL_RCC_OscConfig+0x4b4>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7fe fbeb 	bl	80045f4 <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e22:	f7fe fbe7 	bl	80045f4 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e064      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e34:	4b11      	ldr	r3, [pc, #68]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <HAL_RCC_OscConfig+0x452>
 8005e40:	e05c      	b.n	8005efc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e42:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <HAL_RCC_OscConfig+0x4b4>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fe fbd4 	bl	80045f4 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e50:	f7fe fbd0 	bl	80045f4 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e04d      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <HAL_RCC_OscConfig+0x4ac>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x480>
 8005e6e:	e045      	b.n	8005efc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d107      	bne.n	8005e88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e040      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40007000 	.word	0x40007000
 8005e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e88:	4b1f      	ldr	r3, [pc, #124]	@ (8005f08 <HAL_RCC_OscConfig+0x538>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d030      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d129      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d122      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005eb8:	4013      	ands	r3, r2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d119      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d10f      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40023800 	.word	0x40023800

08005f0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e073      	b.n	800600a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7f5b      	ldrb	r3, [r3, #29]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe f9c6 	bl	80042c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d055      	beq.n	8005ff8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	22ca      	movs	r2, #202	@ 0xca
 8005f52:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2253      	movs	r2, #83	@ 0x53
 8005f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f87f 	bl	8006060 <RTC_EnterInitMode>
 8005f62:	4603      	mov	r3, r0
 8005f64:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d12c      	bne.n	8005fc6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f7e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6899      	ldr	r1, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68d2      	ldr	r2, [r2, #12]
 8005fa6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6919      	ldr	r1, [r3, #16]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	041a      	lsls	r2, r3, #16
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f886 	bl	80060ce <RTC_ExitInitMode>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d110      	bne.n	8005fee <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	22ff      	movs	r2, #255	@ 0xff
 8005ff4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ff6:	e001      	b.n	8005ffc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0d      	ldr	r2, [pc, #52]	@ (800605c <HAL_RTC_WaitForSynchro+0x48>)
 8006026:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006028:	f7fe fae4 	bl	80045f4 <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800602e:	e009      	b.n	8006044 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006030:	f7fe fae0 	bl	80045f4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800603e:	d901      	bls.n	8006044 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e007      	b.n	8006054 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ee      	beq.n	8006030 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	00017f5f 	.word	0x00017f5f

08006060 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d122      	bne.n	80060c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800608c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800608e:	f7fe fab1 	bl	80045f4 <HAL_GetTick>
 8006092:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006094:	e00c      	b.n	80060b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006096:	f7fe faad 	bl	80045f4 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060a4:	d904      	bls.n	80060b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d102      	bne.n	80060c4 <RTC_EnterInitMode+0x64>
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d1e8      	bne.n	8006096 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff ff8b 	bl	8006014 <HAL_RTC_WaitForSynchro>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2204      	movs	r2, #4
 8006108:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800610e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e041      	b.n	80061ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f839 	bl	80061b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f000 f9c0 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d001      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e04e      	b.n	8006282 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a23      	ldr	r2, [pc, #140]	@ (8006290 <HAL_TIM_Base_Start_IT+0xc4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x80>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620e:	d01d      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x80>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1f      	ldr	r2, [pc, #124]	@ (8006294 <HAL_TIM_Base_Start_IT+0xc8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x80>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <HAL_TIM_Base_Start_IT+0xcc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x80>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1c      	ldr	r2, [pc, #112]	@ (800629c <HAL_TIM_Base_Start_IT+0xd0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x80>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1b      	ldr	r2, [pc, #108]	@ (80062a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x80>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x80>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a18      	ldr	r2, [pc, #96]	@ (80062a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d111      	bne.n	8006270 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b06      	cmp	r3, #6
 800625c:	d010      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e007      	b.n	8006280 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40010000 	.word	0x40010000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40010400 	.word	0x40010400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40001800 	.word	0x40001800

080062ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d020      	beq.n	8006310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01b      	beq.n	8006310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0202 	mvn.w	r2, #2
 80062e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f8d2 	bl	80064a0 <HAL_TIM_IC_CaptureCallback>
 80062fc:	e005      	b.n	800630a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8c4 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8d5 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d020      	beq.n	800635c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01b      	beq.n	800635c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0204 	mvn.w	r2, #4
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8ac 	bl	80064a0 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f89e 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f8af 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d020      	beq.n	80063a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01b      	beq.n	80063a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0208 	mvn.w	r2, #8
 8006378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2204      	movs	r2, #4
 800637e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f886 	bl	80064a0 <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f878 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f889 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d020      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01b      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0210 	mvn.w	r2, #16
 80063c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2208      	movs	r2, #8
 80063ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f860 	bl	80064a0 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f852 	bl	800648c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f863 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0201 	mvn.w	r2, #1
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fd ff16 	bl	8004244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f906 	bl	8006648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f834 	bl	80064c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0220 	mvn.w	r2, #32
 800647c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8d8 	bl	8006634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a46      	ldr	r2, [pc, #280]	@ (8006608 <TIM_Base_SetConfig+0x12c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fa:	d00f      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a43      	ldr	r2, [pc, #268]	@ (800660c <TIM_Base_SetConfig+0x130>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00b      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a42      	ldr	r2, [pc, #264]	@ (8006610 <TIM_Base_SetConfig+0x134>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a41      	ldr	r2, [pc, #260]	@ (8006614 <TIM_Base_SetConfig+0x138>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a40      	ldr	r2, [pc, #256]	@ (8006618 <TIM_Base_SetConfig+0x13c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d108      	bne.n	800652e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a35      	ldr	r2, [pc, #212]	@ (8006608 <TIM_Base_SetConfig+0x12c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800653c:	d027      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a32      	ldr	r2, [pc, #200]	@ (800660c <TIM_Base_SetConfig+0x130>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d023      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a31      	ldr	r2, [pc, #196]	@ (8006610 <TIM_Base_SetConfig+0x134>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01f      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a30      	ldr	r2, [pc, #192]	@ (8006614 <TIM_Base_SetConfig+0x138>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2f      	ldr	r2, [pc, #188]	@ (8006618 <TIM_Base_SetConfig+0x13c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d017      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2e      	ldr	r2, [pc, #184]	@ (800661c <TIM_Base_SetConfig+0x140>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2d      	ldr	r2, [pc, #180]	@ (8006620 <TIM_Base_SetConfig+0x144>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00f      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <TIM_Base_SetConfig+0x148>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2b      	ldr	r2, [pc, #172]	@ (8006628 <TIM_Base_SetConfig+0x14c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2a      	ldr	r2, [pc, #168]	@ (800662c <TIM_Base_SetConfig+0x150>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a29      	ldr	r2, [pc, #164]	@ (8006630 <TIM_Base_SetConfig+0x154>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d108      	bne.n	80065a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a10      	ldr	r2, [pc, #64]	@ (8006608 <TIM_Base_SetConfig+0x12c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0xf8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a12      	ldr	r2, [pc, #72]	@ (8006618 <TIM_Base_SetConfig+0x13c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d103      	bne.n	80065dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d105      	bne.n	80065fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]
  }
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40010400 	.word	0x40010400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800
 8006628:	40001800 	.word	0x40001800
 800662c:	40001c00 	.word	0x40001c00
 8006630:	40002000 	.word	0x40002000

08006634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e042      	b.n	80066f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fd fe48 	bl	8004318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2224      	movs	r2, #36	@ 0x24
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800669e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fdbd 	bl	8007220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b20      	cmp	r3, #32
 800671a:	d175      	bne.n	8006808 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <HAL_UART_Transmit+0x2c>
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e06e      	b.n	800680a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2221      	movs	r2, #33	@ 0x21
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800673a:	f7fd ff5b 	bl	80045f4 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006754:	d108      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e003      	b.n	8006770 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006770:	e02e      	b.n	80067d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	2180      	movs	r1, #128	@ 0x80
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fb1f 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e03a      	b.n	800680a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3302      	adds	r3, #2
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	e007      	b.n	80067c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1cb      	bne.n	8006772 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	2140      	movs	r1, #64	@ 0x40
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 faeb 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e006      	b.n	800680a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	e000      	b.n	800680a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006808:	2302      	movs	r3, #2
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	4613      	mov	r3, r2
 800681e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b20      	cmp	r3, #32
 800682a:	d112      	bne.n	8006852 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_UART_Receive_IT+0x26>
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e00b      	b.n	8006854 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	461a      	mov	r2, r3
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fb12 	bl	8006e72 <UART_Start_Receive_IT>
 800684e:	4603      	mov	r3, r0
 8006850:	e000      	b.n	8006854 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006852:	2302      	movs	r3, #2
  }
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0ba      	sub	sp, #232	@ 0xe8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006882:	2300      	movs	r3, #0
 8006884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800689a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_UART_IRQHandler+0x66>
 80068ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fbf2 	bl	80070a4 <UART_Receive_IT>
      return;
 80068c0:	e25b      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80de 	beq.w	8006a88 <HAL_UART_IRQHandler+0x22c>
 80068cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80d1 	beq.w	8006a88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_UART_IRQHandler+0xae>
 80068f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	f043 0202 	orr.w	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_UART_IRQHandler+0xf6>
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d011      	beq.n	8006982 <HAL_UART_IRQHandler+0x126>
 800695e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800696a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697a:	f043 0208 	orr.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 81f2 	beq.w	8006d70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_UART_IRQHandler+0x14e>
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb7d 	bl	80070a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b4:	2b40      	cmp	r3, #64	@ 0x40
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <HAL_UART_IRQHandler+0x17a>
 80069ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d04f      	beq.n	8006a76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa85 	bl	8006ee6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	d141      	bne.n	8006a6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3314      	adds	r3, #20
 8006a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1d9      	bne.n	80069ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d013      	beq.n	8006a66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	4a7e      	ldr	r2, [pc, #504]	@ (8006c3c <HAL_UART_IRQHandler+0x3e0>)
 8006a44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fd ff30 	bl	80048b0 <HAL_DMA_Abort_IT>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d016      	beq.n	8006a84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	e00e      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f994 	bl	8006d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	e00a      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f990 	bl	8006d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	e006      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f98c 	bl	8006d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a82:	e175      	b.n	8006d70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	bf00      	nop
    return;
 8006a86:	e173      	b.n	8006d70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	f040 814f 	bne.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 8148 	beq.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8141 	beq.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b40      	cmp	r3, #64	@ 0x40
 8006ad0:	f040 80b6 	bne.w	8006c40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8145 	beq.w	8006d74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006af2:	429a      	cmp	r2, r3
 8006af4:	f080 813e 	bcs.w	8006d74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006afe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b0a:	f000 8088 	beq.w	8006c1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1d9      	bne.n	8006b0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e1      	bne.n	8006b5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3314      	adds	r3, #20
 8006b9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3314      	adds	r3, #20
 8006bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e3      	bne.n	8006b96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e3      	bne.n	8006bdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fd fdd9 	bl	80047d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8b7 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c3a:	e09b      	b.n	8006d74 <HAL_UART_IRQHandler+0x518>
 8006c3c:	08006fad 	.word	0x08006fad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 808e 	beq.w	8006d78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8089 	beq.w	8006d78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	623b      	str	r3, [r7, #32]
   return(result);
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e3      	bne.n	8006c9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0310 	bic.w	r3, r3, #16
 8006cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d08:	61fa      	str	r2, [r7, #28]
 8006d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	617b      	str	r3, [r7, #20]
   return(result);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e3      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f83d 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d2e:	e023      	b.n	8006d78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_UART_IRQHandler+0x4f4>
 8006d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f943 	bl	8006fd4 <UART_Transmit_IT>
    return;
 8006d4e:	e014      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00e      	beq.n	8006d7a <HAL_UART_IRQHandler+0x51e>
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f983 	bl	8007074 <UART_EndTransmit_IT>
    return;
 8006d6e:	e004      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006d70:	bf00      	nop
 8006d72:	e002      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d78:	bf00      	nop
  }
}
 8006d7a:	37e8      	adds	r7, #232	@ 0xe8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd0:	e03b      	b.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dd8:	d037      	beq.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dda:	f7fd fc0b 	bl	80045f4 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d302      	bcc.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e03a      	b.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d023      	beq.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b80      	cmp	r3, #128	@ 0x80
 8006e06:	d020      	beq.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b40      	cmp	r3, #64	@ 0x40
 8006e0c:	d01d      	beq.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d116      	bne.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f857 	bl	8006ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e00f      	b.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4013      	ands	r3, r2
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	bf0c      	ite	eq
 8006e5a:	2301      	moveq	r3, #1
 8006e5c:	2300      	movne	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d0b4      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	88fa      	ldrh	r2, [r7, #6]
 8006e8a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2222      	movs	r2, #34	@ 0x22
 8006e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eb6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695a      	ldr	r2, [r3, #20]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0220 	orr.w	r2, r2, #32
 8006ed6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b095      	sub	sp, #84	@ 0x54
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e5      	bne.n	8006eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d119      	bne.n	8006f92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f023 0310 	bic.w	r3, r3, #16
 8006f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f7e:	61ba      	str	r2, [r7, #24]
 8006f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6979      	ldr	r1, [r7, #20]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e5      	bne.n	8006f5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fa0:	bf00      	nop
 8006fa2:	3754      	adds	r7, #84	@ 0x54
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff fee4 	bl	8006d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b21      	cmp	r3, #33	@ 0x21
 8006fe6:	d13e      	bne.n	8007066 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff0:	d114      	bne.n	800701c <UART_Transmit_IT+0x48>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d110      	bne.n	800701c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	1c9a      	adds	r2, r3, #2
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]
 800701a:	e008      	b.n	800702e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	1c59      	adds	r1, r3, #1
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6211      	str	r1, [r2, #32]
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29b      	uxth	r3, r3
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4619      	mov	r1, r3
 800703c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10f      	bne.n	8007062 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007050:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007060:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	e000      	b.n	8007068 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007066:	2302      	movs	r3, #2
  }
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800708a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff fe73 	bl	8006d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08c      	sub	sp, #48	@ 0x30
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b22      	cmp	r3, #34	@ 0x22
 80070b6:	f040 80ae 	bne.w	8007216 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c2:	d117      	bne.n	80070f4 <UART_Receive_IT+0x50>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d113      	bne.n	80070f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ec:	1c9a      	adds	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80070f2:	e026      	b.n	8007142 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007106:	d007      	beq.n	8007118 <UART_Receive_IT+0x74>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <UART_Receive_IT+0x82>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e008      	b.n	8007138 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007132:	b2da      	uxtb	r2, r3
 8007134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007136:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29b      	uxth	r3, r3
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4619      	mov	r1, r3
 8007150:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007152:	2b00      	cmp	r3, #0
 8007154:	d15d      	bne.n	8007212 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0220 	bic.w	r2, r2, #32
 8007164:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007174:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0201 	bic.w	r2, r2, #1
 8007184:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	d135      	bne.n	8007208 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	613b      	str	r3, [r7, #16]
   return(result);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f023 0310 	bic.w	r3, r3, #16
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c2:	623a      	str	r2, [r7, #32]
 80071c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	69f9      	ldr	r1, [r7, #28]
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d10a      	bne.n	80071fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fdd1 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
 8007206:	e002      	b.n	800720e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fc ffd9 	bl	80041c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e002      	b.n	8007218 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	e000      	b.n	8007218 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007216:	2302      	movs	r3, #2
  }
}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	@ 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007224:	b0c0      	sub	sp, #256	@ 0x100
 8007226:	af00      	add	r7, sp, #0
 8007228:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723c:	68d9      	ldr	r1, [r3, #12]
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	ea40 0301 	orr.w	r3, r0, r1
 8007248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800724a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	431a      	orrs	r2, r3
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	431a      	orrs	r2, r3
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007278:	f021 010c 	bic.w	r1, r1, #12
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007286:	430b      	orrs	r3, r1
 8007288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729a:	6999      	ldr	r1, [r3, #24]
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	ea40 0301 	orr.w	r3, r0, r1
 80072a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b8f      	ldr	r3, [pc, #572]	@ (80074ec <UART_SetConfig+0x2cc>)
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d005      	beq.n	80072c0 <UART_SetConfig+0xa0>
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b8d      	ldr	r3, [pc, #564]	@ (80074f0 <UART_SetConfig+0x2d0>)
 80072bc:	429a      	cmp	r2, r3
 80072be:	d104      	bne.n	80072ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072c0:	f7fd fde6 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
 80072c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072c8:	e003      	b.n	80072d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ca:	f7fd fdcd 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 80072ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072dc:	f040 810c 	bne.w	80074f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072e4:	2200      	movs	r2, #0
 80072e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072f2:	4622      	mov	r2, r4
 80072f4:	462b      	mov	r3, r5
 80072f6:	1891      	adds	r1, r2, r2
 80072f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072fa:	415b      	adcs	r3, r3
 80072fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007302:	4621      	mov	r1, r4
 8007304:	eb12 0801 	adds.w	r8, r2, r1
 8007308:	4629      	mov	r1, r5
 800730a:	eb43 0901 	adc.w	r9, r3, r1
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800731a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800731e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007322:	4690      	mov	r8, r2
 8007324:	4699      	mov	r9, r3
 8007326:	4623      	mov	r3, r4
 8007328:	eb18 0303 	adds.w	r3, r8, r3
 800732c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007330:	462b      	mov	r3, r5
 8007332:	eb49 0303 	adc.w	r3, r9, r3
 8007336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800733a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007346:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800734a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800734e:	460b      	mov	r3, r1
 8007350:	18db      	adds	r3, r3, r3
 8007352:	653b      	str	r3, [r7, #80]	@ 0x50
 8007354:	4613      	mov	r3, r2
 8007356:	eb42 0303 	adc.w	r3, r2, r3
 800735a:	657b      	str	r3, [r7, #84]	@ 0x54
 800735c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007364:	f7f8 ff66 	bl	8000234 <__aeabi_uldivmod>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4b61      	ldr	r3, [pc, #388]	@ (80074f4 <UART_SetConfig+0x2d4>)
 800736e:	fba3 2302 	umull	r2, r3, r3, r2
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	011c      	lsls	r4, r3, #4
 8007376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800737a:	2200      	movs	r2, #0
 800737c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007380:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	1891      	adds	r1, r2, r2
 800738e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007390:	415b      	adcs	r3, r3
 8007392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007398:	4641      	mov	r1, r8
 800739a:	eb12 0a01 	adds.w	sl, r2, r1
 800739e:	4649      	mov	r1, r9
 80073a0:	eb43 0b01 	adc.w	fp, r3, r1
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	f04f 0300 	mov.w	r3, #0
 80073ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073b8:	4692      	mov	sl, r2
 80073ba:	469b      	mov	fp, r3
 80073bc:	4643      	mov	r3, r8
 80073be:	eb1a 0303 	adds.w	r3, sl, r3
 80073c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073c6:	464b      	mov	r3, r9
 80073c8:	eb4b 0303 	adc.w	r3, fp, r3
 80073cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073e4:	460b      	mov	r3, r1
 80073e6:	18db      	adds	r3, r3, r3
 80073e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ea:	4613      	mov	r3, r2
 80073ec:	eb42 0303 	adc.w	r3, r2, r3
 80073f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073fa:	f7f8 ff1b 	bl	8000234 <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4611      	mov	r1, r2
 8007404:	4b3b      	ldr	r3, [pc, #236]	@ (80074f4 <UART_SetConfig+0x2d4>)
 8007406:	fba3 2301 	umull	r2, r3, r3, r1
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	2264      	movs	r2, #100	@ 0x64
 800740e:	fb02 f303 	mul.w	r3, r2, r3
 8007412:	1acb      	subs	r3, r1, r3
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800741a:	4b36      	ldr	r3, [pc, #216]	@ (80074f4 <UART_SetConfig+0x2d4>)
 800741c:	fba3 2302 	umull	r2, r3, r3, r2
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007428:	441c      	add	r4, r3
 800742a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007434:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800743c:	4642      	mov	r2, r8
 800743e:	464b      	mov	r3, r9
 8007440:	1891      	adds	r1, r2, r2
 8007442:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007444:	415b      	adcs	r3, r3
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800744c:	4641      	mov	r1, r8
 800744e:	1851      	adds	r1, r2, r1
 8007450:	6339      	str	r1, [r7, #48]	@ 0x30
 8007452:	4649      	mov	r1, r9
 8007454:	414b      	adcs	r3, r1
 8007456:	637b      	str	r3, [r7, #52]	@ 0x34
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007464:	4659      	mov	r1, fp
 8007466:	00cb      	lsls	r3, r1, #3
 8007468:	4651      	mov	r1, sl
 800746a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800746e:	4651      	mov	r1, sl
 8007470:	00ca      	lsls	r2, r1, #3
 8007472:	4610      	mov	r0, r2
 8007474:	4619      	mov	r1, r3
 8007476:	4603      	mov	r3, r0
 8007478:	4642      	mov	r2, r8
 800747a:	189b      	adds	r3, r3, r2
 800747c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007480:	464b      	mov	r3, r9
 8007482:	460a      	mov	r2, r1
 8007484:	eb42 0303 	adc.w	r3, r2, r3
 8007488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007498:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800749c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074a0:	460b      	mov	r3, r1
 80074a2:	18db      	adds	r3, r3, r3
 80074a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a6:	4613      	mov	r3, r2
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074b6:	f7f8 febd 	bl	8000234 <__aeabi_uldivmod>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4b0d      	ldr	r3, [pc, #52]	@ (80074f4 <UART_SetConfig+0x2d4>)
 80074c0:	fba3 1302 	umull	r1, r3, r3, r2
 80074c4:	095b      	lsrs	r3, r3, #5
 80074c6:	2164      	movs	r1, #100	@ 0x64
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	3332      	adds	r3, #50	@ 0x32
 80074d2:	4a08      	ldr	r2, [pc, #32]	@ (80074f4 <UART_SetConfig+0x2d4>)
 80074d4:	fba2 2303 	umull	r2, r3, r2, r3
 80074d8:	095b      	lsrs	r3, r3, #5
 80074da:	f003 0207 	and.w	r2, r3, #7
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4422      	add	r2, r4
 80074e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074e8:	e106      	b.n	80076f8 <UART_SetConfig+0x4d8>
 80074ea:	bf00      	nop
 80074ec:	40011000 	.word	0x40011000
 80074f0:	40011400 	.word	0x40011400
 80074f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007502:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800750a:	4642      	mov	r2, r8
 800750c:	464b      	mov	r3, r9
 800750e:	1891      	adds	r1, r2, r2
 8007510:	6239      	str	r1, [r7, #32]
 8007512:	415b      	adcs	r3, r3
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
 8007516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800751a:	4641      	mov	r1, r8
 800751c:	1854      	adds	r4, r2, r1
 800751e:	4649      	mov	r1, r9
 8007520:	eb43 0501 	adc.w	r5, r3, r1
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	00eb      	lsls	r3, r5, #3
 800752e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007532:	00e2      	lsls	r2, r4, #3
 8007534:	4614      	mov	r4, r2
 8007536:	461d      	mov	r5, r3
 8007538:	4643      	mov	r3, r8
 800753a:	18e3      	adds	r3, r4, r3
 800753c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007540:	464b      	mov	r3, r9
 8007542:	eb45 0303 	adc.w	r3, r5, r3
 8007546:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007556:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007566:	4629      	mov	r1, r5
 8007568:	008b      	lsls	r3, r1, #2
 800756a:	4621      	mov	r1, r4
 800756c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007570:	4621      	mov	r1, r4
 8007572:	008a      	lsls	r2, r1, #2
 8007574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007578:	f7f8 fe5c 	bl	8000234 <__aeabi_uldivmod>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4b60      	ldr	r3, [pc, #384]	@ (8007704 <UART_SetConfig+0x4e4>)
 8007582:	fba3 2302 	umull	r2, r3, r3, r2
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	011c      	lsls	r4, r3, #4
 800758a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800758e:	2200      	movs	r2, #0
 8007590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007594:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800759c:	4642      	mov	r2, r8
 800759e:	464b      	mov	r3, r9
 80075a0:	1891      	adds	r1, r2, r2
 80075a2:	61b9      	str	r1, [r7, #24]
 80075a4:	415b      	adcs	r3, r3
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ac:	4641      	mov	r1, r8
 80075ae:	1851      	adds	r1, r2, r1
 80075b0:	6139      	str	r1, [r7, #16]
 80075b2:	4649      	mov	r1, r9
 80075b4:	414b      	adcs	r3, r1
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075c4:	4659      	mov	r1, fp
 80075c6:	00cb      	lsls	r3, r1, #3
 80075c8:	4651      	mov	r1, sl
 80075ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ce:	4651      	mov	r1, sl
 80075d0:	00ca      	lsls	r2, r1, #3
 80075d2:	4610      	mov	r0, r2
 80075d4:	4619      	mov	r1, r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	4642      	mov	r2, r8
 80075da:	189b      	adds	r3, r3, r2
 80075dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075e0:	464b      	mov	r3, r9
 80075e2:	460a      	mov	r2, r1
 80075e4:	eb42 0303 	adc.w	r3, r2, r3
 80075e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007604:	4649      	mov	r1, r9
 8007606:	008b      	lsls	r3, r1, #2
 8007608:	4641      	mov	r1, r8
 800760a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800760e:	4641      	mov	r1, r8
 8007610:	008a      	lsls	r2, r1, #2
 8007612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007616:	f7f8 fe0d 	bl	8000234 <__aeabi_uldivmod>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4611      	mov	r1, r2
 8007620:	4b38      	ldr	r3, [pc, #224]	@ (8007704 <UART_SetConfig+0x4e4>)
 8007622:	fba3 2301 	umull	r2, r3, r3, r1
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	2264      	movs	r2, #100	@ 0x64
 800762a:	fb02 f303 	mul.w	r3, r2, r3
 800762e:	1acb      	subs	r3, r1, r3
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	3332      	adds	r3, #50	@ 0x32
 8007634:	4a33      	ldr	r2, [pc, #204]	@ (8007704 <UART_SetConfig+0x4e4>)
 8007636:	fba2 2303 	umull	r2, r3, r2, r3
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007640:	441c      	add	r4, r3
 8007642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007646:	2200      	movs	r2, #0
 8007648:	673b      	str	r3, [r7, #112]	@ 0x70
 800764a:	677a      	str	r2, [r7, #116]	@ 0x74
 800764c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	1891      	adds	r1, r2, r2
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	415b      	adcs	r3, r3
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007660:	4641      	mov	r1, r8
 8007662:	1851      	adds	r1, r2, r1
 8007664:	6039      	str	r1, [r7, #0]
 8007666:	4649      	mov	r1, r9
 8007668:	414b      	adcs	r3, r1
 800766a:	607b      	str	r3, [r7, #4]
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007678:	4659      	mov	r1, fp
 800767a:	00cb      	lsls	r3, r1, #3
 800767c:	4651      	mov	r1, sl
 800767e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007682:	4651      	mov	r1, sl
 8007684:	00ca      	lsls	r2, r1, #3
 8007686:	4610      	mov	r0, r2
 8007688:	4619      	mov	r1, r3
 800768a:	4603      	mov	r3, r0
 800768c:	4642      	mov	r2, r8
 800768e:	189b      	adds	r3, r3, r2
 8007690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007692:	464b      	mov	r3, r9
 8007694:	460a      	mov	r2, r1
 8007696:	eb42 0303 	adc.w	r3, r2, r3
 800769a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80076a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076b4:	4649      	mov	r1, r9
 80076b6:	008b      	lsls	r3, r1, #2
 80076b8:	4641      	mov	r1, r8
 80076ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076be:	4641      	mov	r1, r8
 80076c0:	008a      	lsls	r2, r1, #2
 80076c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076c6:	f7f8 fdb5 	bl	8000234 <__aeabi_uldivmod>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <UART_SetConfig+0x4e4>)
 80076d0:	fba3 1302 	umull	r1, r3, r3, r2
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	2164      	movs	r1, #100	@ 0x64
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	3332      	adds	r3, #50	@ 0x32
 80076e2:	4a08      	ldr	r2, [pc, #32]	@ (8007704 <UART_SetConfig+0x4e4>)
 80076e4:	fba2 2303 	umull	r2, r3, r2, r3
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4422      	add	r2, r4
 80076f6:	609a      	str	r2, [r3, #8]
}
 80076f8:	bf00      	nop
 80076fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076fe:	46bd      	mov	sp, r7
 8007700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007704:	51eb851f 	.word	0x51eb851f

08007708 <memset>:
 8007708:	4402      	add	r2, r0
 800770a:	4603      	mov	r3, r0
 800770c:	4293      	cmp	r3, r2
 800770e:	d100      	bne.n	8007712 <memset+0xa>
 8007710:	4770      	bx	lr
 8007712:	f803 1b01 	strb.w	r1, [r3], #1
 8007716:	e7f9      	b.n	800770c <memset+0x4>

08007718 <__libc_init_array>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	4d0d      	ldr	r5, [pc, #52]	@ (8007750 <__libc_init_array+0x38>)
 800771c:	4c0d      	ldr	r4, [pc, #52]	@ (8007754 <__libc_init_array+0x3c>)
 800771e:	1b64      	subs	r4, r4, r5
 8007720:	10a4      	asrs	r4, r4, #2
 8007722:	2600      	movs	r6, #0
 8007724:	42a6      	cmp	r6, r4
 8007726:	d109      	bne.n	800773c <__libc_init_array+0x24>
 8007728:	4d0b      	ldr	r5, [pc, #44]	@ (8007758 <__libc_init_array+0x40>)
 800772a:	4c0c      	ldr	r4, [pc, #48]	@ (800775c <__libc_init_array+0x44>)
 800772c:	f000 f826 	bl	800777c <_init>
 8007730:	1b64      	subs	r4, r4, r5
 8007732:	10a4      	asrs	r4, r4, #2
 8007734:	2600      	movs	r6, #0
 8007736:	42a6      	cmp	r6, r4
 8007738:	d105      	bne.n	8007746 <__libc_init_array+0x2e>
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007740:	4798      	blx	r3
 8007742:	3601      	adds	r6, #1
 8007744:	e7ee      	b.n	8007724 <__libc_init_array+0xc>
 8007746:	f855 3b04 	ldr.w	r3, [r5], #4
 800774a:	4798      	blx	r3
 800774c:	3601      	adds	r6, #1
 800774e:	e7f2      	b.n	8007736 <__libc_init_array+0x1e>
 8007750:	08007b84 	.word	0x08007b84
 8007754:	08007b84 	.word	0x08007b84
 8007758:	08007b84 	.word	0x08007b84
 800775c:	08007b88 	.word	0x08007b88

08007760 <memcpy>:
 8007760:	440a      	add	r2, r1
 8007762:	4291      	cmp	r1, r2
 8007764:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007768:	d100      	bne.n	800776c <memcpy+0xc>
 800776a:	4770      	bx	lr
 800776c:	b510      	push	{r4, lr}
 800776e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007776:	4291      	cmp	r1, r2
 8007778:	d1f9      	bne.n	800776e <memcpy+0xe>
 800777a:	bd10      	pop	{r4, pc}

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
