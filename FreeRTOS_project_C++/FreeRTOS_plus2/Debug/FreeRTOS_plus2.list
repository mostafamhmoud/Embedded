
FreeRTOS_plus2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008878  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08008a48  08008a48  00009a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b8  080091b8  0000b094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091c0  080091c0  0000b094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091cc  080091cc  0000a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  080091d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013090  20000094  08009264  0000b094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013124  08009264  0000b124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187ad  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca2  00000000  00000000  00023871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00027518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101e  00000000  00000000  000289e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c62  00000000  00000000  00029a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dd8  00000000  00000000  00050668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1cd8  00000000  00000000  00068440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be0  00000000  00000000  0014a15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0014fd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a30 	.word	0x08008a30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08008a30 	.word	0x08008a30

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <_ZN13FreeRTOSTimerC1EPKcmmPvPFvP15tmrTimerControlE>:
#include "main.h"
#include "FreeRTOS_Timer.hpp"


FreeRTOSTimer::FreeRTOSTimer(const char* name, TickType_t period_ticks, UBaseType_t auto_reload, void* timer_id, TimerCallbackFunction_t callback)
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	603b      	str	r3, [r7, #0]
{
    timerHandle = xTimerCreate(
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f006 fe01 	bl	800722c <xTimerCreate>
 800062a:	4602      	mov	r2, r0
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	601a      	str	r2, [r3, #0]
        period_ticks,
        auto_reload,
        timer_id,
        callback
    );
}
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <_ZN13FreeRTOSTimer5StartEm>:

bool FreeRTOSTimer::Start(TickType_t block_time)
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b085      	sub	sp, #20
 800063e:	af02      	add	r7, sp, #8
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
    return xTimerStart(timerHandle, block_time) == pdPASS;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681c      	ldr	r4, [r3, #0]
 8000648:	f005 fd62 	bl	8006110 <xTaskGetTickCount>
 800064c:	4602      	mov	r2, r0
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	2101      	movs	r1, #1
 8000656:	4620      	mov	r0, r4
 8000658:	f006 fe42 	bl	80072e0 <xTimerGenericCommand>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	bf0c      	ite	eq
 8000662:	2301      	moveq	r3, #1
 8000664:	2300      	movne	r3, #0
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}

08000670 <_ZN13FreeRTOSTimer4StopEm>:

bool FreeRTOSTimer::Stop(TickType_t block_time)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
    return xTimerStop(timerHandle, block_time) == pdPASS;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	2103      	movs	r1, #3
 8000688:	f006 fe2a 	bl	80072e0 <xTimerGenericCommand>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	bf0c      	ite	eq
 8000692:	2301      	moveq	r3, #1
 8000694:	2300      	movne	r3, #0
 8000696:	b2db      	uxtb	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_ZN8BaseTaskC1EPKctm>:
// BaseTask class definition
class BaseTask
{
public:
    // Constructor for the base class
    BaseTask(const char* name, uint16_t stackSize, UBaseType_t priority)
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4613      	mov	r3, r2
 80006ae:	80fb      	strh	r3, [r7, #6]
        : _taskName(name), _stackSize(stackSize), _priority(priority), TaskHandle(nullptr) {}
 80006b0:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <_ZN8BaseTaskC1EPKctm+0x3c>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	811a      	strh	r2, [r3, #8]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	08009164 	.word	0x08009164

080006e0 <_ZN8BaseTask13GetTaskHandleEv>:
        BaseTask* task = static_cast<BaseTask*>(pvParams);
        task->run(); // Calls the run method of the derived class
    }

    // Get the task handle
    TaskHandle_t GetTaskHandle() { return TaskHandle; }
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	4618      	mov	r0, r3
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <_Z12callBackFuncP15tmrTimerControl>:
 */

//extern FreeRTOSTimer timer[4];

void callBackFunc(TimerHandle_t xtimer)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
    uint8_t timer_id = reinterpret_cast<uintptr_t>(pvTimerGetTimerID(xtimer));
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f007 f893 	bl	800782c <pvTimerGetTimerID>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]

    led_task.ledEffectAction(timer_id);
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	4619      	mov	r1, r3
 800070e:	4803      	ldr	r0, [pc, #12]	@ (800071c <_Z12callBackFuncP15tmrTimerControl+0x24>)
 8000710:	f000 fa6c 	bl	8000bec <_ZN7LedTask15ledEffectActionEi>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200001a8 	.word	0x200001a8

08000720 <_ZN8MenuTaskC1Ev>:
	FreeRTOSTimer("timer", pdMS_TO_TICKS(1000), pdTRUE, (void*)4, callBackFunc),
};



MenuTask::MenuTask() 
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
: BaseTask("Menu Task" , 250 , 2){}
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	2302      	movs	r3, #2
 800072c:	22fa      	movs	r2, #250	@ 0xfa
 800072e:	4905      	ldr	r1, [pc, #20]	@ (8000744 <_ZN8MenuTaskC1Ev+0x24>)
 8000730:	f7ff ffb6 	bl	80006a0 <_ZN8BaseTaskC1EPKctm>
 8000734:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <_ZN8MenuTaskC1Ev+0x28>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	08008a48 	.word	0x08008a48
 8000748:	08009158 	.word	0x08009158

0800074c <_ZN8MenuTask3runEv>:

uint8_t task_state = 1 ;

void MenuTask::run()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af02      	add	r7, sp, #8
 8000752:	6078      	str	r0, [r7, #4]
    Cmd_t* local_cmdPtr ;
    BaseType_t local_return;
    uint32_t notif_value ;
    while (1)
    {
        Q_print.send(Messages::menu_message, portMAX_DELAY);
 8000754:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000758:	492a      	ldr	r1, [pc, #168]	@ (8000804 <_ZN8MenuTask3runEv+0xb8>)
 800075a:	482b      	ldr	r0, [pc, #172]	@ (8000808 <_ZN8MenuTask3runEv+0xbc>)
 800075c:	f000 fcf0 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>

        /* we recieve notification value which is the address of the command */
        local_return = xTaskNotifyWait(0 , 0 , &notif_value , portMAX_DELAY);
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	f006 f9a2 	bl	8006ab8 <xTaskGenericNotifyWait>
 8000774:	6178      	str	r0, [r7, #20]

        local_cmdPtr = reinterpret_cast<Cmd_t*>(notif_value);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	613b      	str	r3, [r7, #16]

        /* command length should be 1 */
        if(local_cmdPtr->len == 1)
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	7a9b      	ldrb	r3, [r3, #10]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d12d      	bne.n	80007de <_ZN8MenuTask3runEv+0x92>
        {
            switch(local_cmdPtr->Payload[0])
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b32      	cmp	r3, #50	@ 0x32
 8000788:	d030      	beq.n	80007ec <_ZN8MenuTask3runEv+0xa0>
 800078a:	2b32      	cmp	r3, #50	@ 0x32
 800078c:	dc20      	bgt.n	80007d0 <_ZN8MenuTask3runEv+0x84>
 800078e:	2b30      	cmp	r3, #48	@ 0x30
 8000790:	d002      	beq.n	8000798 <_ZN8MenuTask3runEv+0x4c>
 8000792:	2b31      	cmp	r3, #49	@ 0x31
 8000794:	d00e      	beq.n	80007b4 <_ZN8MenuTask3runEv+0x68>
 8000796:	e01b      	b.n	80007d0 <_ZN8MenuTask3runEv+0x84>
            {
                case '0' :
                    Shared::current_state = LED_EFFECT_STATE ;
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <_ZN8MenuTask3runEv+0xc0>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
                    xTaskNotify(led_task.GetTaskHandle() , 0 , eNoAction);
 800079e:	481c      	ldr	r0, [pc, #112]	@ (8000810 <_ZN8MenuTask3runEv+0xc4>)
 80007a0:	f7ff ff9e 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 80007a4:	2300      	movs	r3, #0
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2300      	movs	r3, #0
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	f006 fa03 	bl	8006bb8 <xTaskGenericNotify>
                    break;
 80007b2:	e01c      	b.n	80007ee <_ZN8MenuTask3runEv+0xa2>
                case '1' :
                    Shared::current_state = RTC_MENU_STATE ;
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <_ZN8MenuTask3runEv+0xc0>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	701a      	strb	r2, [r3, #0]
                    xTaskNotify(rtc_task.GetTaskHandle() , 0 , eNoAction);
 80007ba:	4816      	ldr	r0, [pc, #88]	@ (8000814 <_ZN8MenuTask3runEv+0xc8>)
 80007bc:	f7ff ff90 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 80007c0:	2300      	movs	r3, #0
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	f006 f9f5 	bl	8006bb8 <xTaskGenericNotify>
                    break;
 80007ce:	e00e      	b.n	80007ee <_ZN8MenuTask3runEv+0xa2>
                case '2' :
                    break;
                default:
                    Q_print.send(Messages::invalid_message); continue;
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007d4:	4910      	ldr	r1, [pc, #64]	@ (8000818 <_ZN8MenuTask3runEv+0xcc>)
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <_ZN8MenuTask3runEv+0xbc>)
 80007d8:	f000 fcb2 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
 80007dc:	e010      	b.n	8000800 <_ZN8MenuTask3runEv+0xb4>
            }
        }
        else
        {
            Q_print.send(Messages::invalid_message);continue;
 80007de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007e2:	490d      	ldr	r1, [pc, #52]	@ (8000818 <_ZN8MenuTask3runEv+0xcc>)
 80007e4:	4808      	ldr	r0, [pc, #32]	@ (8000808 <_ZN8MenuTask3runEv+0xbc>)
 80007e6:	f000 fcab 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
 80007ea:	e009      	b.n	8000800 <_ZN8MenuTask3runEv+0xb4>
                    break;
 80007ec:	bf00      	nop
        }

        /*wait to run again until other task notifies */
        xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2300      	movs	r3, #0
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2000      	movs	r0, #0
 80007fc:	f006 f95c 	bl	8006ab8 <xTaskGenericNotifyWait>
        Q_print.send(Messages::menu_message, portMAX_DELAY);
 8000800:	e7a8      	b.n	8000754 <_ZN8MenuTask3runEv+0x8>
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000
 8000808:	20000164 	.word	0x20000164
 800080c:	20000161 	.word	0x20000161
 8000810:	200001a8 	.word	0x200001a8
 8000814:	200001bc 	.word	0x200001bc
 8000818:	20000024 	.word	0x20000024

0800081c <_ZN9PrintTaskC1Ev>:
    } 
}

PrintTask::PrintTask()
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
: BaseTask("Print Task" , 250 , 2){}
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	2302      	movs	r3, #2
 8000828:	22fa      	movs	r2, #250	@ 0xfa
 800082a:	4905      	ldr	r1, [pc, #20]	@ (8000840 <_ZN9PrintTaskC1Ev+0x24>)
 800082c:	f7ff ff38 	bl	80006a0 <_ZN8BaseTaskC1EPKctm>
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <_ZN9PrintTaskC1Ev+0x28>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	08008a54 	.word	0x08008a54
 8000844:	0800914c 	.word	0x0800914c

08000848 <_ZN9PrintTask3runEv>:

void PrintTask::run()
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    const char* local_msg;
    while (1)
    {
        Q_print.receive(local_msg , portMAX_DELAY);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000858:	4619      	mov	r1, r3
 800085a:	4809      	ldr	r0, [pc, #36]	@ (8000880 <_ZN9PrintTask3runEv+0x38>)
 800085c:	f000 fc87 	bl	800116e <_ZN5QueueIPKcE7receiveERS1_m>

        HAL_UART_Transmit(&huart2 , (uint8_t*)local_msg , strlen((char*)local_msg) , HAL_MAX_DELAY);
 8000860:	68fc      	ldr	r4, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fcdd 	bl	8000224 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000872:	4621      	mov	r1, r4
 8000874:	4803      	ldr	r0, [pc, #12]	@ (8000884 <_ZN9PrintTask3runEv+0x3c>)
 8000876:	f003 fb75 	bl	8003f64 <HAL_UART_Transmit>
        Q_print.receive(local_msg , portMAX_DELAY);
 800087a:	bf00      	nop
 800087c:	e7e8      	b.n	8000850 <_ZN9PrintTask3runEv+0x8>
 800087e:	bf00      	nop
 8000880:	20000164 	.word	0x20000164
 8000884:	20000118 	.word	0x20000118

08000888 <_ZN13CmdHandleTaskC1Ev>:
    }
    
}


CmdHandleTask::CmdHandleTask() 
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
: BaseTask("Cmd Handle Task" , 250 , 2){}
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	2302      	movs	r3, #2
 8000894:	22fa      	movs	r2, #250	@ 0xfa
 8000896:	4905      	ldr	r1, [pc, #20]	@ (80008ac <_ZN13CmdHandleTaskC1Ev+0x24>)
 8000898:	f7ff ff02 	bl	80006a0 <_ZN8BaseTaskC1EPKctm>
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <_ZN13CmdHandleTaskC1Ev+0x28>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	08008a60 	.word	0x08008a60
 80008b0:	08009140 	.word	0x08009140

080008b4 <_ZN13CmdHandleTask3runEv>:

uint32_t notify_value;
void CmdHandleTask::run()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	6078      	str	r0, [r7, #4]
    BaseType_t local_return ;

    Cmd_t cmd ;
    while (1)
    {
        local_return = xTaskNotifyWait(0, 0, &notify_value , portMAX_DELAY);
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <_ZN13CmdHandleTask3runEv+0x30>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f006 f8f5 	bl	8006ab8 <xTaskGenericNotifyWait>
 80008ce:	6178      	str	r0, [r7, #20]
        
        if(local_return == pdTRUE)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d1f2      	bne.n	80008bc <_ZN13CmdHandleTask3runEv+0x8>
        {
              ProcessCmd(cmd);
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 f803 	bl	80008e8 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t>
        local_return = xTaskNotifyWait(0, 0, &notify_value , portMAX_DELAY);
 80008e2:	e7eb      	b.n	80008bc <_ZN13CmdHandleTask3runEv+0x8>
 80008e4:	200000c0 	.word	0x200000c0

080008e8 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t>:
        }
    }
}

void CmdHandleTask::ProcessCmd(Cmd_t& cmd)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
    ExtractCmd(cmd);
 80008f2:	6839      	ldr	r1, [r7, #0]
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f83b 	bl	8000970 <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t>
    Cmd_t* cmdPtr = &cmd ;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
    switch(Shared::current_state)
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x78>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b04      	cmp	r3, #4
 8000904:	dc27      	bgt.n	8000956 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x6e>
 8000906:	2b02      	cmp	r3, #2
 8000908:	da1a      	bge.n	8000940 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x58>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x2c>
 800090e:	2b01      	cmp	r3, #1
 8000910:	d00b      	beq.n	800092a <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x42>
             /*notify rtc task of the cmd */
             xTaskNotify(rtc_task.GetTaskHandle() ,reinterpret_cast<uint32_t>(cmdPtr), eSetValueWithOverwrite);
        	 break;
    }

}
 8000912:	e020      	b.n	8000956 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x6e>
             xTaskNotify(menu_task.GetTaskHandle() ,reinterpret_cast<uint32_t>(cmdPtr), eSetValueWithOverwrite); break;
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x7c>)
 8000916:	f7ff fee3 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	2300      	movs	r3, #0
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2303      	movs	r3, #3
 8000922:	2100      	movs	r1, #0
 8000924:	f006 f948 	bl	8006bb8 <xTaskGenericNotify>
 8000928:	e015      	b.n	8000956 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x6e>
             xTaskNotify(led_task.GetTaskHandle() ,reinterpret_cast<uint32_t>(cmdPtr), eSetValueWithOverwrite);
 800092a:	480f      	ldr	r0, [pc, #60]	@ (8000968 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x80>)
 800092c:	f7ff fed8 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2303      	movs	r3, #3
 8000938:	2100      	movs	r1, #0
 800093a:	f006 f93d 	bl	8006bb8 <xTaskGenericNotify>
        	 break;
 800093e:	e00a      	b.n	8000956 <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x6e>
             xTaskNotify(rtc_task.GetTaskHandle() ,reinterpret_cast<uint32_t>(cmdPtr), eSetValueWithOverwrite);
 8000940:	480a      	ldr	r0, [pc, #40]	@ (800096c <_ZN13CmdHandleTask10ProcessCmdER5Cmd_t+0x84>)
 8000942:	f7ff fecd 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	2300      	movs	r3, #0
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2303      	movs	r3, #3
 800094e:	2100      	movs	r1, #0
 8000950:	f006 f932 	bl	8006bb8 <xTaskGenericNotify>
        	 break;
 8000954:	bf00      	nop
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000161 	.word	0x20000161
 8000964:	2000016c 	.word	0x2000016c
 8000968:	200001a8 	.word	0x200001a8
 800096c:	200001bc 	.word	0x200001bc

08000970 <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t>:

void CmdHandleTask::ExtractCmd(Cmd_t& cmd)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
    UBaseType_t local_num_messgs ;
    uint8_t local_counter ;

    local_num_messgs = Q_data.getQueueSize();
 800097a:	4814      	ldr	r0, [pc, #80]	@ (80009cc <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t+0x5c>)
 800097c:	f000 fc0e 	bl	800119c <_ZN5QueueIcE12getQueueSizeEv>
 8000980:	60b8      	str	r0, [r7, #8]

    for(local_counter = 0 ; local_counter < local_num_messgs ; local_counter++)
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e010      	b.n	80009aa <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t+0x3a>
    {
        Q_data.receive(cmd.Payload[local_counter]);
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	4413      	add	r3, r2
 800098e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000992:	4619      	mov	r1, r3
 8000994:	480d      	ldr	r0, [pc, #52]	@ (80009cc <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t+0x5c>)
 8000996:	f000 fc0f 	bl	80011b8 <_ZN5QueueIcE7receiveERcm>

        if(cmd.Payload[local_counter] == '\n')
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	5cd3      	ldrb	r3, [r2, r3]
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	d007      	beq.n	80009b4 <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t+0x44>
    for(local_counter = 0 ; local_counter < local_num_messgs ; local_counter++)
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	3301      	adds	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d8ea      	bhi.n	8000988 <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t+0x18>
 80009b2:	e000      	b.n	80009b6 <_ZN13CmdHandleTask10ExtractCmdER5Cmd_t+0x46>
        {
            break;
 80009b4:	bf00      	nop
        }
    }

    /* put null char at the end of cmd to make it string */
    cmd.Payload[local_counter] = '\0';
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	2100      	movs	r1, #0
 80009bc:	54d1      	strb	r1, [r2, r3]

    /* save len of cmd excluding null char*/
    cmd.len = local_counter ;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	7bfa      	ldrb	r2, [r7, #15]
 80009c2:	729a      	strb	r2, [r3, #10]
}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000168 	.word	0x20000168

080009d0 <_ZN7LedTaskC1Ev>:


LedTask::LedTask()
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
: BaseTask("Led Task" , 250 , 2){}
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	2302      	movs	r3, #2
 80009dc:	22fa      	movs	r2, #250	@ 0xfa
 80009de:	4905      	ldr	r1, [pc, #20]	@ (80009f4 <_ZN7LedTaskC1Ev+0x24>)
 80009e0:	f7ff fe5e 	bl	80006a0 <_ZN8BaseTaskC1EPKctm>
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <_ZN7LedTaskC1Ev+0x28>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08008a70 	.word	0x08008a70
 80009f8:	08009134 	.word	0x08009134

080009fc <_ZN7LedTask3runEv>:

void LedTask::run()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	6078      	str	r0, [r7, #4]
    Cmd_t* local_cmdPtr;

    while (1)
    {
    	// Wait for external trigger to enter LED task
        local_return = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2000      	movs	r0, #0
 8000a12:	f006 f851 	bl	8006ab8 <xTaskGenericNotifyWait>
 8000a16:	6178      	str	r0, [r7, #20]
        if (local_return == pdTRUE)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d130      	bne.n	8000a80 <_ZN7LedTask3runEv+0x84>
        {
            // Show the LED effects menu
            Q_print.send(Messages::ledEffect_message);
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a22:	491e      	ldr	r1, [pc, #120]	@ (8000a9c <_ZN7LedTask3runEv+0xa0>)
 8000a24:	481e      	ldr	r0, [pc, #120]	@ (8000aa0 <_ZN7LedTask3runEv+0xa4>)
 8000a26:	f000 fb8b 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
            // Wait for the user's command
            local_return = xTaskNotifyWait(0, 0, &notif_value, portMAX_DELAY);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a32:	9200      	str	r2, [sp, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f006 f83d 	bl	8006ab8 <xTaskGenericNotifyWait>
 8000a3e:	6178      	str	r0, [r7, #20]

            if (local_return == pdTRUE)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d11c      	bne.n	8000a80 <_ZN7LedTask3runEv+0x84>
            {
                local_cmdPtr = reinterpret_cast<Cmd_t*>(notif_value);
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	60fb      	str	r3, [r7, #12]

                // Process the Led Command
                if (handleLedCommand(local_cmdPtr) == true)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f82f 	bl	8000ab4 <_ZN7LedTask16handleLedCommandERP5Cmd_t>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	bf0c      	ite	eq
 8000a5c:	2301      	moveq	r3, #1
 8000a5e:	2300      	movne	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <_ZN7LedTask3runEv+0x78>
                {
                    Q_print.send(Messages::ledEffect_success);
 8000a66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a6a:	490e      	ldr	r1, [pc, #56]	@ (8000aa4 <_ZN7LedTask3runEv+0xa8>)
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <_ZN7LedTask3runEv+0xa4>)
 8000a6e:	f000 fb67 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
 8000a72:	e005      	b.n	8000a80 <_ZN7LedTask3runEv+0x84>
                }
                else
                {
                    Q_print.send(Messages::invalid_message);
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a78:	490b      	ldr	r1, [pc, #44]	@ (8000aa8 <_ZN7LedTask3runEv+0xac>)
 8000a7a:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <_ZN7LedTask3runEv+0xa4>)
 8000a7c:	f000 fb60 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
        {
            // Optional: handle timeout
        }

        // Set system state back to MAIN MENU
        Shared::current_state = MAIN_MENU_STATE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <_ZN7LedTask3runEv+0xb0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
        // Return to Menu Task
        xTaskNotify(menu_task.GetTaskHandle(), 0, eNoAction);
 8000a86:	480a      	ldr	r0, [pc, #40]	@ (8000ab0 <_ZN7LedTask3runEv+0xb4>)
 8000a88:	f7ff fe2a 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	f006 f88f 	bl	8006bb8 <xTaskGenericNotify>
        local_return = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000a9a:	e7b3      	b.n	8000a04 <_ZN7LedTask3runEv+0x8>
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	20000164 	.word	0x20000164
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	20000024 	.word	0x20000024
 8000aac:	20000161 	.word	0x20000161
 8000ab0:	2000016c 	.word	0x2000016c

08000ab4 <_ZN7LedTask16handleLedCommandERP5Cmd_t>:
    }

}

bool LedTask::handleLedCommand(Cmd_t*& cmd)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    if (cmd->len <= 4)  // Check if command length is within acceptable limits
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	7a9b      	ldrb	r3, [r3, #10]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d84b      	bhi.n	8000b60 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xac>
    {
        if (strcmp(cmd->Payload, "none") == 0)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4927      	ldr	r1, [pc, #156]	@ (8000b6c <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xb8>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb9e 	bl	8000210 <strcmp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d104      	bne.n	8000ae4 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0x30>
        {
            ledEffectStop();
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f850 	bl	8000b80 <_ZN7LedTask13ledEffectStopEv>
            return true;  // Command successfully handled
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e03e      	b.n	8000b62 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xae>
        }
        else if (strcmp(cmd->Payload, "e1") == 0)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4921      	ldr	r1, [pc, #132]	@ (8000b70 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xbc>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb90 	bl	8000210 <strcmp>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d105      	bne.n	8000b02 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0x4e>
        {
            ledEffectStart(1);
 8000af6:	2101      	movs	r1, #1
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f85d 	bl	8000bb8 <_ZN7LedTask14ledEffectStartEi>
            return true;  // Command successfully handled
 8000afe:	2301      	movs	r3, #1
 8000b00:	e02f      	b.n	8000b62 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xae>
        }
        else if (strcmp(cmd->Payload, "e2") == 0)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	491b      	ldr	r1, [pc, #108]	@ (8000b74 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xc0>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb81 	bl	8000210 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d105      	bne.n	8000b20 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0x6c>
        {
            ledEffectStart(2);
 8000b14:	2102      	movs	r1, #2
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f84e 	bl	8000bb8 <_ZN7LedTask14ledEffectStartEi>
            return true;  // Command successfully handled
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e020      	b.n	8000b62 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xae>
        }
        else if (strcmp(cmd->Payload, "e3") == 0)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4914      	ldr	r1, [pc, #80]	@ (8000b78 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xc4>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb72 	bl	8000210 <strcmp>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d105      	bne.n	8000b3e <_ZN7LedTask16handleLedCommandERP5Cmd_t+0x8a>
        {
            ledEffectStart(3);
 8000b32:	2103      	movs	r1, #3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 f83f 	bl	8000bb8 <_ZN7LedTask14ledEffectStartEi>
            return true;  // Command successfully handled
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e011      	b.n	8000b62 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xae>
        }
        else if (strcmp(cmd->Payload, "e4") == 0)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	490e      	ldr	r1, [pc, #56]	@ (8000b7c <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xc8>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fb63 	bl	8000210 <strcmp>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d105      	bne.n	8000b5c <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xa8>
        {
            ledEffectStart(4);
 8000b50:	2104      	movs	r1, #4
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 f830 	bl	8000bb8 <_ZN7LedTask14ledEffectStartEi>
            return true;  // Command successfully handled
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e002      	b.n	8000b62 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xae>
        }
        else
        {
            // Invalid command
            return false;  // Invalid command, return false
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e000      	b.n	8000b62 <_ZN7LedTask16handleLedCommandERP5Cmd_t+0xae>
        }
    }
    else
    {
        // Invalid length of the command
        return false;  // Return false if length is greater than 4
 8000b60:	2300      	movs	r3, #0
    }
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	08008a7c 	.word	0x08008a7c
 8000b70:	08008a84 	.word	0x08008a84
 8000b74:	08008a88 	.word	0x08008a88
 8000b78:	08008a8c 	.word	0x08008a8c
 8000b7c:	08008a90 	.word	0x08008a90

08000b80 <_ZN7LedTask13ledEffectStopEv>:


/* stopp all timers*/
void LedTask::ledEffectStop()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    for(int id = 0 ; id < 4 ; id++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e00a      	b.n	8000ba4 <_ZN7LedTask13ledEffectStopEv+0x24>
    {
        timer[id].Stop();
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <_ZN7LedTask13ledEffectStopEv+0x34>)
 8000b94:	4413      	add	r3, r2
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd69 	bl	8000670 <_ZN13FreeRTOSTimer4StopEm>
    for(int id = 0 ; id < 4 ; id++)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	ddf1      	ble.n	8000b8e <_ZN7LedTask13ledEffectStopEv+0xe>
    }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000b0 	.word	0x200000b0

08000bb8 <_ZN7LedTask14ledEffectStartEi>:


/* enter num from 1 > 4*/
void LedTask::ledEffectStart(int action_num)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    /* stop all timers */
    led_task.ledEffectStop();
 8000bc2:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <_ZN7LedTask14ledEffectStartEi+0x2c>)
 8000bc4:	f7ff ffdc 	bl	8000b80 <_ZN7LedTask13ledEffectStopEv>

    timer[action_num-1].Start();
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <_ZN7LedTask14ledEffectStartEi+0x30>)
 8000bd0:	4413      	add	r3, r2
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fd30 	bl	800063a <_ZN13FreeRTOSTimer5StartEm>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001a8 	.word	0x200001a8
 8000be8:	200000b0 	.word	0x200000b0

08000bec <_ZN7LedTask15ledEffectActionEi>:


void LedTask::ledEffectAction(int action_num)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
    switch (action_num)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d820      	bhi.n	8000c40 <_ZN7LedTask15ledEffectActionEi+0x54>
 8000bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8000c04 <_ZN7LedTask15ledEffectActionEi+0x18>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c15 	.word	0x08000c15
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c2d 	.word	0x08000c2d
 8000c10:	08000c37 	.word	0x08000c37
    {
    case 1:
        HAL_GPIO_TogglePin(LED1_PORT , LED1_PIN);
 8000c14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <_ZN7LedTask15ledEffectActionEi+0x60>)
 8000c1a:	f001 fb10 	bl	800223e <HAL_GPIO_TogglePin>
        break;
 8000c1e:	e010      	b.n	8000c42 <_ZN7LedTask15ledEffectActionEi+0x56>
    case 2:
        HAL_GPIO_TogglePin(LED2_PORT , LED2_PIN);
 8000c20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c24:	480a      	ldr	r0, [pc, #40]	@ (8000c50 <_ZN7LedTask15ledEffectActionEi+0x64>)
 8000c26:	f001 fb0a 	bl	800223e <HAL_GPIO_TogglePin>
        break;
 8000c2a:	e00a      	b.n	8000c42 <_ZN7LedTask15ledEffectActionEi+0x56>
    case 3:
        HAL_GPIO_TogglePin(LED3_PORT , LED3_PIN);
 8000c2c:	2140      	movs	r1, #64	@ 0x40
 8000c2e:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <_ZN7LedTask15ledEffectActionEi+0x64>)
 8000c30:	f001 fb05 	bl	800223e <HAL_GPIO_TogglePin>
        break;
 8000c34:	e005      	b.n	8000c42 <_ZN7LedTask15ledEffectActionEi+0x56>
    case 4:
        HAL_GPIO_TogglePin(LED4_PORT , LED4_PIN);
 8000c36:	2120      	movs	r1, #32
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <_ZN7LedTask15ledEffectActionEi+0x64>)
 8000c3a:	f001 fb00 	bl	800223e <HAL_GPIO_TogglePin>
        break;
 8000c3e:	e000      	b.n	8000c42 <_ZN7LedTask15ledEffectActionEi+0x56>
    default:
        break;
 8000c40:	bf00      	nop
    }
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020800 	.word	0x40020800

08000c54 <_ZN7RTCTaskC1Ev>:
* *******RTC task class function definitions *******************
* ********************************************
*/


RTCTask::RTCTask()
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
: BaseTask("RTC Task" , 250 , 2){}
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	2302      	movs	r3, #2
 8000c60:	22fa      	movs	r2, #250	@ 0xfa
 8000c62:	4905      	ldr	r1, [pc, #20]	@ (8000c78 <_ZN7RTCTaskC1Ev+0x24>)
 8000c64:	f7ff fd1c 	bl	80006a0 <_ZN8BaseTaskC1EPKctm>
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <_ZN7RTCTaskC1Ev+0x28>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	08008a94 	.word	0x08008a94
 8000c7c:	08009128 	.word	0x08009128

08000c80 <_ZN7RTCTask3runEv>:

void RTCTask::run()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	6078      	str	r0, [r7, #4]
    Cmd_t* local_cmdPtr;

   while (1)
   {
       /* wait for entering the rtc menu */
       xTaskNotifyWait(0 , 0 , NULL , portMAX_DELAY);
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2000      	movs	r0, #0
 8000c96:	f005 ff0f 	bl	8006ab8 <xTaskGenericNotifyWait>
       Q_print.send(Messages::rtcMenu_message);
 8000c9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c9e:	491f      	ldr	r1, [pc, #124]	@ (8000d1c <_ZN7RTCTask3runEv+0x9c>)
 8000ca0:	481f      	ldr	r0, [pc, #124]	@ (8000d20 <_ZN7RTCTask3runEv+0xa0>)
 8000ca2:	f000 fa4d 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
       
       /* wait for user to enter config type ( time , date , exit )*/
       local_return = xTaskNotifyWait(0, 0, &notif_value, portMAX_DELAY);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f005 feff 	bl	8006ab8 <xTaskGenericNotifyWait>
 8000cba:	6178      	str	r0, [r7, #20]
       local_cmdPtr = reinterpret_cast<Cmd_t*>(notif_value);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	60bb      	str	r3, [r7, #8]

       /*  process config type */
       uint8_t configTypeReturn = processConfigType(local_cmdPtr);
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f93c 	bl	8000f44 <_ZN7RTCTask17processConfigTypeERP5Cmd_t>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	74fb      	strb	r3, [r7, #19]

       if(configTypeReturn == CONFIG_TIME)
 8000cd0:	7cfb      	ldrb	r3, [r7, #19]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <_ZN7RTCTask3runEv+0x5e>
       {
            handleTimeConfig();
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f82a 	bl	8000d30 <_ZN7RTCTask16handleTimeConfigEv>
 8000cdc:	e00f      	b.n	8000cfe <_ZN7RTCTask3runEv+0x7e>
       }

       else if(configTypeReturn == CONFIG_DATE)
 8000cde:	7cfb      	ldrb	r3, [r7, #19]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d103      	bne.n	8000cec <_ZN7RTCTask3runEv+0x6c>
       {
            handleDateConfig();
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 f893 	bl	8000e10 <_ZN7RTCTask16handleDateConfigEv>
 8000cea:	e008      	b.n	8000cfe <_ZN7RTCTask3runEv+0x7e>
       }
       else if(configTypeReturn == EXIT)
 8000cec:	7cfb      	ldrb	r3, [r7, #19]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d005      	beq.n	8000cfe <_ZN7RTCTask3runEv+0x7e>
            /* Do Nothing */
       }
       
       else
       {
            Q_print.send(Messages::invalid_message);
 8000cf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cf6:	490b      	ldr	r1, [pc, #44]	@ (8000d24 <_ZN7RTCTask3runEv+0xa4>)
 8000cf8:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <_ZN7RTCTask3runEv+0xa0>)
 8000cfa:	f000 fa21 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
       }

        // Set system state back to MAIN MENU
        Shared::current_state = MAIN_MENU_STATE;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <_ZN7RTCTask3runEv+0xa8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
        // Return to Menu Task
        xTaskNotify(menu_task.GetTaskHandle(), 0, eNoAction);
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <_ZN7RTCTask3runEv+0xac>)
 8000d06:	f7ff fceb 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	f005 ff50 	bl	8006bb8 <xTaskGenericNotify>
   }
 8000d18:	e7b6      	b.n	8000c88 <_ZN7RTCTask3runEv+0x8>
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000164 	.word	0x20000164
 8000d24:	20000024 	.word	0x20000024
 8000d28:	20000161 	.word	0x20000161
 8000d2c:	2000016c 	.word	0x2000016c

08000d30 <_ZN7RTCTask16handleTimeConfigEv>:

}

void RTCTask::handleTimeConfig()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    Shared::current_state = RTC_TIME_CFG_STATE;
 8000d38:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <_ZN7RTCTask16handleTimeConfigEv+0xc0>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	701a      	strb	r2, [r3, #0]

    uint8_t hour = getUserInput(Messages::rtcEnterHour_message);
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <_ZN7RTCTask16handleTimeConfigEv+0xc4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f8d7 	bl	8000ef8 <_ZN7RTCTask12getUserInputEPKc>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
    uint8_t min  = getUserInput(Messages::rtcEnterMinute_message);
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <_ZN7RTCTask16handleTimeConfigEv+0xc8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f8cf 	bl	8000ef8 <_ZN7RTCTask12getUserInputEPKc>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73bb      	strb	r3, [r7, #14]
    uint8_t sec  = getUserInput(Messages::rtcEnterSecond_message);
 8000d5e:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <_ZN7RTCTask16handleTimeConfigEv+0xcc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f8c7 	bl	8000ef8 <_ZN7RTCTask12getUserInputEPKc>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	737b      	strb	r3, [r7, #13]

    if (processHour(hour) == VALID && processMin(min) == VALID && processSec(sec) == VALID)
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f939 	bl	8000fea <_ZN7RTCTask11processHourEh>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d111      	bne.n	8000da2 <_ZN7RTCTask16handleTimeConfigEv+0x72>
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	4619      	mov	r1, r3
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f943 	bl	800100e <_ZN7RTCTask10processMinEh>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d109      	bne.n	8000da2 <_ZN7RTCTask16handleTimeConfigEv+0x72>
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f94d 	bl	8001032 <_ZN7RTCTask10processSecEh>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <_ZN7RTCTask16handleTimeConfigEv+0x72>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <_ZN7RTCTask16handleTimeConfigEv+0x74>
 8000da2:	2300      	movs	r3, #0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d019      	beq.n	8000ddc <_ZN7RTCTask16handleTimeConfigEv+0xac>
    {
        Time.Hours   = hour;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	751a      	strb	r2, [r3, #20]
        Time.Minutes = min;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7bba      	ldrb	r2, [r7, #14]
 8000db2:	755a      	strb	r2, [r3, #21]
        Time.Seconds = sec;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7b7a      	ldrb	r2, [r7, #13]
 8000db8:	759a      	strb	r2, [r3, #22]

        HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) ;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3314      	adds	r3, #20
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480f      	ldr	r0, [pc, #60]	@ (8000e00 <_ZN7RTCTask16handleTimeConfigEv+0xd0>)
 8000dc4:	f002 fc1d 	bl	8003602 <HAL_RTC_SetTime>

        Q_print.send(Messages::time_config_success);
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dcc:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <_ZN7RTCTask16handleTimeConfigEv+0xd4>)
 8000dce:	480e      	ldr	r0, [pc, #56]	@ (8000e08 <_ZN7RTCTask16handleTimeConfigEv+0xd8>)
 8000dd0:	f000 f9b6 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>

        printDateTime();
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f97b 	bl	80010d0 <_ZN7RTCTask13printDateTimeEv>
    }
    else
    {
        Q_print.send(Messages::invalid_message);
    }
}
 8000dda:	e005      	b.n	8000de8 <_ZN7RTCTask16handleTimeConfigEv+0xb8>
        Q_print.send(Messages::invalid_message);
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000de0:	490a      	ldr	r1, [pc, #40]	@ (8000e0c <_ZN7RTCTask16handleTimeConfigEv+0xdc>)
 8000de2:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <_ZN7RTCTask16handleTimeConfigEv+0xd8>)
 8000de4:	f000 f9ac 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000161 	.word	0x20000161
 8000df4:	2000000c 	.word	0x2000000c
 8000df8:	20000010 	.word	0x20000010
 8000dfc:	20000014 	.word	0x20000014
 8000e00:	200000f8 	.word	0x200000f8
 8000e04:	2000002c 	.word	0x2000002c
 8000e08:	20000164 	.word	0x20000164
 8000e0c:	20000024 	.word	0x20000024

08000e10 <_ZN7RTCTask16handleDateConfigEv>:

void RTCTask::handleDateConfig()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    Shared::current_state = RTC_DATE_CFG_STATE;
 8000e18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <_ZN7RTCTask16handleDateConfigEv+0xc8>)
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	701a      	strb	r2, [r3, #0]

    uint8_t date  = getUserInput(Messages::rtcEnterDay_message);
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <_ZN7RTCTask16handleDateConfigEv+0xcc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f867 	bl	8000ef8 <_ZN7RTCTask12getUserInputEPKc>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73fb      	strb	r3, [r7, #15]
    uint8_t month = getUserInput(Messages::rtcEnterMonth_message);
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <_ZN7RTCTask16handleDateConfigEv+0xd0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f85f 	bl	8000ef8 <_ZN7RTCTask12getUserInputEPKc>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73bb      	strb	r3, [r7, #14]
    uint8_t year  = getUserInput(Messages::rtcEnterYear_message);
 8000e3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <_ZN7RTCTask16handleDateConfigEv+0xd4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f857 	bl	8000ef8 <_ZN7RTCTask12getUserInputEPKc>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	737b      	strb	r3, [r7, #13]

    if (processDate(date) == VALID && processMonth(month) == VALID && processYear(year) == VALID)
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4619      	mov	r1, r3
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f8ff 	bl	8001056 <_ZN7RTCTask11processDateEh>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d111      	bne.n	8000e82 <_ZN7RTCTask16handleDateConfigEv+0x72>
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	4619      	mov	r1, r3
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f90c 	bl	8001080 <_ZN7RTCTask12processMonthEh>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d109      	bne.n	8000e82 <_ZN7RTCTask16handleDateConfigEv+0x72>
 8000e6e:	7b7b      	ldrb	r3, [r7, #13]
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f919 	bl	80010aa <_ZN7RTCTask11processYearEh>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <_ZN7RTCTask16handleDateConfigEv+0x72>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <_ZN7RTCTask16handleDateConfigEv+0x74>
 8000e82:	2300      	movs	r3, #0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d01c      	beq.n	8000ec2 <_ZN7RTCTask16handleDateConfigEv+0xb2>
    {
        Date.Date  = date;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        Date.Month = month;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7bba      	ldrb	r2, [r7, #14]
 8000e94:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        Date.Year  = year;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7b7a      	ldrb	r2, [r7, #13]
 8000e9c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

        HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3328      	adds	r3, #40	@ 0x28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <_ZN7RTCTask16handleDateConfigEv+0xd8>)
 8000eaa:	f002 fc44 	bl	8003736 <HAL_RTC_SetDate>

        Q_print.send(Messages::date_config_success);
 8000eae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eb2:	490e      	ldr	r1, [pc, #56]	@ (8000eec <_ZN7RTCTask16handleDateConfigEv+0xdc>)
 8000eb4:	480e      	ldr	r0, [pc, #56]	@ (8000ef0 <_ZN7RTCTask16handleDateConfigEv+0xe0>)
 8000eb6:	f000 f943 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>

        printDateTime();
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f908 	bl	80010d0 <_ZN7RTCTask13printDateTimeEv>
    }
    else
    {
        Q_print.send(Messages::invalid_message);
    }
}
 8000ec0:	e005      	b.n	8000ece <_ZN7RTCTask16handleDateConfigEv+0xbe>
        Q_print.send(Messages::invalid_message);
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ec6:	490b      	ldr	r1, [pc, #44]	@ (8000ef4 <_ZN7RTCTask16handleDateConfigEv+0xe4>)
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <_ZN7RTCTask16handleDateConfigEv+0xe0>)
 8000eca:	f000 f939 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000161 	.word	0x20000161
 8000edc:	20000018 	.word	0x20000018
 8000ee0:	2000001c 	.word	0x2000001c
 8000ee4:	20000020 	.word	0x20000020
 8000ee8:	200000f8 	.word	0x200000f8
 8000eec:	20000030 	.word	0x20000030
 8000ef0:	20000164 	.word	0x20000164
 8000ef4:	20000024 	.word	0x20000024

08000ef8 <_ZN7RTCTask12getUserInputEPKc>:

uint8_t RTCTask::getUserInput(const char* message)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
    Q_print.send(message);
 8000f02:	463b      	mov	r3, r7
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <_ZN7RTCTask12getUserInputEPKc+0x48>)
 8000f0c:	f000 f918 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
    uint32_t notif_value;
    xTaskNotifyWait(0, 0, &notif_value, portMAX_DELAY);
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f005 fdca 	bl	8006ab8 <xTaskGenericNotifyWait>
    Cmd_t* local_cmdPtr = reinterpret_cast<Cmd_t*>(notif_value);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	60bb      	str	r3, [r7, #8]
    return GetNumber(local_cmdPtr);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f82d 	bl	8000f8e <_ZN7RTCTask9GetNumberERP5Cmd_t>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000164 	.word	0x20000164

08000f44 <_ZN7RTCTask17processConfigTypeERP5Cmd_t>:




uint8_t RTCTask::processConfigType(Cmd_t*& cmd)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    if(cmd->len == 1)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	7a9b      	ldrb	r3, [r3, #10]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d113      	bne.n	8000f80 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x3c>
    {
        switch(cmd->Payload[0])
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b32      	cmp	r3, #50	@ 0x32
 8000f60:	d00a      	beq.n	8000f78 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x34>
 8000f62:	2b32      	cmp	r3, #50	@ 0x32
 8000f64:	dc0a      	bgt.n	8000f7c <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x38>
 8000f66:	2b30      	cmp	r3, #48	@ 0x30
 8000f68:	d002      	beq.n	8000f70 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x2c>
 8000f6a:	2b31      	cmp	r3, #49	@ 0x31
 8000f6c:	d002      	beq.n	8000f74 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x30>
 8000f6e:	e005      	b.n	8000f7c <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x38>
        {
            case '0' :
                return CONFIG_TIME ;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e006      	b.n	8000f82 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x3e>
                break;
            case '1' :
                return CONFIG_DATE ;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e004      	b.n	8000f82 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x3e>
                break;
            case '2' :
                return EXIT ;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e002      	b.n	8000f82 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x3e>
                break;
            default:
                return NONE ;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	e000      	b.n	8000f82 <_ZN7RTCTask17processConfigTypeERP5Cmd_t+0x3e>
        }
    }
    else
    {
        return NONE ;
 8000f80:	230b      	movs	r3, #11
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_ZN7RTCTask9GetNumberERP5Cmd_t>:

uint8_t RTCTask::GetNumber(Cmd_t*& cmd)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
    if(cmd->len == 2)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7a9b      	ldrb	r3, [r3, #10]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d111      	bne.n	8000fc6 <_ZN7RTCTask9GetNumberERP5Cmd_t+0x38>
    {
        return (((cmd->Payload[0] - '0')*10) + (cmd->Payload[1] - '0'));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	3b30      	subs	r3, #48	@ 0x30
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3b30      	subs	r3, #48	@ 0x30
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	e00b      	b.n	8000fde <_ZN7RTCTask9GetNumberERP5Cmd_t+0x50>
    }
    else if(cmd->len == 1)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	7a9b      	ldrb	r3, [r3, #10]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <_ZN7RTCTask9GetNumberERP5Cmd_t+0x4e>
    {
        return (cmd->Payload[0] - '0');
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3b30      	subs	r3, #48	@ 0x30
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	e000      	b.n	8000fde <_ZN7RTCTask9GetNumberERP5Cmd_t+0x50>
    }

    return NONE ;
 8000fdc:	230b      	movs	r3, #11
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_ZN7RTCTask11processHourEh>:


CheckValid_En RTCTask::processHour(uint8_t hour)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	70fb      	strb	r3, [r7, #3]
    if (hour >= 0 && hour <= 23)
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b17      	cmp	r3, #23
 8000ffa:	d801      	bhi.n	8001000 <_ZN7RTCTask11processHourEh+0x16>
    {
        return VALID;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e000      	b.n	8001002 <_ZN7RTCTask11processHourEh+0x18>
    }
    return INVALID;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_ZN7RTCTask10processMinEh>:

CheckValid_En RTCTask::processMin(uint8_t min)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	70fb      	strb	r3, [r7, #3]
    if (min >= 0 && min <= 59)
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	2b3b      	cmp	r3, #59	@ 0x3b
 800101e:	d801      	bhi.n	8001024 <_ZN7RTCTask10processMinEh+0x16>
    {
        return VALID;
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <_ZN7RTCTask10processMinEh+0x18>
    }
    return INVALID;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_ZN7RTCTask10processSecEh>:

CheckValid_En RTCTask::processSec(uint8_t sec)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
    if (sec >= 0 && sec <= 59)
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	2b3b      	cmp	r3, #59	@ 0x3b
 8001042:	d801      	bhi.n	8001048 <_ZN7RTCTask10processSecEh+0x16>
    {
        return VALID;
 8001044:	2300      	movs	r3, #0
 8001046:	e000      	b.n	800104a <_ZN7RTCTask10processSecEh+0x18>
    }
    return INVALID;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_ZN7RTCTask11processDateEh>:


CheckValid_En RTCTask::processDate(uint8_t date)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	70fb      	strb	r3, [r7, #3]
    if (date >= 1 && date <= 31)
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <_ZN7RTCTask11processDateEh+0x1c>
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b1f      	cmp	r3, #31
 800106c:	d801      	bhi.n	8001072 <_ZN7RTCTask11processDateEh+0x1c>
    {
        return VALID;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <_ZN7RTCTask11processDateEh+0x1e>
    }
    else
    {
        return INVALID;
 8001072:	2301      	movs	r3, #1
    }
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_ZN7RTCTask12processMonthEh>:

CheckValid_En RTCTask::processMonth(uint8_t month)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
    if (month >= 1 && month <= 12)
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <_ZN7RTCTask12processMonthEh+0x1c>
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b0c      	cmp	r3, #12
 8001096:	d801      	bhi.n	800109c <_ZN7RTCTask12processMonthEh+0x1c>
    {
        return VALID;
 8001098:	2300      	movs	r3, #0
 800109a:	e000      	b.n	800109e <_ZN7RTCTask12processMonthEh+0x1e>
    }
    else
    {
        return INVALID;
 800109c:	2301      	movs	r3, #1
    }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN7RTCTask11processYearEh>:

CheckValid_En RTCTask::processYear(uint8_t year)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
    if (year <= 99)  // Assuming two-digit year (e.g., 24 for 2024)
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b63      	cmp	r3, #99	@ 0x63
 80010ba:	d801      	bhi.n	80010c0 <_ZN7RTCTask11processYearEh+0x16>
    {
        return VALID;
 80010bc:	2300      	movs	r3, #0
 80010be:	e000      	b.n	80010c2 <_ZN7RTCTask11processYearEh+0x18>
    }
    else
    {
        return INVALID;
 80010c0:	2301      	movs	r3, #1
    }
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_ZN7RTCTask13printDateTimeEv>:



void RTCTask::printDateTime()
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af06      	add	r7, sp, #24
 80010d6:	6078      	str	r0, [r7, #4]
    static char buffer[50];

    snprintf(buffer, sizeof(buffer),
             "Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d",
             Time.Hours, Time.Minutes, Time.Seconds,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7d1b      	ldrb	r3, [r3, #20]
    snprintf(buffer, sizeof(buffer),
 80010dc:	461d      	mov	r5, r3
             Time.Hours, Time.Minutes, Time.Seconds,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7d5b      	ldrb	r3, [r3, #21]
    snprintf(buffer, sizeof(buffer),
 80010e2:	461a      	mov	r2, r3
             Time.Hours, Time.Minutes, Time.Seconds,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7d9b      	ldrb	r3, [r3, #22]
    snprintf(buffer, sizeof(buffer),
 80010e8:	4619      	mov	r1, r3
             Date.Date, Date.Month, Date.Year);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    snprintf(buffer, sizeof(buffer),
 80010f0:	4618      	mov	r0, r3
             Date.Date, Date.Month, Date.Year);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    snprintf(buffer, sizeof(buffer),
 80010f8:	461c      	mov	r4, r3
             Date.Date, Date.Month, Date.Year);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    snprintf(buffer, sizeof(buffer),
 8001100:	9304      	str	r3, [sp, #16]
 8001102:	9403      	str	r4, [sp, #12]
 8001104:	9002      	str	r0, [sp, #8]
 8001106:	9101      	str	r1, [sp, #4]
 8001108:	9200      	str	r2, [sp, #0]
 800110a:	462b      	mov	r3, r5
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <_ZN7RTCTask13printDateTimeEv+0x64>)
 800110e:	2132      	movs	r1, #50	@ 0x32
 8001110:	4809      	ldr	r0, [pc, #36]	@ (8001138 <_ZN7RTCTask13printDateTimeEv+0x68>)
 8001112:	f006 ffd9 	bl	80080c8 <sniprintf>

    const char* temp = buffer;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <_ZN7RTCTask13printDateTimeEv+0x68>)
 8001118:	60fb      	str	r3, [r7, #12]
    Q_print.send(temp);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <_ZN7RTCTask13printDateTimeEv+0x6c>)
 8001126:	f000 f80b 	bl	8001140 <_ZN5QueueIPKcE4sendERS1_m>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bdb0      	pop	{r4, r5, r7, pc}
 8001132:	bf00      	nop
 8001134:	08008aa0 	.word	0x08008aa0
 8001138:	200000c4 	.word	0x200000c4
 800113c:	20000164 	.word	0x20000164

08001140 <_ZN5QueueIPKcE4sendERS1_m>:
            Error_Handler();
        }
    }

    // Send data to the queue
    bool send(T& item, TickType_t waitTime = portMAX_DELAY)
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
    {
        return xQueueSend(queueHandle, &item, waitTime) == pdPASS;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	f004 f89f 	bl	8005298 <xQueueGenericSend>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	bf0c      	ite	eq
 8001160:	2301      	moveq	r3, #1
 8001162:	2300      	movne	r3, #0
 8001164:	b2db      	uxtb	r3, r3
    }
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_ZN5QueueIPKcE7receiveERS1_m>:
    {
        return xQueueSendFromISR(queueHandle, (void*)&item, pxHigherPriorityTaskWoken) == pdPASS;
    }

    // Receive data from the queue
    bool receive(T& item, TickType_t waitTime = portMAX_DELAY)
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
    {
        return xQueueReceive(queueHandle, static_cast<void*>(&item), waitTime) == pdTRUE;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fa40 	bl	8005608 <xQueueReceive>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
    }
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN5QueueIcE12getQueueSizeEv>:
    bool receiveFromISR(T& item, BaseType_t* pxHigherPriorityTaskWoken = NULL)
    {
        return xQueueReceiveFromISR(queueHandle, static_cast<void*>(&item), pxHigherPriorityTaskWoken) == pdTRUE;
    }

    UBaseType_t getQueueSize()
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    {
        return uxQueueMessagesWaiting(queueHandle);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fb0f 	bl	80057cc <uxQueueMessagesWaiting>
 80011ae:	4603      	mov	r3, r0
    }
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_ZN5QueueIcE7receiveERcm>:
    bool receive(T& item, TickType_t waitTime = portMAX_DELAY)
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
        return xQueueReceive(queueHandle, static_cast<void*>(&item), waitTime) == pdTRUE;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f004 fa1b 	bl	8005608 <xQueueReceive>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
    }
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <_Z41__static_initialization_and_destruction_0v>:
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af02      	add	r7, sp, #8
};
 80011ee:	4c19      	ldr	r4, [pc, #100]	@ (8001254 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <_Z41__static_initialization_and_destruction_0v+0x70>)
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011fe:	4917      	ldr	r1, [pc, #92]	@ (800125c <_Z41__static_initialization_and_destruction_0v+0x74>)
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff fa03 	bl	800060c <_ZN13FreeRTOSTimerC1EPKcmmPvPFvP15tmrTimerControlE>
 8001206:	3404      	adds	r4, #4
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <_Z41__static_initialization_and_destruction_0v+0x70>)
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2302      	movs	r3, #2
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001216:	4911      	ldr	r1, [pc, #68]	@ (800125c <_Z41__static_initialization_and_destruction_0v+0x74>)
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff f9f7 	bl	800060c <_ZN13FreeRTOSTimerC1EPKcmmPvPFvP15tmrTimerControlE>
 800121e:	3404      	adds	r4, #4
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	2303      	movs	r3, #3
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800122e:	490b      	ldr	r1, [pc, #44]	@ (800125c <_Z41__static_initialization_and_destruction_0v+0x74>)
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff f9eb 	bl	800060c <_ZN13FreeRTOSTimerC1EPKcmmPvPFvP15tmrTimerControlE>
 8001236:	1d20      	adds	r0, r4, #4
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <_Z41__static_initialization_and_destruction_0v+0x70>)
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	2304      	movs	r3, #4
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001246:	4905      	ldr	r1, [pc, #20]	@ (800125c <_Z41__static_initialization_and_destruction_0v+0x74>)
 8001248:	f7ff f9e0 	bl	800060c <_ZN13FreeRTOSTimerC1EPKcmmPvPFvP15tmrTimerControlE>
}
 800124c:	bf00      	nop
 800124e:	3704      	adds	r7, #4
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	200000b0 	.word	0x200000b0
 8001258:	080006f9 	.word	0x080006f9
 800125c:	08008ad0 	.word	0x08008ad0

08001260 <_GLOBAL__sub_I__Z12callBackFuncP15tmrTimerControl>:
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
 8001264:	f7ff ffc0 	bl	80011e8 <_Z41__static_initialization_and_destruction_0v>
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <_ZN8BaseTask5startEv>:
    void start()
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af02      	add	r7, sp, #8
 8001272:	6078      	str	r0, [r7, #4]
        if (TaskHandle == nullptr)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10e      	bne.n	800129a <_ZN8BaseTask5startEv+0x2e>
            xTaskCreate(BaseTask::TaskEntry, _taskName, _stackSize, this, _priority, &TaskHandle);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	8918      	ldrh	r0, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	3210      	adds	r2, #16
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4602      	mov	r2, r0
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <_ZN8BaseTask5startEv+0x38>)
 8001296:	f004 fc73 	bl	8005b80 <xTaskCreate>
    }
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	080012a9 	.word	0x080012a9

080012a8 <_ZN8BaseTask9TaskEntryEPv>:
    static void TaskEntry(void* pvParams)
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
        BaseTask* task = static_cast<BaseTask*>(pvParams);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	60fb      	str	r3, [r7, #12]
        task->run(); // Calls the run method of the derived class
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	4798      	blx	r3
    }
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f000 fc54 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f82c 	bl	800132c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 f8fe 	bl	80014d4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80012d8:	f000 f8ce 	bl	8001478 <_ZL19MX_USART2_UART_Initv>
  MX_RTC_Init();
 80012dc:	f000 f8a2 	bl	8001424 <_ZL11MX_RTC_Initv>
  // Start the tasks
  ledon_task->start();
  ledoff_task->start();
*/

  menu_task.start();
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <main+0x48>)
 80012e2:	f7ff ffc3 	bl	800126c <_ZN8BaseTask5startEv>
  print_task.start();
 80012e6:	480b      	ldr	r0, [pc, #44]	@ (8001314 <main+0x4c>)
 80012e8:	f7ff ffc0 	bl	800126c <_ZN8BaseTask5startEv>
  cmd_handle_task.start();
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <main+0x50>)
 80012ee:	f7ff ffbd 	bl	800126c <_ZN8BaseTask5startEv>
  led_task.start();
 80012f2:	480a      	ldr	r0, [pc, #40]	@ (800131c <main+0x54>)
 80012f4:	f7ff ffba 	bl	800126c <_ZN8BaseTask5startEv>
  rtc_task.start();
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <main+0x58>)
 80012fa:	f7ff ffb7 	bl	800126c <_ZN8BaseTask5startEv>

  HAL_UART_Receive_IT(&huart2 , (uint8_t*)&user_data , 1);
 80012fe:	2201      	movs	r2, #1
 8001300:	4908      	ldr	r1, [pc, #32]	@ (8001324 <main+0x5c>)
 8001302:	4809      	ldr	r0, [pc, #36]	@ (8001328 <main+0x60>)
 8001304:	f002 feb9 	bl	800407a <HAL_UART_Receive_IT>
  
  vTaskStartScheduler();
 8001308:	f004 fda6 	bl	8005e58 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <main+0x44>
 8001310:	2000016c 	.word	0x2000016c
 8001314:	20000180 	.word	0x20000180
 8001318:	20000194 	.word	0x20000194
 800131c:	200001a8 	.word	0x200001a8
 8001320:	200001bc 	.word	0x200001bc
 8001324:	20000160 	.word	0x20000160
 8001328:	20000118 	.word	0x20000118

0800132c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	@ 0x50
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2234      	movs	r2, #52	@ 0x34
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f006 fefa 	bl	8008134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	4b31      	ldr	r3, [pc, #196]	@ (800141c <_Z18SystemClock_Configv+0xf0>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	4a30      	ldr	r2, [pc, #192]	@ (800141c <_Z18SystemClock_Configv+0xf0>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001360:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <_Z18SystemClock_Configv+0xf0>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <_Z18SystemClock_Configv+0xf4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001378:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <_Z18SystemClock_Configv+0xf4>)
 800137a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <_Z18SystemClock_Configv+0xf4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800138c:	230a      	movs	r3, #10
 800138e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001398:	2310      	movs	r3, #16
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013a8:	2310      	movs	r3, #16
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b2:	2304      	movs	r3, #4
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fdfc 	bl	8002fc0 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80013d8:	f000 f966 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	2102      	movs	r1, #2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 ff3b 	bl	8002274 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf14      	ite	ne
 8001404:	2301      	movne	r3, #1
 8001406:	2300      	moveq	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 800140e:	f000 f94b 	bl	80016a8 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	@ 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <_ZL11MX_RTC_Initv+0x50>)
 800142c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 8001436:	227f      	movs	r2, #127	@ 0x7f
 8001438:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 800143c:	22ff      	movs	r2, #255	@ 0xff
 800143e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001452:	4807      	ldr	r0, [pc, #28]	@ (8001470 <_ZL11MX_RTC_Initv+0x4c>)
 8001454:	f002 f852 	bl	80034fc <HAL_RTC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <_ZL11MX_RTC_Initv+0x48>
  {
    Error_Handler();
 8001468:	f000 f91e 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200000f8 	.word	0x200000f8
 8001474:	40002800 	.word	0x40002800

08001478 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800147e:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001482:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014b0:	f002 fd08 	bl	8003ec4 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf14      	ite	ne
 80014ba:	2301      	movne	r3, #1
 80014bc:	2300      	moveq	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80014c4:	f000 f8f0 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000118 	.word	0x20000118
 80014d0:	40004400 	.word	0x40004400

080014d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b39      	ldr	r3, [pc, #228]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a38      	ldr	r2, [pc, #224]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b36      	ldr	r3, [pc, #216]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b32      	ldr	r3, [pc, #200]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a31      	ldr	r2, [pc, #196]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a2a      	ldr	r2, [pc, #168]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <_ZL12MX_GPIO_Initv+0x100>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001560:	481d      	ldr	r0, [pc, #116]	@ (80015d8 <_ZL12MX_GPIO_Initv+0x104>)
 8001562:	f000 fe53 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800156c:	481b      	ldr	r0, [pc, #108]	@ (80015dc <_ZL12MX_GPIO_Initv+0x108>)
 800156e:	f000 fe4d 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001572:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001578:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4814      	ldr	r0, [pc, #80]	@ (80015dc <_ZL12MX_GPIO_Initv+0x108>)
 800158a:	f000 fcab 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 800158e:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <_ZL12MX_GPIO_Initv+0x104>)
 80015a8:	f000 fc9c 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80015ac:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <_ZL12MX_GPIO_Initv+0x108>)
 80015c6:	f000 fc8d 	bl	8001ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020800 	.word	0x40020800

080015e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	6078      	str	r0, [r7, #4]
  BaseType_t local_return;
  char local_user_data = user_data;
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <HAL_UART_RxCpltCallback+0x94>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	72fb      	strb	r3, [r7, #11]
  if(!Q_data.isFullFromISR())
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <HAL_UART_RxCpltCallback+0x98>)
 80015f2:	f000 f85f 	bl	80016b4 <_ZN5QueueIcE13isFullFromISREv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f083 0301 	eor.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_UART_RxCpltCallback+0x32>
  {
    Q_data.sendFromISR(local_user_data);
 8001602:	f107 030b 	add.w	r3, r7, #11
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	481b      	ldr	r0, [pc, #108]	@ (8001678 <HAL_UART_RxCpltCallback+0x98>)
 800160c:	f000 f865 	bl	80016da <_ZN5QueueIcE11sendFromISRERcPl>
 8001610:	e010      	b.n	8001634 <HAL_UART_RxCpltCallback+0x54>
  }
  else
  {
    if(user_data == '\n')
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_UART_RxCpltCallback+0x94>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b0a      	cmp	r3, #10
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_UART_RxCpltCallback+0x54>
    {
      //char local_temp ;
      //Q_data.receiveFromISR(local_temp);
      //Q_data.sendFromISR(local_temp);
      Q_data.overwriteFromISR(local_user_data);
 8001626:	f107 030b 	add.w	r3, r7, #11
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4812      	ldr	r0, [pc, #72]	@ (8001678 <HAL_UART_RxCpltCallback+0x98>)
 8001630:	f000 f86a 	bl	8001708 <_ZN5QueueIcE16overwriteFromISRERcPl>

    }
  }
  if(user_data == '\n')
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <HAL_UART_RxCpltCallback+0x94>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b0a      	cmp	r3, #10
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00c      	beq.n	8001662 <HAL_UART_RxCpltCallback+0x82>
  {
	  local_return = xTaskNotifyFromISR(cmd_handle_task.GetTaskHandle(), 7 , eSetValueWithOverwrite, NULL);
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <HAL_UART_RxCpltCallback+0x9c>)
 800164a:	f7ff f849 	bl	80006e0 <_ZN8BaseTask13GetTaskHandleEv>
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2300      	movs	r3, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2303      	movs	r3, #3
 8001658:	2207      	movs	r2, #7
 800165a:	2100      	movs	r1, #0
 800165c:	f005 fbd2 	bl	8006e04 <xTaskGenericNotifyFromISR>
 8001660:	60f8      	str	r0, [r7, #12]
  }

  HAL_UART_Receive_IT(&huart2 , (uint8_t*)&user_data , 1);
 8001662:	2201      	movs	r2, #1
 8001664:	4903      	ldr	r1, [pc, #12]	@ (8001674 <HAL_UART_RxCpltCallback+0x94>)
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <HAL_UART_RxCpltCallback+0xa0>)
 8001668:	f002 fd07 	bl	800407a <HAL_UART_Receive_IT>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000160 	.word	0x20000160
 8001678:	20000168 	.word	0x20000168
 800167c:	20000194 	.word	0x20000194
 8001680:	20000118 	.word	0x20000118

08001684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a04      	ldr	r2, [pc, #16]	@ (80016a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001696:	f000 fa91 	bl	8001bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40001000 	.word	0x40001000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x8>

080016b4 <_ZN5QueueIcE13isFullFromISREv>:
    {
        return uxQueueSpacesAvailable(queueHandle) == 0;
    }

    // Check if queue is full from ISR
    bool isFullFromISR()
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    {
        return xQueueIsQueueFullFromISR(queueHandle) == pdTRUE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 f9b2 	bl	8005a2a <xQueueIsQueueFullFromISR>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
    }
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_ZN5QueueIcE11sendFromISRERcPl>:
    bool sendFromISR(T& item, BaseType_t* pxHigherPriorityTaskWoken = NULL)
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
        return xQueueSendFromISR(queueHandle, (void*)&item, pxHigherPriorityTaskWoken) == pdPASS;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	f003 fed4 	bl	800549c <xQueueGenericSendFromISR>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	bf0c      	ite	eq
 80016fa:	2301      	moveq	r3, #1
 80016fc:	2300      	movne	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
    }
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN5QueueIcE16overwriteFromISRERcPl>:
    bool overwriteFromISR(T& item, BaseType_t* pxHigherPriorityTaskWoken = NULL)
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
    	return xQueueOverwriteFromISR(queueHandle, static_cast<const void*>(&item), pxHigherPriorityTaskWoken) == pdPASS;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	2302      	movs	r3, #2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	f003 febd 	bl	800549c <xQueueGenericSendFromISR>
 8001722:	4603      	mov	r3, r0
 8001724:	2b01      	cmp	r3, #1
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
    }
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_ZN5QueueIPKcEC1Ej>:
    Queue(size_t queueSize)
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
        queueHandle = xQueueCreate(queueSize, sizeof(T));
 8001740:	2200      	movs	r2, #0
 8001742:	2104      	movs	r1, #4
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f003 fd35 	bl	80051b4 <xQueueGenericCreate>
 800174a:	4602      	mov	r2, r0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	601a      	str	r2, [r3, #0]
        if (queueHandle == nullptr)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <_ZN5QueueIPKcEC1Ej+0x26>
            Error_Handler();
 8001758:	f7ff ffa6 	bl	80016a8 <Error_Handler>
    }
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZN5QueueIcEC1Ej>:
    Queue(size_t queueSize)
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
        queueHandle = xQueueCreate(queueSize, sizeof(T));
 8001770:	2200      	movs	r2, #0
 8001772:	2101      	movs	r1, #1
 8001774:	6838      	ldr	r0, [r7, #0]
 8001776:	f003 fd1d 	bl	80051b4 <xQueueGenericCreate>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
        if (queueHandle == nullptr)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <_ZN5QueueIcEC1Ej+0x26>
            Error_Handler();
 8001788:	f7ff ff8e 	bl	80016a8 <Error_Handler>
    }
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <_Z41__static_initialization_and_destruction_0v>:
// Define the task objects
MenuTask menu_task;              // Task object for MenuTask
PrintTask print_task;            // Task object for PrintTask
CmdHandleTask cmd_handle_task;   // Task object for CmdHandleTask
LedTask led_task;                // Task object for LedTask
RTCTask rtc_task;
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
Queue<const char*> Q_print(10);  // Queue with a size of 10 for printing messages
 800179c:	210a      	movs	r1, #10
 800179e:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <_Z41__static_initialization_and_destruction_0v+0x38>)
 80017a0:	f7ff ffc9 	bl	8001736 <_ZN5QueueIPKcEC1Ej>
Queue<char> Q_data(10);          // Queue with a size of 10 for data
 80017a4:	210a      	movs	r1, #10
 80017a6:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80017a8:	f7ff ffdd 	bl	8001766 <_ZN5QueueIcEC1Ej>
MenuTask menu_task;              // Task object for MenuTask
 80017ac:	480a      	ldr	r0, [pc, #40]	@ (80017d8 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80017ae:	f7fe ffb7 	bl	8000720 <_ZN8MenuTaskC1Ev>
PrintTask print_task;            // Task object for PrintTask
 80017b2:	480a      	ldr	r0, [pc, #40]	@ (80017dc <_Z41__static_initialization_and_destruction_0v+0x44>)
 80017b4:	f7ff f832 	bl	800081c <_ZN9PrintTaskC1Ev>
CmdHandleTask cmd_handle_task;   // Task object for CmdHandleTask
 80017b8:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <_Z41__static_initialization_and_destruction_0v+0x48>)
 80017ba:	f7ff f865 	bl	8000888 <_ZN13CmdHandleTaskC1Ev>
LedTask led_task;                // Task object for LedTask
 80017be:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 80017c0:	f7ff f906 	bl	80009d0 <_ZN7LedTaskC1Ev>
RTCTask rtc_task;
 80017c4:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <_Z41__static_initialization_and_destruction_0v+0x50>)
 80017c6:	f7ff fa45 	bl	8000c54 <_ZN7RTCTaskC1Ev>
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000164 	.word	0x20000164
 80017d4:	20000168 	.word	0x20000168
 80017d8:	2000016c 	.word	0x2000016c
 80017dc:	20000180 	.word	0x20000180
 80017e0:	20000194 	.word	0x20000194
 80017e4:	200001a8 	.word	0x200001a8
 80017e8:	200001bc 	.word	0x200001bc

080017ec <_GLOBAL__sub_I__ZN8Messages12menu_messageE>:
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	f7ff ffd2 	bl	8001798 <_Z41__static_initialization_and_destruction_0v>
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <HAL_MspInit+0x4c>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <HAL_MspInit+0x4c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b09a      	sub	sp, #104	@ 0x68
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	225c      	movs	r2, #92	@ 0x5c
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f006 fc6b 	bl	8008134 <memset>
  if(hrtc->Instance==RTC)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <HAL_RTC_MspInit+0x4c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d111      	bne.n	800188c <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001868:	2320      	movs	r3, #32
 800186a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800186c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001870:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fe48 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001882:	f7ff ff11 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <HAL_RTC_MspInit+0x50>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800188c:	bf00      	nop
 800188e:	3768      	adds	r7, #104	@ 0x68
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40002800 	.word	0x40002800
 8001898:	42470e3c 	.word	0x42470e3c

0800189c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001930 <HAL_UART_MspInit+0x94>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d133      	bne.n	8001926 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_UART_MspInit+0x98>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <HAL_UART_MspInit+0x98>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_UART_MspInit+0x98>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_UART_MspInit+0x98>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <HAL_UART_MspInit+0x98>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_UART_MspInit+0x98>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f6:	230c      	movs	r3, #12
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4809      	ldr	r0, [pc, #36]	@ (8001938 <HAL_UART_MspInit+0x9c>)
 8001912:	f000 fae7 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2106      	movs	r1, #6
 800191a:	2026      	movs	r0, #38	@ 0x26
 800191c:	f000 fa26 	bl	8001d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001920:	2026      	movs	r0, #38	@ 0x26
 8001922:	f000 fa3f 	bl	8001da4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40004400 	.word	0x40004400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	@ 0x38
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <HAL_InitTick+0xe4>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	4a32      	ldr	r2, [pc, #200]	@ (8001a20 <HAL_InitTick+0xe4>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	6413      	str	r3, [r2, #64]	@ 0x40
 800195c:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <HAL_InitTick+0xe4>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001968:	f107 0210 	add.w	r2, r7, #16
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fd98 	bl	80024a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800197c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001982:	f000 fd69 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8001986:	6378      	str	r0, [r7, #52]	@ 0x34
 8001988:	e004      	b.n	8001994 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800198a:	f000 fd65 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 800198e:	4603      	mov	r3, r0
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001996:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <HAL_InitTick+0xe8>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	0c9b      	lsrs	r3, r3, #18
 800199e:	3b01      	subs	r3, #1
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019a2:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <HAL_InitTick+0xec>)
 80019a4:	4a21      	ldr	r2, [pc, #132]	@ (8001a2c <HAL_InitTick+0xf0>)
 80019a6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <HAL_InitTick+0xec>)
 80019aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a28 <HAL_InitTick+0xec>)
 80019b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <HAL_InitTick+0xec>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_InitTick+0xec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_InitTick+0xec>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019c8:	4817      	ldr	r0, [pc, #92]	@ (8001a28 <HAL_InitTick+0xec>)
 80019ca:	f001 ffd9 	bl	8003980 <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11b      	bne.n	8001a14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019dc:	4812      	ldr	r0, [pc, #72]	@ (8001a28 <HAL_InitTick+0xec>)
 80019de:	f002 f829 	bl	8003a34 <HAL_TIM_Base_Start_IT>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019f0:	2036      	movs	r0, #54	@ 0x36
 80019f2:	f000 f9d7 	bl	8001da4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d808      	bhi.n	8001a0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	2036      	movs	r0, #54	@ 0x36
 8001a02:	f000 f9b3 	bl	8001d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_InitTick+0xf4>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e002      	b.n	8001a14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3738      	adds	r7, #56	@ 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	200001e8 	.word	0x200001e8
 8001a2c:	40001000 	.word	0x40001000
 8001a30:	20000038 	.word	0x20000038

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <USART2_IRQHandler+0x10>)
 8001a72:	f002 fb27 	bl	80040c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000118 	.word	0x20000118

08001a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <TIM6_DAC_IRQHandler+0x10>)
 8001a86:	f002 f845 	bl	8003b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200001e8 	.word	0x200001e8

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f006 fb3e 	bl	8008144 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20020000 	.word	0x20020000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	20000230 	.word	0x20000230
 8001afc:	20013128 	.word	0x20013128

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f006 fafd 	bl	8008150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff fbb7 	bl	80012c8 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001b68:	080091d0 	.word	0x080091d0
  ldr r2, =_sbss
 8001b6c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001b70:	20013124 	.word	0x20013124

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f8d8 	bl	8001d56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f7ff fec8 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fe24 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000003c 	.word	0x2000003c
 8001be0:	20000234 	.word	0x20000234

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000234 	.word	0x20000234

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4907      	ldr	r1, [pc, #28]	@ (8001c98 <__NVIC_EnableIRQ+0x38>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ff4c 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7e:	f7ff ff61 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001d82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	6978      	ldr	r0, [r7, #20]
 8001d8a:	f7ff ffb1 	bl	8001cf0 <NVIC_EncodePriority>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff80 	bl	8001c9c <__NVIC_SetPriority>
}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff54 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dce:	f7ff ff09 	bl	8001be4 <HAL_GetTick>
 8001dd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2280      	movs	r2, #128	@ 0x80
 8001de4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e052      	b.n	8001e98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0216 	bic.w	r2, r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <HAL_DMA_Abort+0x62>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0208 	bic.w	r2, r2, #8
 8001e30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e42:	e013      	b.n	8001e6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e44:	f7ff fece 	bl	8001be4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d90c      	bls.n	8001e6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e015      	b.n	8001e98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e4      	bne.n	8001e44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7e:	223f      	movs	r2, #63	@ 0x3f
 8001e80:	409a      	lsls	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d004      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2280      	movs	r2, #128	@ 0x80
 8001eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00c      	b.n	8001ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e165      	b.n	80021cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 8154 	bne.w	80021c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d130      	bne.n	8001f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d017      	beq.n	8001fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d123      	bne.n	8002028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80ae 	beq.w	80021c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b5d      	ldr	r3, [pc, #372]	@ (80021e4 <HAL_GPIO_Init+0x300>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	4a5c      	ldr	r2, [pc, #368]	@ (80021e4 <HAL_GPIO_Init+0x300>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002078:	6453      	str	r3, [r2, #68]	@ 0x44
 800207a:	4b5a      	ldr	r3, [pc, #360]	@ (80021e4 <HAL_GPIO_Init+0x300>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002086:	4a58      	ldr	r2, [pc, #352]	@ (80021e8 <HAL_GPIO_Init+0x304>)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	@ (80021ec <HAL_GPIO_Init+0x308>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	@ (80021f0 <HAL_GPIO_Init+0x30c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	@ (80021f4 <HAL_GPIO_Init+0x310>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	@ (80021f8 <HAL_GPIO_Init+0x314>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <HAL_GPIO_Init+0x318>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x20a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002200 <HAL_GPIO_Init+0x31c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x206>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a49      	ldr	r2, [pc, #292]	@ (8002204 <HAL_GPIO_Init+0x320>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x202>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002110:	4935      	ldr	r1, [pc, #212]	@ (80021e8 <HAL_GPIO_Init+0x304>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <HAL_GPIO_Init+0x324>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a31      	ldr	r2, [pc, #196]	@ (8002208 <HAL_GPIO_Init+0x324>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b2f      	ldr	r3, [pc, #188]	@ (8002208 <HAL_GPIO_Init+0x324>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a26      	ldr	r2, [pc, #152]	@ (8002208 <HAL_GPIO_Init+0x324>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_GPIO_Init+0x324>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002196:	4a1c      	ldr	r2, [pc, #112]	@ (8002208 <HAL_GPIO_Init+0x324>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_GPIO_Init+0x324>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_GPIO_Init+0x324>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f ae96 	bls.w	8001f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3724      	adds	r7, #36	@ 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40021400 	.word	0x40021400
 8002204:	40021800 	.word	0x40021800
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43d9      	mvns	r1, r3
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	400b      	ands	r3, r1
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cc      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b68      	ldr	r3, [pc, #416]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d90c      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b65      	ldr	r3, [pc, #404]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a58      	ldr	r2, [pc, #352]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e067      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b37      	ldr	r3, [pc, #220]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4934      	ldr	r1, [pc, #208]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7ff fc3e 	bl	8001be4 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7ff fc3a 	bl	8001be4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2b      	ldr	r3, [pc, #172]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d20c      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 fbb1 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	@ (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fa8e 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
 8002434:	08009168 	.word	0x08009168
 8002438:	20000034 	.word	0x20000034
 800243c:	20000038 	.word	0x20000038

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000034 	.word	0x20000034

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08009178 	.word	0x08009178

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffdc 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	@ (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08009178 	.word	0x08009178

080024a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	220f      	movs	r2, #15
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024dc:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <HAL_RCC_GetClockConfig+0x60>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 020f 	and.w	r2, r3, #15
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40023c00 	.word	0x40023c00

0800250c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	@ 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002544:	4b6f      	ldr	r3, [pc, #444]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800254a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002552:	496c      	ldr	r1, [pc, #432]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002562:	2301      	movs	r3, #1
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002572:	4b64      	ldr	r3, [pc, #400]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002578:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002580:	4960      	ldr	r1, [pc, #384]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a0:	4b58      	ldr	r3, [pc, #352]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4955      	ldr	r1, [pc, #340]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025be:	d101      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80025c0:	2301      	movs	r3, #1
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d017      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025dc:	4b49      	ldr	r3, [pc, #292]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ea:	4946      	ldr	r1, [pc, #280]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025fa:	d101      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80025fc:	2301      	movs	r3, #1
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002608:	2301      	movs	r3, #1
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 808a 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b39      	ldr	r3, [pc, #228]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a38      	ldr	r2, [pc, #224]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b36      	ldr	r3, [pc, #216]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002636:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a33      	ldr	r2, [pc, #204]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002642:	f7ff facf 	bl	8001be4 <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7ff facb 	bl	8001be4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e278      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002668:	4b26      	ldr	r3, [pc, #152]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002670:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02f      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	429a      	cmp	r2, r3
 8002684:	d028      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002686:	4b1f      	ldr	r3, [pc, #124]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800268e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002690:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002696:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800269c:	4a19      	ldr	r2, [pc, #100]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026a2:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d114      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff fa99 	bl	8001be4 <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff fa95 	bl	8001be4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e240      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ee      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026e4:	d114      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80026f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026fa:	4902      	ldr	r1, [pc, #8]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
 8002700:	e00c      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000
 800270c:	42470e40 	.word	0x42470e40
 8002710:	4b4a      	ldr	r3, [pc, #296]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a49      	ldr	r2, [pc, #292]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002716:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800271e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	4944      	ldr	r1, [pc, #272]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800272a:	4313      	orrs	r3, r2
 800272c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002740:	4b3f      	ldr	r3, [pc, #252]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002742:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002750:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002756:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275e:	4937      	ldr	r1, [pc, #220]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002772:	4b32      	ldr	r3, [pc, #200]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002778:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	492e      	ldr	r1, [pc, #184]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002794:	4b29      	ldr	r3, [pc, #164]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a2:	4926      	ldr	r1, [pc, #152]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027b2:	d101      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	491a      	ldr	r1, [pc, #104]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d011      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f4:	4911      	ldr	r1, [pc, #68]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002806:	2301      	movs	r3, #1
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800280a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d005      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002818:	f040 80ff 	bne.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002822:	f7ff f9df 	bl	8001be4 <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002828:	e00e      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800282a:	f7ff f9db 	bl	8001be4 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d907      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e188      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800283c:	40023800 	.word	0x40023800
 8002840:	424711e0 	.word	0x424711e0
 8002844:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002848:	4b7e      	ldr	r3, [pc, #504]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ea      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002870:	2b00      	cmp	r3, #0
 8002872:	d028      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d124      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800287c:	4b71      	ldr	r3, [pc, #452]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800287e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002882:	0c1b      	lsrs	r3, r3, #16
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	3301      	adds	r3, #1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800288e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002894:	0e1b      	lsrs	r3, r3, #24
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	019b      	lsls	r3, r3, #6
 80028a6:	431a      	orrs	r2, r3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	431a      	orrs	r2, r3
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	071b      	lsls	r3, r3, #28
 80028be:	4961      	ldr	r1, [pc, #388]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d035      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028f0:	d130      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028f2:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	3301      	adds	r3, #1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002904:	4b4f      	ldr	r3, [pc, #316]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290a:	0f1b      	lsrs	r3, r3, #28
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	019b      	lsls	r3, r3, #6
 800291c:	431a      	orrs	r2, r3
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	071b      	lsls	r3, r3, #28
 8002934:	4943      	ldr	r1, [pc, #268]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800293c:	4b41      	ldr	r3, [pc, #260]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800293e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002942:	f023 021f 	bic.w	r2, r3, #31
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	493d      	ldr	r1, [pc, #244]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d029      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002968:	d124      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800296a:	4b36      	ldr	r3, [pc, #216]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800296c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800297c:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800297e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002982:	0f1b      	lsrs	r3, r3, #28
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	019b      	lsls	r3, r3, #6
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	431a      	orrs	r2, r3
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	431a      	orrs	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	071b      	lsls	r3, r3, #28
 80029ac:	4925      	ldr	r1, [pc, #148]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	4917      	ldr	r1, [pc, #92]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029ee:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029f4:	f7ff f8f6 	bl	8001be4 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029fc:	f7ff f8f2 	bl	8001be4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e09f      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 8095 	bne.w	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a28:	f7ff f8dc 	bl	8001be4 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a2e:	e00f      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a30:	f7ff f8d8 	bl	8001be4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d908      	bls.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e085      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470068 	.word	0x42470068
 8002a4c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a50:	4b41      	ldr	r3, [pc, #260]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a5c:	d0e8      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02b      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d127      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a86:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	3301      	adds	r3, #1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	4928      	ldr	r1, [pc, #160]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002abc:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	3b01      	subs	r3, #1
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	4922      	ldr	r1, [pc, #136]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01d      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aea:	d118      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aec:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	0e1b      	lsrs	r3, r3, #24
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	019b      	lsls	r3, r3, #6
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	4910      	ldr	r1, [pc, #64]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b24:	f7ff f85e 	bl	8001be4 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b2c:	f7ff f85a 	bl	8001be4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e007      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b4a:	d1ef      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3730      	adds	r7, #48	@ 0x30
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	42470070 	.word	0x42470070

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b0ae      	sub	sp, #184	@ 0xb8
 8002b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b86:	4bcb      	ldr	r3, [pc, #812]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	f200 8206 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x440>
 8002b94:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bd1 	.word	0x08002bd1
 8002ba0:	08002fa1 	.word	0x08002fa1
 8002ba4:	08002fa1 	.word	0x08002fa1
 8002ba8:	08002fa1 	.word	0x08002fa1
 8002bac:	08002bd9 	.word	0x08002bd9
 8002bb0:	08002fa1 	.word	0x08002fa1
 8002bb4:	08002fa1 	.word	0x08002fa1
 8002bb8:	08002fa1 	.word	0x08002fa1
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002fa1 	.word	0x08002fa1
 8002bc4:	08002fa1 	.word	0x08002fa1
 8002bc8:	08002fa1 	.word	0x08002fa1
 8002bcc:	08002dd1 	.word	0x08002dd1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4bb9      	ldr	r3, [pc, #740]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd6:	e1e7      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4bb8      	ldr	r3, [pc, #736]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bde:	e1e3      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be0:	4bb4      	ldr	r3, [pc, #720]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bec:	4bb1      	ldr	r3, [pc, #708]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d071      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4bae      	ldr	r3, [pc, #696]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c04:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c1e:	4622      	mov	r2, r4
 8002c20:	462b      	mov	r3, r5
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	0159      	lsls	r1, r3, #5
 8002c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c30:	0150      	lsls	r0, r2, #5
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4621      	mov	r1, r4
 8002c38:	1a51      	subs	r1, r2, r1
 8002c3a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c50:	4649      	mov	r1, r9
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	018a      	lsls	r2, r1, #6
 8002c5e:	4641      	mov	r1, r8
 8002c60:	1a51      	subs	r1, r2, r1
 8002c62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c64:	4649      	mov	r1, r9
 8002c66:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c78:	4649      	mov	r1, r9
 8002c7a:	00cb      	lsls	r3, r1, #3
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c82:	4641      	mov	r1, r8
 8002c84:	00ca      	lsls	r2, r1, #3
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c92:	462b      	mov	r3, r5
 8002c94:	460a      	mov	r2, r1
 8002c96:	eb42 0303 	adc.w	r3, r2, r3
 8002c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca8:	4629      	mov	r1, r5
 8002caa:	024b      	lsls	r3, r1, #9
 8002cac:	4621      	mov	r1, r4
 8002cae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	024a      	lsls	r2, r1, #9
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ccc:	f7fd fb08 	bl	80002e0 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cda:	e067      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cdc:	4b75      	ldr	r3, [pc, #468]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cfa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4621      	mov	r1, r4
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d30:	4649      	mov	r1, r9
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4641      	mov	r1, r8
 8002d40:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d44:	4649      	mov	r1, r9
 8002d46:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d5e:	4692      	mov	sl, r2
 8002d60:	469b      	mov	fp, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	eb1a 0303 	adds.w	r3, sl, r3
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	028b      	lsls	r3, r1, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d88:	4621      	mov	r1, r4
 8002d8a:	028a      	lsls	r2, r1, #10
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d94:	2200      	movs	r2, #0
 8002d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d98:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d9e:	f7fd fa9f 	bl	80002e0 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4613      	mov	r3, r2
 8002da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dce:	e0eb      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b38      	ldr	r3, [pc, #224]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ddc:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d06b      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	2200      	movs	r2, #0
 8002df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e04:	4622      	mov	r2, r4
 8002e06:	462b      	mov	r3, r5
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	0159      	lsls	r1, r3, #5
 8002e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e16:	0150      	lsls	r0, r2, #5
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	1a51      	subs	r1, r2, r1
 8002e20:	61b9      	str	r1, [r7, #24]
 8002e22:	4629      	mov	r1, r5
 8002e24:	eb63 0301 	sbc.w	r3, r3, r1
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e36:	4659      	mov	r1, fp
 8002e38:	018b      	lsls	r3, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e40:	4651      	mov	r1, sl
 8002e42:	018a      	lsls	r2, r1, #6
 8002e44:	4651      	mov	r1, sl
 8002e46:	ebb2 0801 	subs.w	r8, r2, r1
 8002e4a:	4659      	mov	r1, fp
 8002e4c:	eb63 0901 	sbc.w	r9, r3, r1
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e64:	4690      	mov	r8, r2
 8002e66:	4699      	mov	r9, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	eb18 0303 	adds.w	r3, r8, r3
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	462b      	mov	r3, r5
 8002e72:	eb49 0303 	adc.w	r3, r9, r3
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e84:	4629      	mov	r1, r5
 8002e86:	024b      	lsls	r3, r1, #9
 8002e88:	4621      	mov	r1, r4
 8002e8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e8e:	4621      	mov	r1, r4
 8002e90:	024a      	lsls	r2, r1, #9
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ea0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ea4:	f7fd fa1c 	bl	80002e0 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4613      	mov	r3, r2
 8002eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eb2:	e065      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x420>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4611      	mov	r1, r2
 8002ecc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ed0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ed6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002eda:	4642      	mov	r2, r8
 8002edc:	464b      	mov	r3, r9
 8002ede:	f04f 0000 	mov.w	r0, #0
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	0159      	lsls	r1, r3, #5
 8002ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eec:	0150      	lsls	r0, r2, #5
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	1a51      	subs	r1, r2, r1
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	4649      	mov	r1, r9
 8002efa:	eb63 0301 	sbc.w	r3, r3, r1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f0c:	4659      	mov	r1, fp
 8002f0e:	018b      	lsls	r3, r1, #6
 8002f10:	4651      	mov	r1, sl
 8002f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f16:	4651      	mov	r1, sl
 8002f18:	018a      	lsls	r2, r1, #6
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	1a54      	subs	r4, r2, r1
 8002f1e:	4659      	mov	r1, fp
 8002f20:	eb63 0501 	sbc.w	r5, r3, r1
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	00eb      	lsls	r3, r5, #3
 8002f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f32:	00e2      	lsls	r2, r4, #3
 8002f34:	4614      	mov	r4, r2
 8002f36:	461d      	mov	r5, r3
 8002f38:	4643      	mov	r3, r8
 8002f3a:	18e3      	adds	r3, r4, r3
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	464b      	mov	r3, r9
 8002f40:	eb45 0303 	adc.w	r3, r5, r3
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f52:	4629      	mov	r1, r5
 8002f54:	028b      	lsls	r3, r1, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	028a      	lsls	r2, r1, #10
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f68:	2200      	movs	r2, #0
 8002f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f72:	f7fd f9b5 	bl	80002e0 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f80:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	0f1b      	lsrs	r3, r3, #28
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	37b8      	adds	r7, #184	@ 0xb8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	00f42400 	.word	0x00f42400

08002fc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e28d      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8083 	beq.w	80030e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fe0:	4b94      	ldr	r3, [pc, #592]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d019      	beq.n	8003020 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fec:	4b91      	ldr	r3, [pc, #580]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003004:	d00c      	beq.n	8003020 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b8b      	ldr	r3, [pc, #556]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d112      	bne.n	8003038 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b84      	ldr	r3, [pc, #528]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d05b      	beq.n	80030e4 <HAL_RCC_OscConfig+0x124>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d157      	bne.n	80030e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e25a      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x90>
 8003042:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7b      	ldr	r2, [pc, #492]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xcc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0xb4>
 800305a:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b73      	ldr	r3, [pc, #460]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a72      	ldr	r2, [pc, #456]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xcc>
 8003074:	4b6f      	ldr	r3, [pc, #444]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6e      	ldr	r2, [pc, #440]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b6c      	ldr	r3, [pc, #432]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6b      	ldr	r2, [pc, #428]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fda6 	bl	8001be4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe fda2 	bl	8001be4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	@ 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e21f      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xdc>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fd92 	bl	8001be4 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fd8e 	bl	8001be4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	@ 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e20b      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b57      	ldr	r3, [pc, #348]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x104>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d06f      	beq.n	80031d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030f2:	4b50      	ldr	r3, [pc, #320]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
        || \
 8003106:	2b08      	cmp	r3, #8
 8003108:	d105      	bne.n	8003116 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800310a:	4b4a      	ldr	r3, [pc, #296]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x186>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1d3      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4937      	ldr	r1, [pc, #220]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_OscConfig+0x278>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fd3b 	bl	8001be4 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fd37 	bl	8001be4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1b4      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4925      	ldr	r1, [pc, #148]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_RCC_OscConfig+0x278>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fd1a 	bl	8001be4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe fd16 	bl	8001be4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e193      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_RCC_OscConfig+0x27c>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fcfa 	bl	8001be4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fcf6 	bl	8001be4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e173      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x234>
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <HAL_RCC_OscConfig+0x27c>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe fce3 	bl	8001be4 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00e      	b.n	8003240 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fcdf 	bl	8001be4 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d907      	bls.n	8003240 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e15c      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b8a      	ldr	r3, [pc, #552]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ea      	bne.n	8003222 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b83      	ldr	r3, [pc, #524]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b7f      	ldr	r3, [pc, #508]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a7e      	ldr	r2, [pc, #504]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b7c      	ldr	r3, [pc, #496]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b76      	ldr	r3, [pc, #472]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fc9f 	bl	8001be4 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fe fc9b 	bl	8001be4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e118      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x31e>
 80032d0:	4b66      	ldr	r3, [pc, #408]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d4:	4a65      	ldr	r2, [pc, #404]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	@ 0x70
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x358>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x340>
 80032e6:	4b61      	ldr	r3, [pc, #388]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ea:	4a60      	ldr	r2, [pc, #384]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f2:	4b5e      	ldr	r3, [pc, #376]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f6:	4a5d      	ldr	r2, [pc, #372]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x358>
 8003300:	4b5a      	ldr	r3, [pc, #360]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	4a59      	ldr	r2, [pc, #356]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
 800330c:	4b57      	ldr	r3, [pc, #348]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a56      	ldr	r2, [pc, #344]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fc60 	bl	8001be4 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fc5c 	bl	8001be4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0d7      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b4b      	ldr	r3, [pc, #300]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCC_OscConfig+0x368>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fc4a 	bl	8001be4 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe fc46 	bl	8001be4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0c1      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	4b40      	ldr	r3, [pc, #256]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	4a3a      	ldr	r2, [pc, #232]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80ad 	beq.w	80034ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003392:	4b36      	ldr	r3, [pc, #216]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d060      	beq.n	8003460 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d145      	bne.n	8003432 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b33      	ldr	r3, [pc, #204]	@ (8003474 <HAL_RCC_OscConfig+0x4b4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fc1a 	bl	8001be4 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fc16 	bl	8001be4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e093      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b29      	ldr	r3, [pc, #164]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	491b      	ldr	r1, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_RCC_OscConfig+0x4b4>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe fbeb 	bl	8001be4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe fbe7 	bl	8001be4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e064      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003424:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x452>
 8003430:	e05c      	b.n	80034ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_RCC_OscConfig+0x4b4>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fbd4 	bl	8001be4 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe fbd0 	bl	8001be4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04d      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x480>
 800345e:	e045      	b.n	80034ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e040      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000
 8003474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003478:	4b1f      	ldr	r3, [pc, #124]	@ (80034f8 <HAL_RCC_OscConfig+0x538>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d030      	beq.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d129      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d122      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d119      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	3b01      	subs	r3, #1
 80034c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d10f      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e073      	b.n	80035fa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	7f5b      	ldrb	r3, [r3, #29]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f990 	bl	8001848 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d055      	beq.n	80035e8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	22ca      	movs	r2, #202	@ 0xca
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2253      	movs	r2, #83	@ 0x53
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f99d 	bl	800388c <RTC_EnterInitMode>
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d12c      	bne.n	80035b6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800356a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800356e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68d2      	ldr	r2, [r2, #12]
 8003596:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6919      	ldr	r1, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	041a      	lsls	r2, r3, #16
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f9a4 	bl	80038fa <RTC_ExitInitMode>
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d110      	bne.n	80035de <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	22ff      	movs	r2, #255	@ 0xff
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80035e6:	e001      	b.n	80035ec <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003602:	b590      	push	{r4, r7, lr}
 8003604:	b087      	sub	sp, #28
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	7f1b      	ldrb	r3, [r3, #28]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_RTC_SetTime+0x1c>
 800361a:	2302      	movs	r3, #2
 800361c:	e087      	b.n	800372e <HAL_RTC_SetTime+0x12c>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2202      	movs	r2, #2
 8003628:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d126      	bne.n	800367e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2200      	movs	r2, #0
 8003642:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f97b 	bl	8003944 <RTC_ByteToBcd2>
 800364e:	4603      	mov	r3, r0
 8003650:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f974 	bl	8003944 <RTC_ByteToBcd2>
 800365c:	4603      	mov	r3, r0
 800365e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003660:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	789b      	ldrb	r3, [r3, #2]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f96c 	bl	8003944 <RTC_ByteToBcd2>
 800366c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800366e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	78db      	ldrb	r3, [r3, #3]
 8003676:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e018      	b.n	80036b0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	785b      	ldrb	r3, [r3, #1]
 800369c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800369e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80036a4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	78db      	ldrb	r3, [r3, #3]
 80036aa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	22ca      	movs	r2, #202	@ 0xca
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2253      	movs	r2, #83	@ 0x53
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8e3 	bl	800388c <RTC_EnterInitMode>
 80036c6:	4603      	mov	r3, r0
 80036c8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d120      	bne.n	8003712 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80036da:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80036de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6899      	ldr	r1, [r3, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f8f6 	bl	80038fa <RTC_ExitInitMode>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	22ff      	movs	r2, #255	@ 0xff
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]

  return status;
 800372c:	7cfb      	ldrb	r3, [r7, #19]
}
 800372e:	4618      	mov	r0, r3
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd90      	pop	{r4, r7, pc}

08003736 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003736:	b590      	push	{r4, r7, lr}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	7f1b      	ldrb	r3, [r3, #28]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_RTC_SetDate+0x1c>
 800374e:	2302      	movs	r3, #2
 8003750:	e071      	b.n	8003836 <HAL_RTC_SetDate+0x100>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2202      	movs	r2, #2
 800375c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10e      	bne.n	8003782 <HAL_RTC_SetDate+0x4c>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	785b      	ldrb	r3, [r3, #1]
 8003774:	f023 0310 	bic.w	r3, r3, #16
 8003778:	b2db      	uxtb	r3, r3
 800377a:	330a      	adds	r3, #10
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11c      	bne.n	80037c2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	78db      	ldrb	r3, [r3, #3]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f8d9 	bl	8003944 <RTC_ByteToBcd2>
 8003792:	4603      	mov	r3, r0
 8003794:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f8d2 	bl	8003944 <RTC_ByteToBcd2>
 80037a0:	4603      	mov	r3, r0
 80037a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	789b      	ldrb	r3, [r3, #2]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f8ca 	bl	8003944 <RTC_ByteToBcd2>
 80037b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80037b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e00e      	b.n	80037e0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	78db      	ldrb	r3, [r3, #3]
 80037c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037ce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	22ca      	movs	r2, #202	@ 0xca
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2253      	movs	r2, #83	@ 0x53
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f84b 	bl	800388c <RTC_EnterInitMode>
 80037f6:	4603      	mov	r3, r0
 80037f8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10c      	bne.n	800381a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800380a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800380e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f872 	bl	80038fa <RTC_ExitInitMode>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	22ff      	movs	r2, #255	@ 0xff
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]

  return status;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
}
 8003836:	4618      	mov	r0, r3
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}
	...

08003840 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <HAL_RTC_WaitForSynchro+0x48>)
 8003852:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003854:	f7fe f9c6 	bl	8001be4 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800385a:	e009      	b.n	8003870 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800385c:	f7fe f9c2 	bl	8001be4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800386a:	d901      	bls.n	8003870 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e007      	b.n	8003880 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0ee      	beq.n	800385c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	00017f5f 	.word	0x00017f5f

0800388c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d122      	bne.n	80038f0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ba:	f7fe f993 	bl	8001be4 <HAL_GetTick>
 80038be:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038c0:	e00c      	b.n	80038dc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038c2:	f7fe f98f 	bl	8001be4 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038d0:	d904      	bls.n	80038dc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <RTC_EnterInitMode+0x64>
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d1e8      	bne.n	80038c2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003914:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff8b 	bl	8003840 <HAL_RTC_WaitForSynchro>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2204      	movs	r2, #4
 8003934:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003952:	e005      	b.n	8003960 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	3b0a      	subs	r3, #10
 800395e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	2b09      	cmp	r3, #9
 8003964:	d8f6      	bhi.n	8003954 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	b2da      	uxtb	r2, r3
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	4313      	orrs	r3, r2
 8003972:	b2db      	uxtb	r3, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f839 	bl	8003a1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 f9c0 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d001      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e04e      	b.n	8003aea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a23      	ldr	r2, [pc, #140]	@ (8003af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a76:	d01d      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003afc <HAL_TIM_Base_Start_IT+0xc8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1e      	ldr	r2, [pc, #120]	@ (8003b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a19      	ldr	r2, [pc, #100]	@ (8003b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x80>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d111      	bne.n	8003ad8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d010      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad6:	e007      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40010400 	.word	0x40010400
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40001800 	.word	0x40001800

08003b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d020      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01b      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0202 	mvn.w	r2, #2
 8003b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8d2 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8c4 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8d5 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d020      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01b      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0204 	mvn.w	r2, #4
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8ac 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f89e 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8af 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d020      	beq.n	8003c10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0208 	mvn.w	r2, #8
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2204      	movs	r2, #4
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f886 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f878 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f889 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d020      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01b      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2208      	movs	r2, #8
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f860 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f852 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f863 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0201 	mvn.w	r2, #1
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fd02 	bl	8001684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f906 	bl	8003eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00c      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f834 	bl	8003d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0220 	mvn.w	r2, #32
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8d8 	bl	8003e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a46      	ldr	r2, [pc, #280]	@ (8003e70 <TIM_Base_SetConfig+0x12c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d62:	d00f      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a43      	ldr	r2, [pc, #268]	@ (8003e74 <TIM_Base_SetConfig+0x130>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00b      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a42      	ldr	r2, [pc, #264]	@ (8003e78 <TIM_Base_SetConfig+0x134>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d007      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a41      	ldr	r2, [pc, #260]	@ (8003e7c <TIM_Base_SetConfig+0x138>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a40      	ldr	r2, [pc, #256]	@ (8003e80 <TIM_Base_SetConfig+0x13c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d108      	bne.n	8003d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a35      	ldr	r2, [pc, #212]	@ (8003e70 <TIM_Base_SetConfig+0x12c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02b      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d027      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a32      	ldr	r2, [pc, #200]	@ (8003e74 <TIM_Base_SetConfig+0x130>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d023      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a31      	ldr	r2, [pc, #196]	@ (8003e78 <TIM_Base_SetConfig+0x134>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01f      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a30      	ldr	r2, [pc, #192]	@ (8003e7c <TIM_Base_SetConfig+0x138>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01b      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8003e80 <TIM_Base_SetConfig+0x13c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d017      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8003e84 <TIM_Base_SetConfig+0x140>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e88 <TIM_Base_SetConfig+0x144>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e8c <TIM_Base_SetConfig+0x148>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e90 <TIM_Base_SetConfig+0x14c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e94 <TIM_Base_SetConfig+0x150>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a29      	ldr	r2, [pc, #164]	@ (8003e98 <TIM_Base_SetConfig+0x154>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d108      	bne.n	8003e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a10      	ldr	r2, [pc, #64]	@ (8003e70 <TIM_Base_SetConfig+0x12c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_Base_SetConfig+0xf8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <TIM_Base_SetConfig+0x13c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d103      	bne.n	8003e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]
  }
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40010400 	.word	0x40010400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800
 8003e90:	40001800 	.word	0x40001800
 8003e94:	40001c00 	.word	0x40001c00
 8003e98:	40002000 	.word	0x40002000

08003e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e042      	b.n	8003f5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd fcd6 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	@ 0x24
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fdbd 	bl	8004a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	@ 0x28
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d175      	bne.n	8004070 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_UART_Transmit+0x2c>
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e06e      	b.n	8004072 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2221      	movs	r2, #33	@ 0x21
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa2:	f7fd fe1f 	bl	8001be4 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_UART_Transmit+0x6c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e003      	b.n	8003fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd8:	e02e      	b.n	8004038 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2180      	movs	r1, #128	@ 0x80
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fb1f 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e03a      	b.n	8004072 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3302      	adds	r3, #2
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e007      	b.n	800402a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1cb      	bne.n	8003fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2140      	movs	r1, #64	@ 0x40
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 faeb 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e006      	b.n	8004072 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	4613      	mov	r3, r2
 8004086:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b20      	cmp	r3, #32
 8004092:	d112      	bne.n	80040ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_UART_Receive_IT+0x26>
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e00b      	b.n	80040bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	461a      	mov	r2, r3
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb12 	bl	80046da <UART_Start_Receive_IT>
 80040b6:	4603      	mov	r3, r0
 80040b8:	e000      	b.n	80040bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0ba      	sub	sp, #232	@ 0xe8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_UART_IRQHandler+0x66>
 8004116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fbf2 	bl	800490c <UART_Receive_IT>
      return;
 8004128:	e25b      	b.n	80045e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800412a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80de 	beq.w	80042f0 <HAL_UART_IRQHandler+0x22c>
 8004134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004144:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80d1 	beq.w	80042f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_UART_IRQHandler+0xae>
 800415a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_UART_IRQHandler+0xd2>
 800417e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f043 0202 	orr.w	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_UART_IRQHandler+0xf6>
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <HAL_UART_IRQHandler+0x126>
 80041c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	f043 0208 	orr.w	r2, r3, #8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 81f2 	beq.w	80045d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_UART_IRQHandler+0x14e>
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb7d 	bl	800490c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b40      	cmp	r3, #64	@ 0x40
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <HAL_UART_IRQHandler+0x17a>
 8004236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d04f      	beq.n	80042de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fa85 	bl	800474e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	d141      	bne.n	80042d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3314      	adds	r3, #20
 8004258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004268:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800426c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800427e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800428a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1d9      	bne.n	8004252 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042aa:	4a7e      	ldr	r2, [pc, #504]	@ (80044a4 <HAL_UART_IRQHandler+0x3e0>)
 80042ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fdf4 	bl	8001ea0 <HAL_DMA_Abort_IT>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042c8:	4610      	mov	r0, r2
 80042ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e00e      	b.n	80042ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f994 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	e00a      	b.n	80042ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f990 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	e006      	b.n	80042ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f98c 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042ea:	e175      	b.n	80045d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	bf00      	nop
    return;
 80042ee:	e173      	b.n	80045d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 814f 	bne.w	8004598 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8148 	beq.w	8004598 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8141 	beq.w	8004598 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	f040 80b6 	bne.w	80044a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8145 	beq.w	80045dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800435a:	429a      	cmp	r2, r3
 800435c:	f080 813e 	bcs.w	80045dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004366:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004372:	f000 8088 	beq.w	8004486 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800438c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1d9      	bne.n	8004376 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3314      	adds	r3, #20
 80043c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e1      	bne.n	80043c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800440e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004422:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004424:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004428:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e3      	bne.n	80043fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004468:	65ba      	str	r2, [r7, #88]	@ 0x58
 800446a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800446e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e3      	bne.n	8004444 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd fc9d 	bl	8001dc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004494:	b29b      	uxth	r3, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29b      	uxth	r3, r3
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f8b7 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a2:	e09b      	b.n	80045dc <HAL_UART_IRQHandler+0x518>
 80044a4:	08004815 	.word	0x08004815
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 808e 	beq.w	80045e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8089 	beq.w	80045e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80044f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e3      	bne.n	80044ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	623b      	str	r3, [r7, #32]
   return(result);
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800452a:	633a      	str	r2, [r7, #48]	@ 0x30
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e3      	bne.n	8004506 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	60fb      	str	r3, [r7, #12]
   return(result);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0310 	bic.w	r3, r3, #16
 8004562:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004570:	61fa      	str	r2, [r7, #28]
 8004572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	617b      	str	r3, [r7, #20]
   return(result);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e3      	bne.n	800454c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800458a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f83d 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004596:	e023      	b.n	80045e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <HAL_UART_IRQHandler+0x4f4>
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f943 	bl	800483c <UART_Transmit_IT>
    return;
 80045b6:	e014      	b.n	80045e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <HAL_UART_IRQHandler+0x51e>
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f983 	bl	80048dc <UART_EndTransmit_IT>
    return;
 80045d6:	e004      	b.n	80045e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80045d8:	bf00      	nop
 80045da:	e002      	b.n	80045e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80045dc:	bf00      	nop
 80045de:	e000      	b.n	80045e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80045e0:	bf00      	nop
  }
}
 80045e2:	37e8      	adds	r7, #232	@ 0xe8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e03b      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004640:	d037      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fd facf 	bl	8001be4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e03a      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d023      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b80      	cmp	r3, #128	@ 0x80
 800466e:	d020      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d01d      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d116      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f857 	bl	800474e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2208      	movs	r2, #8
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0b4      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	4613      	mov	r3, r2
 80046e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2222      	movs	r2, #34	@ 0x22
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800471e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0220 	orr.w	r2, r2, #32
 800473e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800474e:	b480      	push	{r7}
 8004750:	b095      	sub	sp, #84	@ 0x54
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800476c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004776:	643a      	str	r2, [r7, #64]	@ 0x40
 8004778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800477c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	61fb      	str	r3, [r7, #28]
   return(result);
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e5      	bne.n	800478a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d119      	bne.n	80047fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f023 0310 	bic.w	r3, r3, #16
 80047dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e6:	61ba      	str	r2, [r7, #24]
 80047e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	613b      	str	r3, [r7, #16]
   return(result);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e5      	bne.n	80047c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004808:	bf00      	nop
 800480a:	3754      	adds	r7, #84	@ 0x54
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff fee4 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b21      	cmp	r3, #33	@ 0x21
 800484e:	d13e      	bne.n	80048ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004858:	d114      	bne.n	8004884 <UART_Transmit_IT+0x48>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d110      	bne.n	8004884 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004876:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	1c9a      	adds	r2, r3, #2
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	621a      	str	r2, [r3, #32]
 8004882:	e008      	b.n	8004896 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	1c59      	adds	r1, r3, #1
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6211      	str	r1, [r2, #32]
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4619      	mov	r1, r3
 80048a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff fe73 	bl	80045e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08c      	sub	sp, #48	@ 0x30
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b22      	cmp	r3, #34	@ 0x22
 800491e:	f040 80ae 	bne.w	8004a7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492a:	d117      	bne.n	800495c <UART_Receive_IT+0x50>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d113      	bne.n	800495c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004934:	2300      	movs	r3, #0
 8004936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494a:	b29a      	uxth	r2, r3
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
 800495a:	e026      	b.n	80049aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496e:	d007      	beq.n	8004980 <UART_Receive_IT+0x74>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <UART_Receive_IT+0x82>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498a:	701a      	strb	r2, [r3, #0]
 800498c:	e008      	b.n	80049a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800499a:	b2da      	uxtb	r2, r3
 800499c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4619      	mov	r1, r3
 80049b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d15d      	bne.n	8004a7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0220 	bic.w	r2, r2, #32
 80049cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d135      	bne.n	8004a70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f023 0310 	bic.w	r3, r3, #16
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2a:	623a      	str	r2, [r7, #32]
 8004a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	69f9      	ldr	r1, [r7, #28]
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d10a      	bne.n	8004a62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff fdd1 	bl	8004610 <HAL_UARTEx_RxEventCallback>
 8004a6e:	e002      	b.n	8004a76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc fdb5 	bl	80015e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e002      	b.n	8004a80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3730      	adds	r7, #48	@ 0x30
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a8c:	b0c0      	sub	sp, #256	@ 0x100
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa4:	68d9      	ldr	r1, [r3, #12]
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	ea40 0301 	orr.w	r3, r0, r1
 8004ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ae0:	f021 010c 	bic.w	r1, r1, #12
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004aee:	430b      	orrs	r3, r1
 8004af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	6999      	ldr	r1, [r3, #24]
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	ea40 0301 	orr.w	r3, r0, r1
 8004b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b8f      	ldr	r3, [pc, #572]	@ (8004d54 <UART_SetConfig+0x2cc>)
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d005      	beq.n	8004b28 <UART_SetConfig+0xa0>
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b8d      	ldr	r3, [pc, #564]	@ (8004d58 <UART_SetConfig+0x2d0>)
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d104      	bne.n	8004b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fd fcaa 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b30:	e003      	b.n	8004b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b32:	f7fd fc91 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8004b36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b44:	f040 810c 	bne.w	8004d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	1891      	adds	r1, r2, r2
 8004b60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b62:	415b      	adcs	r3, r3
 8004b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	eb12 0801 	adds.w	r8, r2, r1
 8004b70:	4629      	mov	r1, r5
 8004b72:	eb43 0901 	adc.w	r9, r3, r1
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b8a:	4690      	mov	r8, r2
 8004b8c:	4699      	mov	r9, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	eb18 0303 	adds.w	r3, r8, r3
 8004b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b98:	462b      	mov	r3, r5
 8004b9a:	eb49 0303 	adc.w	r3, r9, r3
 8004b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	18db      	adds	r3, r3, r3
 8004bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	eb42 0303 	adc.w	r3, r2, r3
 8004bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bcc:	f7fb fb88 	bl	80002e0 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4b61      	ldr	r3, [pc, #388]	@ (8004d5c <UART_SetConfig+0x2d4>)
 8004bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	011c      	lsls	r4, r3, #4
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004be8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	1891      	adds	r1, r2, r2
 8004bf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bf8:	415b      	adcs	r3, r3
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c00:	4641      	mov	r1, r8
 8004c02:	eb12 0a01 	adds.w	sl, r2, r1
 8004c06:	4649      	mov	r1, r9
 8004c08:	eb43 0b01 	adc.w	fp, r3, r1
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c20:	4692      	mov	sl, r2
 8004c22:	469b      	mov	fp, r3
 8004c24:	4643      	mov	r3, r8
 8004c26:	eb1a 0303 	adds.w	r3, sl, r3
 8004c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c2e:	464b      	mov	r3, r9
 8004c30:	eb4b 0303 	adc.w	r3, fp, r3
 8004c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	18db      	adds	r3, r3, r3
 8004c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c52:	4613      	mov	r3, r2
 8004c54:	eb42 0303 	adc.w	r3, r2, r3
 8004c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c62:	f7fb fb3d 	bl	80002e0 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d5c <UART_SetConfig+0x2d4>)
 8004c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2264      	movs	r2, #100	@ 0x64
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	1acb      	subs	r3, r1, r3
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c82:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <UART_SetConfig+0x2d4>)
 8004c84:	fba3 2302 	umull	r2, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c90:	441c      	add	r4, r3
 8004c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	1891      	adds	r1, r2, r2
 8004caa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cac:	415b      	adcs	r3, r3
 8004cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	1851      	adds	r1, r2, r1
 8004cb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cba:	4649      	mov	r1, r9
 8004cbc:	414b      	adcs	r3, r1
 8004cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ccc:	4659      	mov	r1, fp
 8004cce:	00cb      	lsls	r3, r1, #3
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd6:	4651      	mov	r1, sl
 8004cd8:	00ca      	lsls	r2, r1, #3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce8:	464b      	mov	r3, r9
 8004cea:	460a      	mov	r2, r1
 8004cec:	eb42 0303 	adc.w	r3, r2, r3
 8004cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d08:	460b      	mov	r3, r1
 8004d0a:	18db      	adds	r3, r3, r3
 8004d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0e:	4613      	mov	r3, r2
 8004d10:	eb42 0303 	adc.w	r3, r2, r3
 8004d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d1e:	f7fb fadf 	bl	80002e0 <__aeabi_uldivmod>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <UART_SetConfig+0x2d4>)
 8004d28:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	2164      	movs	r1, #100	@ 0x64
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	3332      	adds	r3, #50	@ 0x32
 8004d3a:	4a08      	ldr	r2, [pc, #32]	@ (8004d5c <UART_SetConfig+0x2d4>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	f003 0207 	and.w	r2, r3, #7
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4422      	add	r2, r4
 8004d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d50:	e106      	b.n	8004f60 <UART_SetConfig+0x4d8>
 8004d52:	bf00      	nop
 8004d54:	40011000 	.word	0x40011000
 8004d58:	40011400 	.word	0x40011400
 8004d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d72:	4642      	mov	r2, r8
 8004d74:	464b      	mov	r3, r9
 8004d76:	1891      	adds	r1, r2, r2
 8004d78:	6239      	str	r1, [r7, #32]
 8004d7a:	415b      	adcs	r3, r3
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d82:	4641      	mov	r1, r8
 8004d84:	1854      	adds	r4, r2, r1
 8004d86:	4649      	mov	r1, r9
 8004d88:	eb43 0501 	adc.w	r5, r3, r1
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	00eb      	lsls	r3, r5, #3
 8004d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9a:	00e2      	lsls	r2, r4, #3
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	461d      	mov	r5, r3
 8004da0:	4643      	mov	r3, r8
 8004da2:	18e3      	adds	r3, r4, r3
 8004da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004da8:	464b      	mov	r3, r9
 8004daa:	eb45 0303 	adc.w	r3, r5, r3
 8004dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dce:	4629      	mov	r1, r5
 8004dd0:	008b      	lsls	r3, r1, #2
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd8:	4621      	mov	r1, r4
 8004dda:	008a      	lsls	r2, r1, #2
 8004ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004de0:	f7fb fa7e 	bl	80002e0 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4b60      	ldr	r3, [pc, #384]	@ (8004f6c <UART_SetConfig+0x4e4>)
 8004dea:	fba3 2302 	umull	r2, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	011c      	lsls	r4, r3, #4
 8004df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	1891      	adds	r1, r2, r2
 8004e0a:	61b9      	str	r1, [r7, #24]
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e14:	4641      	mov	r1, r8
 8004e16:	1851      	adds	r1, r2, r1
 8004e18:	6139      	str	r1, [r7, #16]
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	414b      	adcs	r3, r1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	00cb      	lsls	r3, r1, #3
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e36:	4651      	mov	r1, sl
 8004e38:	00ca      	lsls	r2, r1, #3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4642      	mov	r2, r8
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e48:	464b      	mov	r3, r9
 8004e4a:	460a      	mov	r2, r1
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	008b      	lsls	r3, r1, #2
 8004e70:	4641      	mov	r1, r8
 8004e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e76:	4641      	mov	r1, r8
 8004e78:	008a      	lsls	r2, r1, #2
 8004e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e7e:	f7fb fa2f 	bl	80002e0 <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4611      	mov	r1, r2
 8004e88:	4b38      	ldr	r3, [pc, #224]	@ (8004f6c <UART_SetConfig+0x4e4>)
 8004e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	2264      	movs	r2, #100	@ 0x64
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	1acb      	subs	r3, r1, r3
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	3332      	adds	r3, #50	@ 0x32
 8004e9c:	4a33      	ldr	r2, [pc, #204]	@ (8004f6c <UART_SetConfig+0x4e4>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea8:	441c      	add	r4, r3
 8004eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eae:	2200      	movs	r2, #0
 8004eb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004eb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	1891      	adds	r1, r2, r2
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	415b      	adcs	r3, r3
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec8:	4641      	mov	r1, r8
 8004eca:	1851      	adds	r1, r2, r1
 8004ecc:	6039      	str	r1, [r7, #0]
 8004ece:	4649      	mov	r1, r9
 8004ed0:	414b      	adcs	r3, r1
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	00cb      	lsls	r3, r1, #3
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eea:	4651      	mov	r1, sl
 8004eec:	00ca      	lsls	r2, r1, #3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	189b      	adds	r3, r3, r2
 8004ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004efa:	464b      	mov	r3, r9
 8004efc:	460a      	mov	r2, r1
 8004efe:	eb42 0303 	adc.w	r3, r2, r3
 8004f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	008b      	lsls	r3, r1, #2
 8004f20:	4641      	mov	r1, r8
 8004f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f26:	4641      	mov	r1, r8
 8004f28:	008a      	lsls	r2, r1, #2
 8004f2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f2e:	f7fb f9d7 	bl	80002e0 <__aeabi_uldivmod>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <UART_SetConfig+0x4e4>)
 8004f38:	fba3 1302 	umull	r1, r3, r3, r2
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	2164      	movs	r1, #100	@ 0x64
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	3332      	adds	r3, #50	@ 0x32
 8004f4a:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <UART_SetConfig+0x4e4>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4422      	add	r2, r4
 8004f5e:	609a      	str	r2, [r3, #8]
}
 8004f60:	bf00      	nop
 8004f62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f66:	46bd      	mov	sp, r7
 8004f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6c:	51eb851f 	.word	0x51eb851f

08004f70 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f103 0208 	add.w	r2, r3, #8
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f88:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f103 0208 	add.w	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f103 0208 	add.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe0:	d103      	bne.n	8004fea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e00c      	b.n	8005004 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3308      	adds	r3, #8
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e002      	b.n	8004ff8 <vListInsert+0x2e>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	429a      	cmp	r2, r3
 8005002:	d2f6      	bcs.n	8004ff2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6892      	ldr	r2, [r2, #8]
 8005052:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d103      	bne.n	8005070 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800509a:	2301      	movs	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d05d      	beq.n	8005182 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d059      	beq.n	8005182 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d6:	2100      	movs	r1, #0
 80050d8:	fba3 2302 	umull	r2, r3, r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d000      	beq.n	80050e2 <xQueueGenericReset+0x52>
 80050e0:	2101      	movs	r1, #1
 80050e2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d14c      	bne.n	8005182 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80050e8:	f002 fcf8 	bl	8007adc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f4:	6939      	ldr	r1, [r7, #16]
 80050f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	441a      	add	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2200      	movs	r2, #0
 8005106:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005118:	3b01      	subs	r3, #1
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	441a      	add	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	22ff      	movs	r2, #255	@ 0xff
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	22ff      	movs	r2, #255	@ 0xff
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d114      	bne.n	8005168 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01a      	beq.n	800517c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3310      	adds	r3, #16
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f9dc 	bl	8006508 <xTaskRemoveFromEventList>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d012      	beq.n	800517c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005156:	4b16      	ldr	r3, [pc, #88]	@ (80051b0 <xQueueGenericReset+0x120>)
 8005158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	e009      	b.n	800517c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3310      	adds	r3, #16
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff feff 	bl	8004f70 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3324      	adds	r3, #36	@ 0x24
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fefa 	bl	8004f70 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800517c:	f002 fce0 	bl	8007b40 <vPortExitCritical>
 8005180:	e001      	b.n	8005186 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <xQueueGenericReset+0x114>
        __asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60bb      	str	r3, [r7, #8]
    }
 800519e:	bf00      	nop
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80051a4:	697b      	ldr	r3, [r7, #20]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	e000ed04 	.word	0xe000ed04

080051b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08a      	sub	sp, #40	@ 0x28
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02e      	beq.n	800522a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80051cc:	2100      	movs	r1, #0
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	fba3 2302 	umull	r2, r3, r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d000      	beq.n	80051dc <xQueueGenericCreate+0x28>
 80051da:	2101      	movs	r1, #1
 80051dc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d123      	bne.n	800522a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80051ea:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80051ee:	d81c      	bhi.n	800522a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3350      	adds	r3, #80	@ 0x50
 80051fe:	4618      	mov	r0, r3
 8005200:	f002 fd96 	bl	8007d30 <pvPortMalloc>
 8005204:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01d      	beq.n	8005248 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3350      	adds	r3, #80	@ 0x50
 8005214:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005216:	79fa      	ldrb	r2, [r7, #7]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f815 	bl	8005252 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005228:	e00e      	b.n	8005248 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <xQueueGenericCreate+0x94>
        __asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	613b      	str	r3, [r7, #16]
    }
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005248:	69fb      	ldr	r3, [r7, #28]
    }
 800524a:	4618      	mov	r0, r3
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e002      	b.n	8005274 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005280:	2101      	movs	r1, #1
 8005282:	69b8      	ldr	r0, [r7, #24]
 8005284:	f7ff ff04 	bl	8005090 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08e      	sub	sp, #56	@ 0x38
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052a6:	2300      	movs	r3, #0
 80052a8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <xQueueGenericSend+0x34>
        __asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <xQueueGenericSend+0x42>
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <xQueueGenericSend+0x46>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <xQueueGenericSend+0x48>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <xQueueGenericSend+0x64>
        __asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	e7fd      	b.n	80052f8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d103      	bne.n	800530a <xQueueGenericSend+0x72>
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <xQueueGenericSend+0x76>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueGenericSend+0x78>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <xQueueGenericSend+0x94>
        __asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	623b      	str	r3, [r7, #32]
    }
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800532c:	f001 fb00 	bl	8006930 <xTaskGetSchedulerState>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <xQueueGenericSend+0xa4>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <xQueueGenericSend+0xa8>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <xQueueGenericSend+0xaa>
 8005340:	2300      	movs	r3, #0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <xQueueGenericSend+0xc6>
        __asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	61fb      	str	r3, [r7, #28]
    }
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800535e:	f002 fbbd 	bl	8007adc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <xQueueGenericSend+0xdc>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d129      	bne.n	80053c8 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800537a:	f000 fa46 	bl	800580a <prvCopyDataToQueue>
 800537e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d010      	beq.n	80053aa <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	3324      	adds	r3, #36	@ 0x24
 800538c:	4618      	mov	r0, r3
 800538e:	f001 f8bb 	bl	8006508 <xTaskRemoveFromEventList>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005398:	4b3f      	ldr	r3, [pc, #252]	@ (8005498 <xQueueGenericSend+0x200>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	e00a      	b.n	80053c0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80053aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80053b0:	4b39      	ldr	r3, [pc, #228]	@ (8005498 <xQueueGenericSend+0x200>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80053c0:	f002 fbbe 	bl	8007b40 <vPortExitCritical>
                return pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e063      	b.n	8005490 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80053ce:	f002 fbb7 	bl	8007b40 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e05c      	b.n	8005490 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 f969 	bl	80066b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80053ea:	f002 fba9 	bl	8007b40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80053ee:	f000 fd85 	bl	8005efc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80053f2:	f002 fb73 	bl	8007adc <vPortEnterCritical>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005402:	d103      	bne.n	800540c <xQueueGenericSend+0x174>
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005412:	b25b      	sxtb	r3, r3
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005418:	d103      	bne.n	8005422 <xQueueGenericSend+0x18a>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005422:	f002 fb8d 	bl	8007b40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005426:	1d3a      	adds	r2, r7, #4
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f001 f958 	bl	80066e4 <xTaskCheckForTimeOut>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d124      	bne.n	8005484 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800543a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800543c:	f000 fadd 	bl	80059fa <prvIsQueueFull>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d018      	beq.n	8005478 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	3310      	adds	r3, #16
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 ffee 	bl	8006430 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005456:	f000 fa68 	bl	800592a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800545a:	f000 fd5d 	bl	8005f18 <xTaskResumeAll>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	f47f af7c 	bne.w	800535e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <xQueueGenericSend+0x200>)
 8005468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	e772      	b.n	800535e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800547a:	f000 fa56 	bl	800592a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800547e:	f000 fd4b 	bl	8005f18 <xTaskResumeAll>
 8005482:	e76c      	b.n	800535e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005486:	f000 fa50 	bl	800592a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800548a:	f000 fd45 	bl	8005f18 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800548e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005490:	4618      	mov	r0, r3
 8005492:	3738      	adds	r7, #56	@ 0x38
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b092      	sub	sp, #72	@ 0x48
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 80054ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <xQueueGenericSendFromISR+0x3e>
 80054d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <xQueueGenericSendFromISR+0x42>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <xQueueGenericSendFromISR+0x44>
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d103      	bne.n	800550a <xQueueGenericSendFromISR+0x6e>
 8005502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <xQueueGenericSendFromISR+0x72>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericSendFromISR+0x74>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800552c:	f002 fbbe 	bl	8007cac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005530:	f3ef 8211 	mrs	r2, BASEPRI
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	623a      	str	r2, [r7, #32]
 8005546:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005548:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800554a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800554c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800554e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	429a      	cmp	r2, r3
 8005556:	d302      	bcc.n	800555e <xQueueGenericSendFromISR+0xc2>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d147      	bne.n	80055ee <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800555e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005560:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005564:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005574:	f000 f949 	bl	800580a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005578:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005580:	d112      	bne.n	80055a8 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	d02e      	beq.n	80055e8 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800558a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558c:	3324      	adds	r3, #36	@ 0x24
 800558e:	4618      	mov	r0, r3
 8005590:	f000 ffba 	bl	8006508 <xTaskRemoveFromEventList>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d026      	beq.n	80055e8 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d023      	beq.n	80055e8 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e01f      	b.n	80055e8 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80055a8:	f000 fdc2 	bl	8006130 <uxTaskGetNumberOfTasks>
 80055ac:	6338      	str	r0, [r7, #48]	@ 0x30
 80055ae:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80055b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d917      	bls.n	80055e8 <xQueueGenericSendFromISR+0x14c>
 80055b8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80055bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80055be:	d10b      	bne.n	80055d8 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	61bb      	str	r3, [r7, #24]
    }
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <xQueueGenericSendFromISR+0x138>
 80055d8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80055dc:	3301      	adds	r3, #1
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	b25a      	sxtb	r2, r3
 80055e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80055e8:	2301      	movs	r3, #1
 80055ea:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80055ec:	e001      	b.n	80055f2 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80055fc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80055fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005600:	4618      	mov	r0, r3
 8005602:	3748      	adds	r7, #72	@ 0x48
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	@ 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <xQueueReceive+0x32>
        __asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	623b      	str	r3, [r7, #32]
    }
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <xQueueReceive+0x40>
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <xQueueReceive+0x44>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <xQueueReceive+0x46>
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <xQueueReceive+0x62>
        __asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61fb      	str	r3, [r7, #28]
    }
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800566a:	f001 f961 	bl	8006930 <xTaskGetSchedulerState>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <xQueueReceive+0x72>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <xQueueReceive+0x76>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueReceive+0x78>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <xQueueReceive+0x94>
        __asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
    }
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800569c:	f002 fa1e 	bl	8007adc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01f      	beq.n	80056ec <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056b0:	f000 f915 	bl	80058de <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00f      	beq.n	80056e4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	3310      	adds	r3, #16
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 ff1d 	bl	8006508 <xTaskRemoveFromEventList>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80056d4:	4b3c      	ldr	r3, [pc, #240]	@ (80057c8 <xQueueReceive+0x1c0>)
 80056d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80056e4:	f002 fa2c 	bl	8007b40 <vPortExitCritical>
                return pdPASS;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e069      	b.n	80057c0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80056f2:	f002 fa25 	bl	8007b40 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e062      	b.n	80057c0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005700:	f107 0310 	add.w	r3, r7, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f000 ffd7 	bl	80066b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800570a:	2301      	movs	r3, #1
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800570e:	f002 fa17 	bl	8007b40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005712:	f000 fbf3 	bl	8005efc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005716:	f002 f9e1 	bl	8007adc <vPortEnterCritical>
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005720:	b25b      	sxtb	r3, r3
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005726:	d103      	bne.n	8005730 <xQueueReceive+0x128>
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005736:	b25b      	sxtb	r3, r3
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800573c:	d103      	bne.n	8005746 <xQueueReceive+0x13e>
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005746:	f002 f9fb 	bl	8007b40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800574a:	1d3a      	adds	r2, r7, #4
 800574c:	f107 0310 	add.w	r3, r7, #16
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f000 ffc6 	bl	80066e4 <xTaskCheckForTimeOut>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d123      	bne.n	80057a6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005760:	f000 f935 	bl	80059ce <prvIsQueueEmpty>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d017      	beq.n	800579a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	3324      	adds	r3, #36	@ 0x24
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fe5c 	bl	8006430 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800577a:	f000 f8d6 	bl	800592a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800577e:	f000 fbcb 	bl	8005f18 <xTaskResumeAll>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d189      	bne.n	800569c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8005788:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <xQueueReceive+0x1c0>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	e780      	b.n	800569c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800579a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800579c:	f000 f8c5 	bl	800592a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80057a0:	f000 fbba 	bl	8005f18 <xTaskResumeAll>
 80057a4:	e77a      	b.n	800569c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80057a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057a8:	f000 f8bf 	bl	800592a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80057ac:	f000 fbb4 	bl	8005f18 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057b2:	f000 f90c 	bl	80059ce <prvIsQueueEmpty>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f43f af6f 	beq.w	800569c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80057be:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3730      	adds	r7, #48	@ 0x30
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	60bb      	str	r3, [r7, #8]
    }
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80057f2:	f002 f973 	bl	8007adc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80057fc:	f002 f9a0 	bl	8007b40 <vPortExitCritical>

    return uxReturn;
 8005800:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d14d      	bne.n	80058cc <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4618      	mov	r0, r3
 8005836:	f001 f899 	bl	800696c <xTaskPriorityDisinherit>
 800583a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	e043      	b.n	80058cc <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d119      	bne.n	800587e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6858      	ldr	r0, [r3, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	461a      	mov	r2, r3
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	f002 fca1 	bl	800819c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	441a      	add	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	429a      	cmp	r2, r3
 8005872:	d32b      	bcc.n	80058cc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	605a      	str	r2, [r3, #4]
 800587c:	e026      	b.n	80058cc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68d8      	ldr	r0, [r3, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	461a      	mov	r2, r3
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	f002 fc87 	bl	800819c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	425b      	negs	r3, r3
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d207      	bcs.n	80058ba <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	425b      	negs	r3, r3
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d105      	bne.n	80058cc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80058d4:	697b      	ldr	r3, [r7, #20]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d018      	beq.n	8005922 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	441a      	add	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	d303      	bcc.n	8005912 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	461a      	mov	r2, r3
 800591c:	6838      	ldr	r0, [r7, #0]
 800591e:	f002 fc3d 	bl	800819c <memcpy>
    }
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005932:	f002 f8d3 	bl	8007adc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800593c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800593e:	e011      	b.n	8005964 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d012      	beq.n	800596e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3324      	adds	r3, #36	@ 0x24
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fddb 	bl	8006508 <xTaskRemoveFromEventList>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005958:	f000 ff2c 	bl	80067b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	3b01      	subs	r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	dce9      	bgt.n	8005940 <prvUnlockQueue+0x16>
 800596c:	e000      	b.n	8005970 <prvUnlockQueue+0x46>
                    break;
 800596e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	22ff      	movs	r2, #255	@ 0xff
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005978:	f002 f8e2 	bl	8007b40 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800597c:	f002 f8ae 	bl	8007adc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005986:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005988:	e011      	b.n	80059ae <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d012      	beq.n	80059b8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3310      	adds	r3, #16
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fdb6 	bl	8006508 <xTaskRemoveFromEventList>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80059a2:	f000 ff07 	bl	80067b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	dce9      	bgt.n	800598a <prvUnlockQueue+0x60>
 80059b6:	e000      	b.n	80059ba <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80059b8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	22ff      	movs	r2, #255	@ 0xff
 80059be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80059c2:	f002 f8bd 	bl	8007b40 <vPortExitCritical>
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80059d6:	f002 f881 	bl	8007adc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e001      	b.n	80059ec <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80059ec:	f002 f8a8 	bl	8007b40 <vPortExitCritical>

    return xReturn;
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a02:	f002 f86b 	bl	8007adc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d102      	bne.n	8005a18 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e001      	b.n	8005a1c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a1c:	f002 f890 	bl	8007b40 <vPortExitCritical>

    return xReturn;
 8005a20:	68fb      	ldr	r3, [r7, #12]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b087      	sub	sp, #28
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
    }
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d102      	bne.n	8005a66 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005a60:	2301      	movs	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e001      	b.n	8005a6a <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005a6a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
    }
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	e7fd      	b.n	8005aa0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d024      	beq.n	8005af4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e01e      	b.n	8005aee <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005ab0:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <vQueueAddToRegistry+0x9c>)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d105      	bne.n	8005acc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4a13      	ldr	r2, [pc, #76]	@ (8005b14 <vQueueAddToRegistry+0x9c>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
                    break;
 8005aca:	e013      	b.n	8005af4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10a      	bne.n	8005ae8 <vQueueAddToRegistry+0x70>
 8005ad2:	4a10      	ldr	r2, [pc, #64]	@ (8005b14 <vQueueAddToRegistry+0x9c>)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b14 <vQueueAddToRegistry+0x9c>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3301      	adds	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b07      	cmp	r3, #7
 8005af2:	d9dd      	bls.n	8005ab0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000238 	.word	0x20000238

08005b18 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005b28:	f001 ffd8 	bl	8007adc <vPortEnterCritical>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b38:	d103      	bne.n	8005b42 <vQueueWaitForMessageRestricted+0x2a>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4e:	d103      	bne.n	8005b58 <vQueueWaitForMessageRestricted+0x40>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b58:	f001 fff2 	bl	8007b40 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	3324      	adds	r3, #36	@ 0x24
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fc85 	bl	800647c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005b72:	6978      	ldr	r0, [r7, #20]
 8005b74:	f7ff fed9 	bl	800592a <prvUnlockQueue>
    }
 8005b78:	bf00      	nop
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	@ 0x30
 8005b84:	af04      	add	r7, sp, #16
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f002 f8cb 	bl	8007d30 <pvPortMalloc>
 8005b9a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d013      	beq.n	8005bca <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ba2:	2058      	movs	r0, #88	@ 0x58
 8005ba4:	f002 f8c4 	bl	8007d30 <pvPortMalloc>
 8005ba8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005bb0:	2258      	movs	r2, #88	@ 0x58
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	69f8      	ldr	r0, [r7, #28]
 8005bb6:	f002 fabd 	bl	8008134 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bc0:	e005      	b.n	8005bce <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f002 f970 	bl	8007ea8 <vPortFree>
 8005bc8:	e001      	b.n	8005bce <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bd4:	88fa      	ldrh	r2, [r7, #6]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9303      	str	r3, [sp, #12]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	9302      	str	r3, [sp, #8]
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f80e 	bl	8005c0c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005bf0:	69f8      	ldr	r0, [r7, #28]
 8005bf2:	f000 f89b 	bl	8005d2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e002      	b.n	8005c02 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c00:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005c02:	69bb      	ldr	r3, [r7, #24]
    }
 8005c04:	4618      	mov	r0, r3
 8005c06:	3720      	adds	r7, #32
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	461a      	mov	r2, r3
 8005c24:	21a5      	movs	r1, #165	@ 0xa5
 8005c26:	f002 fa85 	bl	8008134 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c34:	3b01      	subs	r3, #1
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f023 0307 	bic.w	r3, r3, #7
 8005c42:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	617b      	str	r3, [r7, #20]
    }
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	e7fd      	b.n	8005c62 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01e      	beq.n	8005caa <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	e012      	b.n	8005c98 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	7819      	ldrb	r1, [r3, #0]
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	3334      	adds	r3, #52	@ 0x34
 8005c82:	460a      	mov	r2, r1
 8005c84:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3301      	adds	r3, #1
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b09      	cmp	r3, #9
 8005c9c:	d9e9      	bls.n	8005c72 <prvInitialiseNewTask+0x66>
 8005c9e:	e000      	b.n	8005ca2 <prvInitialiseNewTask+0x96>
            {
                break;
 8005ca0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d90b      	bls.n	8005cc8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	613b      	str	r3, [r7, #16]
    }
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d901      	bls.n	8005cd2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cce:	2304      	movs	r3, #4
 8005cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cdc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff f964 	bl	8004fb0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	3318      	adds	r3, #24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff f95f 	bl	8004fb0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	f1c3 0205 	rsb	r2, r3, #5
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d06:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	69b8      	ldr	r0, [r7, #24]
 8005d0e:	f001 fdaf 	bl	8007870 <pxPortInitialiseStack>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d22:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005d24:	bf00      	nop
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005d34:	f001 fed2 	bl	8007adc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005d38:	4b40      	ldr	r3, [pc, #256]	@ (8005e3c <prvAddNewTaskToReadyList+0x110>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e3c <prvAddNewTaskToReadyList+0x110>)
 8005d40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005d42:	4b3f      	ldr	r3, [pc, #252]	@ (8005e40 <prvAddNewTaskToReadyList+0x114>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005d4a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e40 <prvAddNewTaskToReadyList+0x114>)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d50:	4b3a      	ldr	r3, [pc, #232]	@ (8005e3c <prvAddNewTaskToReadyList+0x110>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d110      	bne.n	8005d7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005d58:	f000 fd50 	bl	80067fc <prvInitialiseTaskLists>
 8005d5c:	e00d      	b.n	8005d7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005d5e:	4b39      	ldr	r3, [pc, #228]	@ (8005e44 <prvAddNewTaskToReadyList+0x118>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d66:	4b36      	ldr	r3, [pc, #216]	@ (8005e40 <prvAddNewTaskToReadyList+0x114>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d802      	bhi.n	8005d7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005d74:	4a32      	ldr	r2, [pc, #200]	@ (8005e40 <prvAddNewTaskToReadyList+0x114>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005d7a:	4b33      	ldr	r3, [pc, #204]	@ (8005e48 <prvAddNewTaskToReadyList+0x11c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	4a31      	ldr	r2, [pc, #196]	@ (8005e48 <prvAddNewTaskToReadyList+0x11c>)
 8005d82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d84:	4b30      	ldr	r3, [pc, #192]	@ (8005e48 <prvAddNewTaskToReadyList+0x11c>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	2201      	movs	r2, #1
 8005d92:	409a      	lsls	r2, r3
 8005d94:	4b2d      	ldr	r3, [pc, #180]	@ (8005e4c <prvAddNewTaskToReadyList+0x120>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e4c <prvAddNewTaskToReadyList+0x120>)
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da2:	492b      	ldr	r1, [pc, #172]	@ (8005e50 <prvAddNewTaskToReadyList+0x124>)
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	3304      	adds	r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	609a      	str	r2, [r3, #8]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	3204      	adds	r2, #4
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	609a      	str	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e50 <prvAddNewTaskToReadyList+0x124>)
 8005de2:	441a      	add	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	615a      	str	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dec:	4918      	ldr	r1, [pc, #96]	@ (8005e50 <prvAddNewTaskToReadyList+0x124>)
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	1c59      	adds	r1, r3, #1
 8005dfc:	4814      	ldr	r0, [pc, #80]	@ (8005e50 <prvAddNewTaskToReadyList+0x124>)
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4403      	add	r3, r0
 8005e08:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005e0a:	f001 fe99 	bl	8007b40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <prvAddNewTaskToReadyList+0x118>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00e      	beq.n	8005e34 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e16:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <prvAddNewTaskToReadyList+0x114>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d207      	bcs.n	8005e34 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005e24:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <prvAddNewTaskToReadyList+0x128>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000350 	.word	0x20000350
 8005e40:	20000278 	.word	0x20000278
 8005e44:	2000035c 	.word	0x2000035c
 8005e48:	2000036c 	.word	0x2000036c
 8005e4c:	20000358 	.word	0x20000358
 8005e50:	2000027c 	.word	0x2000027c
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005e5e:	4b20      	ldr	r3, [pc, #128]	@ (8005ee0 <vTaskStartScheduler+0x88>)
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	2300      	movs	r3, #0
 8005e68:	2282      	movs	r2, #130	@ 0x82
 8005e6a:	491e      	ldr	r1, [pc, #120]	@ (8005ee4 <vTaskStartScheduler+0x8c>)
 8005e6c:	481e      	ldr	r0, [pc, #120]	@ (8005ee8 <vTaskStartScheduler+0x90>)
 8005e6e:	f7ff fe87 	bl	8005b80 <xTaskCreate>
 8005e72:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d102      	bne.n	8005e80 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005e7a:	f001 f9a3 	bl	80071c4 <xTimerCreateTimerTask>
 8005e7e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d116      	bne.n	8005eb4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60bb      	str	r3, [r7, #8]
    }
 8005e98:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005e9a:	4b14      	ldr	r3, [pc, #80]	@ (8005eec <vTaskStartScheduler+0x94>)
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ea0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005ea2:	4b13      	ldr	r3, [pc, #76]	@ (8005ef0 <vTaskStartScheduler+0x98>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ea8:	4b12      	ldr	r3, [pc, #72]	@ (8005ef4 <vTaskStartScheduler+0x9c>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005eae:	f001 fd71 	bl	8007994 <xPortStartScheduler>
 8005eb2:	e00f      	b.n	8005ed4 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eba:	d10b      	bne.n	8005ed4 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	607b      	str	r3, [r7, #4]
    }
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	e7fd      	b.n	8005ed0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005ed4:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <vTaskStartScheduler+0xa0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000374 	.word	0x20000374
 8005ee4:	08009108 	.word	0x08009108
 8005ee8:	080067cd 	.word	0x080067cd
 8005eec:	20000370 	.word	0x20000370
 8005ef0:	2000035c 	.word	0x2000035c
 8005ef4:	20000354 	.word	0x20000354
 8005ef8:	08009180 	.word	0x08009180

08005efc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005f00:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <vTaskSuspendAll+0x18>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	4a03      	ldr	r2, [pc, #12]	@ (8005f14 <vTaskSuspendAll+0x18>)
 8005f08:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20000378 	.word	0x20000378

08005f18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005f26:	4b71      	ldr	r3, [pc, #452]	@ (80060ec <xTaskResumeAll+0x1d4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <xTaskResumeAll+0x2e>
        __asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
    }
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005f46:	f001 fdc9 	bl	8007adc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005f4a:	4b68      	ldr	r3, [pc, #416]	@ (80060ec <xTaskResumeAll+0x1d4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	4a66      	ldr	r2, [pc, #408]	@ (80060ec <xTaskResumeAll+0x1d4>)
 8005f52:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f54:	4b65      	ldr	r3, [pc, #404]	@ (80060ec <xTaskResumeAll+0x1d4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 80c0 	bne.w	80060de <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f5e:	4b64      	ldr	r3, [pc, #400]	@ (80060f0 <xTaskResumeAll+0x1d8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80bb 	beq.w	80060de <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f68:	e08a      	b.n	8006080 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b62      	ldr	r3, [pc, #392]	@ (80060f4 <xTaskResumeAll+0x1dc>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	6a12      	ldr	r2, [r2, #32]
 8005f80:	609a      	str	r2, [r3, #8]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	69d2      	ldr	r2, [r2, #28]
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3318      	adds	r3, #24
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d103      	bne.n	8005fa0 <xTaskResumeAll+0x88>
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	1e5a      	subs	r2, r3, #1
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	68d2      	ldr	r2, [r2, #12]
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	6892      	ldr	r2, [r2, #8]
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d103      	bne.n	8005fde <xTaskResumeAll+0xc6>
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	615a      	str	r2, [r3, #20]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	1e5a      	subs	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	4b40      	ldr	r3, [pc, #256]	@ (80060f8 <xTaskResumeAll+0x1e0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	4a3e      	ldr	r2, [pc, #248]	@ (80060f8 <xTaskResumeAll+0x1e0>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006004:	493d      	ldr	r1, [pc, #244]	@ (80060fc <xTaskResumeAll+0x1e4>)
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3304      	adds	r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	60da      	str	r2, [r3, #12]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	3204      	adds	r2, #4
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	1d1a      	adds	r2, r3, #4
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	609a      	str	r2, [r3, #8]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4a2e      	ldr	r2, [pc, #184]	@ (80060fc <xTaskResumeAll+0x1e4>)
 8006044:	441a      	add	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	615a      	str	r2, [r3, #20]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604e:	492b      	ldr	r1, [pc, #172]	@ (80060fc <xTaskResumeAll+0x1e4>)
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	1c59      	adds	r1, r3, #1
 800605e:	4827      	ldr	r0, [pc, #156]	@ (80060fc <xTaskResumeAll+0x1e4>)
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4403      	add	r3, r0
 800606a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006070:	4b23      	ldr	r3, [pc, #140]	@ (8006100 <xTaskResumeAll+0x1e8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 800607a:	4b22      	ldr	r3, [pc, #136]	@ (8006104 <xTaskResumeAll+0x1ec>)
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006080:	4b1c      	ldr	r3, [pc, #112]	@ (80060f4 <xTaskResumeAll+0x1dc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f47f af70 	bne.w	8005f6a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006090:	f000 fc32 	bl	80068f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006094:	4b1c      	ldr	r3, [pc, #112]	@ (8006108 <xTaskResumeAll+0x1f0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d010      	beq.n	80060c2 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80060a0:	f000 f852 	bl	8006148 <xTaskIncrementTick>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80060aa:	4b16      	ldr	r3, [pc, #88]	@ (8006104 <xTaskResumeAll+0x1ec>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f1      	bne.n	80060a0 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80060bc:	4b12      	ldr	r3, [pc, #72]	@ (8006108 <xTaskResumeAll+0x1f0>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80060c2:	4b10      	ldr	r3, [pc, #64]	@ (8006104 <xTaskResumeAll+0x1ec>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80060ce:	4b0f      	ldr	r3, [pc, #60]	@ (800610c <xTaskResumeAll+0x1f4>)
 80060d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80060de:	f001 fd2f 	bl	8007b40 <vPortExitCritical>

    return xAlreadyYielded;
 80060e2:	69bb      	ldr	r3, [r7, #24]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000378 	.word	0x20000378
 80060f0:	20000350 	.word	0x20000350
 80060f4:	20000310 	.word	0x20000310
 80060f8:	20000358 	.word	0x20000358
 80060fc:	2000027c 	.word	0x2000027c
 8006100:	20000278 	.word	0x20000278
 8006104:	20000364 	.word	0x20000364
 8006108:	20000360 	.word	0x20000360
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006116:	4b05      	ldr	r3, [pc, #20]	@ (800612c <xTaskGetTickCount+0x1c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800611c:	687b      	ldr	r3, [r7, #4]
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000354 	.word	0x20000354

08006130 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006134:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <uxTaskGetNumberOfTasks+0x14>)
 8006136:	681b      	ldr	r3, [r3, #0]
}
 8006138:	4618      	mov	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000350 	.word	0x20000350

08006148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	@ 0x28
 800614c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006152:	4b7e      	ldr	r3, [pc, #504]	@ (800634c <xTaskIncrementTick+0x204>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f040 80ed 	bne.w	8006336 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800615c:	4b7c      	ldr	r3, [pc, #496]	@ (8006350 <xTaskIncrementTick+0x208>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006164:	4a7a      	ldr	r2, [pc, #488]	@ (8006350 <xTaskIncrementTick+0x208>)
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d121      	bne.n	80061b4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006170:	4b78      	ldr	r3, [pc, #480]	@ (8006354 <xTaskIncrementTick+0x20c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <xTaskIncrementTick+0x4a>
        __asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	607b      	str	r3, [r7, #4]
    }
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <xTaskIncrementTick+0x46>
 8006192:	4b70      	ldr	r3, [pc, #448]	@ (8006354 <xTaskIncrementTick+0x20c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	4b6f      	ldr	r3, [pc, #444]	@ (8006358 <xTaskIncrementTick+0x210>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a6d      	ldr	r2, [pc, #436]	@ (8006354 <xTaskIncrementTick+0x20c>)
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	4a6d      	ldr	r2, [pc, #436]	@ (8006358 <xTaskIncrementTick+0x210>)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4b6d      	ldr	r3, [pc, #436]	@ (800635c <xTaskIncrementTick+0x214>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3301      	adds	r3, #1
 80061ac:	4a6b      	ldr	r2, [pc, #428]	@ (800635c <xTaskIncrementTick+0x214>)
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	f000 fba2 	bl	80068f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80061b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006360 <xTaskIncrementTick+0x218>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	f0c0 80a6 	bcc.w	800630c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c0:	4b64      	ldr	r3, [pc, #400]	@ (8006354 <xTaskIncrementTick+0x20c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ca:	4b65      	ldr	r3, [pc, #404]	@ (8006360 <xTaskIncrementTick+0x218>)
 80061cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061d0:	601a      	str	r2, [r3, #0]
                    break;
 80061d2:	e09b      	b.n	800630c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006354 <xTaskIncrementTick+0x20c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80061e4:	6a3a      	ldr	r2, [r7, #32]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d203      	bcs.n	80061f4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80061ec:	4a5c      	ldr	r2, [pc, #368]	@ (8006360 <xTaskIncrementTick+0x218>)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80061f2:	e08b      	b.n	800630c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	6892      	ldr	r2, [r2, #8]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	3304      	adds	r3, #4
 8006216:	429a      	cmp	r2, r3
 8006218:	d103      	bne.n	8006222 <xTaskIncrementTick+0xda>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	605a      	str	r2, [r3, #4]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2200      	movs	r2, #0
 8006226:	615a      	str	r2, [r3, #20]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	1e5a      	subs	r2, r3, #1
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01e      	beq.n	8006278 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	6a12      	ldr	r2, [r2, #32]
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	69d2      	ldr	r2, [r2, #28]
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3318      	adds	r3, #24
 800625c:	429a      	cmp	r2, r3
 800625e:	d103      	bne.n	8006268 <xTaskIncrementTick+0x120>
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	605a      	str	r2, [r3, #4]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2200      	movs	r2, #0
 800626c:	629a      	str	r2, [r3, #40]	@ 0x28
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	1e5a      	subs	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	2201      	movs	r2, #1
 800627e:	409a      	lsls	r2, r3
 8006280:	4b38      	ldr	r3, [pc, #224]	@ (8006364 <xTaskIncrementTick+0x21c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	4a37      	ldr	r2, [pc, #220]	@ (8006364 <xTaskIncrementTick+0x21c>)
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628e:	4936      	ldr	r1, [pc, #216]	@ (8006368 <xTaskIncrementTick+0x220>)
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	3304      	adds	r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	609a      	str	r2, [r3, #8]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	60da      	str	r2, [r3, #12]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	3204      	adds	r2, #4
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4a26      	ldr	r2, [pc, #152]	@ (8006368 <xTaskIncrementTick+0x220>)
 80062ce:	441a      	add	r2, r3
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	615a      	str	r2, [r3, #20]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d8:	4923      	ldr	r1, [pc, #140]	@ (8006368 <xTaskIncrementTick+0x220>)
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	1c59      	adds	r1, r3, #1
 80062e8:	481f      	ldr	r0, [pc, #124]	@ (8006368 <xTaskIncrementTick+0x220>)
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4403      	add	r3, r0
 80062f4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	4b1c      	ldr	r3, [pc, #112]	@ (800636c <xTaskIncrementTick+0x224>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	429a      	cmp	r2, r3
 8006302:	f67f af5d 	bls.w	80061c0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800630a:	e759      	b.n	80061c0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800630c:	4b17      	ldr	r3, [pc, #92]	@ (800636c <xTaskIncrementTick+0x224>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006312:	4915      	ldr	r1, [pc, #84]	@ (8006368 <xTaskIncrementTick+0x220>)
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d901      	bls.n	8006328 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8006324:	2301      	movs	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006328:	4b11      	ldr	r3, [pc, #68]	@ (8006370 <xTaskIncrementTick+0x228>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d007      	beq.n	8006340 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8006330:	2301      	movs	r3, #1
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
 8006334:	e004      	b.n	8006340 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006336:	4b0f      	ldr	r3, [pc, #60]	@ (8006374 <xTaskIncrementTick+0x22c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a0d      	ldr	r2, [pc, #52]	@ (8006374 <xTaskIncrementTick+0x22c>)
 800633e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006342:	4618      	mov	r0, r3
 8006344:	3728      	adds	r7, #40	@ 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000378 	.word	0x20000378
 8006350:	20000354 	.word	0x20000354
 8006354:	20000308 	.word	0x20000308
 8006358:	2000030c 	.word	0x2000030c
 800635c:	20000368 	.word	0x20000368
 8006360:	20000370 	.word	0x20000370
 8006364:	20000358 	.word	0x20000358
 8006368:	2000027c 	.word	0x2000027c
 800636c:	20000278 	.word	0x20000278
 8006370:	20000364 	.word	0x20000364
 8006374:	20000360 	.word	0x20000360

08006378 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800637e:	4b27      	ldr	r3, [pc, #156]	@ (800641c <vTaskSwitchContext+0xa4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006386:	4b26      	ldr	r3, [pc, #152]	@ (8006420 <vTaskSwitchContext+0xa8>)
 8006388:	2201      	movs	r2, #1
 800638a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800638c:	e040      	b.n	8006410 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800638e:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <vTaskSwitchContext+0xa8>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006394:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <vTaskSwitchContext+0xac>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	fab3 f383 	clz	r3, r3
 80063a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80063a2:	7afb      	ldrb	r3, [r7, #11]
 80063a4:	f1c3 031f 	rsb	r3, r3, #31
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	491f      	ldr	r1, [pc, #124]	@ (8006428 <vTaskSwitchContext+0xb0>)
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <vTaskSwitchContext+0x5e>
        __asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	607b      	str	r3, [r7, #4]
    }
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <vTaskSwitchContext+0x5a>
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4a11      	ldr	r2, [pc, #68]	@ (8006428 <vTaskSwitchContext+0xb0>)
 80063e2:	4413      	add	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3308      	adds	r3, #8
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d104      	bne.n	8006406 <vTaskSwitchContext+0x8e>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a07      	ldr	r2, [pc, #28]	@ (800642c <vTaskSwitchContext+0xb4>)
 800640e:	6013      	str	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000378 	.word	0x20000378
 8006420:	20000364 	.word	0x20000364
 8006424:	20000358 	.word	0x20000358
 8006428:	2000027c 	.word	0x2000027c
 800642c:	20000278 	.word	0x20000278

08006430 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60fb      	str	r3, [r7, #12]
    }
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006458:	4b07      	ldr	r3, [pc, #28]	@ (8006478 <vTaskPlaceOnEventList+0x48>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3318      	adds	r3, #24
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fe fdb2 	bl	8004fca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006466:	2101      	movs	r1, #1
 8006468:	6838      	ldr	r0, [r7, #0]
 800646a:	f000 fe2b 	bl	80070c4 <prvAddCurrentTaskToDelayedList>
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000278 	.word	0x20000278

0800647c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	613b      	str	r3, [r7, #16]
    }
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	4b15      	ldr	r3, [pc, #84]	@ (8006504 <vTaskPlaceOnEventListRestricted+0x88>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	61da      	str	r2, [r3, #28]
 80064b4:	4b13      	ldr	r3, [pc, #76]	@ (8006504 <vTaskPlaceOnEventListRestricted+0x88>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	6892      	ldr	r2, [r2, #8]
 80064bc:	621a      	str	r2, [r3, #32]
 80064be:	4b11      	ldr	r3, [pc, #68]	@ (8006504 <vTaskPlaceOnEventListRestricted+0x88>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	3218      	adds	r2, #24
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006504 <vTaskPlaceOnEventListRestricted+0x88>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f103 0218 	add.w	r2, r3, #24
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	609a      	str	r2, [r3, #8]
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <vTaskPlaceOnEventListRestricted+0x88>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	68b8      	ldr	r0, [r7, #8]
 80064f8:	f000 fde4 	bl	80070c4 <prvAddCurrentTaskToDelayedList>
    }
 80064fc:	bf00      	nop
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000278 	.word	0x20000278

08006508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006508:	b480      	push	{r7}
 800650a:	b08b      	sub	sp, #44	@ 0x2c
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
    }
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	6a3a      	ldr	r2, [r7, #32]
 8006542:	6a12      	ldr	r2, [r2, #32]
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	69d2      	ldr	r2, [r2, #28]
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	3318      	adds	r3, #24
 8006558:	429a      	cmp	r2, r3
 800655a:	d103      	bne.n	8006564 <xTaskRemoveFromEventList+0x5c>
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	605a      	str	r2, [r3, #4]
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2200      	movs	r2, #0
 8006568:	629a      	str	r2, [r3, #40]	@ 0x28
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006574:	4b4a      	ldr	r3, [pc, #296]	@ (80066a0 <xTaskRemoveFromEventList+0x198>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d15e      	bne.n	800663a <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	6a3a      	ldr	r2, [r7, #32]
 8006588:	68d2      	ldr	r2, [r2, #12]
 800658a:	609a      	str	r2, [r3, #8]
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	6892      	ldr	r2, [r2, #8]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	3304      	adds	r3, #4
 800659e:	429a      	cmp	r2, r3
 80065a0:	d103      	bne.n	80065aa <xTaskRemoveFromEventList+0xa2>
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2200      	movs	r2, #0
 80065ae:	615a      	str	r2, [r3, #20]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065be:	2201      	movs	r2, #1
 80065c0:	409a      	lsls	r2, r3
 80065c2:	4b38      	ldr	r3, [pc, #224]	@ (80066a4 <xTaskRemoveFromEventList+0x19c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	4a36      	ldr	r2, [pc, #216]	@ (80066a4 <xTaskRemoveFromEventList+0x19c>)
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d0:	4935      	ldr	r1, [pc, #212]	@ (80066a8 <xTaskRemoveFromEventList+0x1a0>)
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	3304      	adds	r3, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	60da      	str	r2, [r3, #12]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	3204      	adds	r2, #4
 80065f8:	605a      	str	r2, [r3, #4]
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	609a      	str	r2, [r3, #8]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4a26      	ldr	r2, [pc, #152]	@ (80066a8 <xTaskRemoveFromEventList+0x1a0>)
 8006610:	441a      	add	r2, r3
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	615a      	str	r2, [r3, #20]
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661a:	4923      	ldr	r1, [pc, #140]	@ (80066a8 <xTaskRemoveFromEventList+0x1a0>)
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	481f      	ldr	r0, [pc, #124]	@ (80066a8 <xTaskRemoveFromEventList+0x1a0>)
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4403      	add	r3, r0
 8006636:	6019      	str	r1, [r3, #0]
 8006638:	e01b      	b.n	8006672 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800663a:	4b1c      	ldr	r3, [pc, #112]	@ (80066ac <xTaskRemoveFromEventList+0x1a4>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	61da      	str	r2, [r3, #28]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	621a      	str	r2, [r3, #32]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	3218      	adds	r2, #24
 8006656:	605a      	str	r2, [r3, #4]
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f103 0218 	add.w	r2, r3, #24
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	609a      	str	r2, [r3, #8]
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	4a11      	ldr	r2, [pc, #68]	@ (80066ac <xTaskRemoveFromEventList+0x1a4>)
 8006666:	629a      	str	r2, [r3, #40]	@ 0x28
 8006668:	4b10      	ldr	r3, [pc, #64]	@ (80066ac <xTaskRemoveFromEventList+0x1a4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	4a0f      	ldr	r2, [pc, #60]	@ (80066ac <xTaskRemoveFromEventList+0x1a4>)
 8006670:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006676:	4b0e      	ldr	r3, [pc, #56]	@ (80066b0 <xTaskRemoveFromEventList+0x1a8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	429a      	cmp	r2, r3
 800667e:	d905      	bls.n	800668c <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006684:	4b0b      	ldr	r3, [pc, #44]	@ (80066b4 <xTaskRemoveFromEventList+0x1ac>)
 8006686:	2201      	movs	r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e001      	b.n	8006690 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800668c:	2300      	movs	r3, #0
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006692:	4618      	mov	r0, r3
 8006694:	372c      	adds	r7, #44	@ 0x2c
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000378 	.word	0x20000378
 80066a4:	20000358 	.word	0x20000358
 80066a8:	2000027c 	.word	0x2000027c
 80066ac:	20000310 	.word	0x20000310
 80066b0:	20000278 	.word	0x20000278
 80066b4:	20000364 	.word	0x20000364

080066b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066c0:	4b06      	ldr	r3, [pc, #24]	@ (80066dc <vTaskInternalSetTimeOutState+0x24>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80066c8:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <vTaskInternalSetTimeOutState+0x28>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	605a      	str	r2, [r3, #4]
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	20000368 	.word	0x20000368
 80066e0:	20000354 	.word	0x20000354

080066e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	613b      	str	r3, [r7, #16]
    }
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	60fb      	str	r3, [r7, #12]
    }
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	e7fd      	b.n	8006726 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800672a:	f001 f9d7 	bl	8007adc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800672e:	4b1f      	ldr	r3, [pc, #124]	@ (80067ac <xTaskCheckForTimeOut+0xc8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006746:	d102      	bne.n	800674e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	e026      	b.n	800679c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <xTaskCheckForTimeOut+0xcc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d00a      	beq.n	8006770 <xTaskCheckForTimeOut+0x8c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	429a      	cmp	r2, r3
 8006762:	d305      	bcc.n	8006770 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006764:	2301      	movs	r3, #1
 8006766:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e015      	b.n	800679c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	429a      	cmp	r2, r3
 8006778:	d20b      	bcs.n	8006792 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff ff96 	bl	80066b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800678c:	2300      	movs	r3, #0
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e004      	b.n	800679c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800679c:	f001 f9d0 	bl	8007b40 <vPortExitCritical>

    return xReturn;
 80067a0:	69fb      	ldr	r3, [r7, #28]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000354 	.word	0x20000354
 80067b0:	20000368 	.word	0x20000368

080067b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80067b8:	4b03      	ldr	r3, [pc, #12]	@ (80067c8 <vTaskMissedYield+0x14>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
}
 80067be:	bf00      	nop
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	20000364 	.word	0x20000364

080067cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80067d4:	f000 f852 	bl	800687c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067d8:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <prvIdleTask+0x28>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d9f9      	bls.n	80067d4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80067e0:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <prvIdleTask+0x2c>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80067f0:	e7f0      	b.n	80067d4 <prvIdleTask+0x8>
 80067f2:	bf00      	nop
 80067f4:	2000027c 	.word	0x2000027c
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	e00c      	b.n	8006822 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4a12      	ldr	r2, [pc, #72]	@ (800685c <prvInitialiseTaskLists+0x60>)
 8006814:	4413      	add	r3, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fbaa 	bl	8004f70 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3301      	adds	r3, #1
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b04      	cmp	r3, #4
 8006826:	d9ef      	bls.n	8006808 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006828:	480d      	ldr	r0, [pc, #52]	@ (8006860 <prvInitialiseTaskLists+0x64>)
 800682a:	f7fe fba1 	bl	8004f70 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800682e:	480d      	ldr	r0, [pc, #52]	@ (8006864 <prvInitialiseTaskLists+0x68>)
 8006830:	f7fe fb9e 	bl	8004f70 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006834:	480c      	ldr	r0, [pc, #48]	@ (8006868 <prvInitialiseTaskLists+0x6c>)
 8006836:	f7fe fb9b 	bl	8004f70 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800683a:	480c      	ldr	r0, [pc, #48]	@ (800686c <prvInitialiseTaskLists+0x70>)
 800683c:	f7fe fb98 	bl	8004f70 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006840:	480b      	ldr	r0, [pc, #44]	@ (8006870 <prvInitialiseTaskLists+0x74>)
 8006842:	f7fe fb95 	bl	8004f70 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006846:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <prvInitialiseTaskLists+0x78>)
 8006848:	4a05      	ldr	r2, [pc, #20]	@ (8006860 <prvInitialiseTaskLists+0x64>)
 800684a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800684c:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <prvInitialiseTaskLists+0x7c>)
 800684e:	4a05      	ldr	r2, [pc, #20]	@ (8006864 <prvInitialiseTaskLists+0x68>)
 8006850:	601a      	str	r2, [r3, #0]
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	2000027c 	.word	0x2000027c
 8006860:	200002e0 	.word	0x200002e0
 8006864:	200002f4 	.word	0x200002f4
 8006868:	20000310 	.word	0x20000310
 800686c:	20000324 	.word	0x20000324
 8006870:	2000033c 	.word	0x2000033c
 8006874:	20000308 	.word	0x20000308
 8006878:	2000030c 	.word	0x2000030c

0800687c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006882:	e019      	b.n	80068b8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006884:	f001 f92a 	bl	8007adc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006888:	4b10      	ldr	r3, [pc, #64]	@ (80068cc <prvCheckTasksWaitingTermination+0x50>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fbd1 	bl	800503c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800689a:	4b0d      	ldr	r3, [pc, #52]	@ (80068d0 <prvCheckTasksWaitingTermination+0x54>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3b01      	subs	r3, #1
 80068a0:	4a0b      	ldr	r2, [pc, #44]	@ (80068d0 <prvCheckTasksWaitingTermination+0x54>)
 80068a2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80068a4:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <prvCheckTasksWaitingTermination+0x58>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	4a0a      	ldr	r2, [pc, #40]	@ (80068d4 <prvCheckTasksWaitingTermination+0x58>)
 80068ac:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80068ae:	f001 f947 	bl	8007b40 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f810 	bl	80068d8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068b8:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <prvCheckTasksWaitingTermination+0x58>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e1      	bne.n	8006884 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000324 	.word	0x20000324
 80068d0:	20000350 	.word	0x20000350
 80068d4:	20000338 	.word	0x20000338

080068d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fadf 	bl	8007ea8 <vPortFree>
            vPortFree( pxTCB );
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fadc 	bl	8007ea8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <prvResetNextTaskUnblockTime+0x30>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006906:	4b09      	ldr	r3, [pc, #36]	@ (800692c <prvResetNextTaskUnblockTime+0x34>)
 8006908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800690c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800690e:	e005      	b.n	800691c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006910:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <prvResetNextTaskUnblockTime+0x30>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a04      	ldr	r2, [pc, #16]	@ (800692c <prvResetNextTaskUnblockTime+0x34>)
 800691a:	6013      	str	r3, [r2, #0]
}
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000308 	.word	0x20000308
 800692c:	20000370 	.word	0x20000370

08006930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006936:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <xTaskGetSchedulerState+0x34>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800693e:	2301      	movs	r3, #1
 8006940:	607b      	str	r3, [r7, #4]
 8006942:	e008      	b.n	8006956 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006944:	4b08      	ldr	r3, [pc, #32]	@ (8006968 <xTaskGetSchedulerState+0x38>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800694c:	2302      	movs	r3, #2
 800694e:	607b      	str	r3, [r7, #4]
 8006950:	e001      	b.n	8006956 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006952:	2300      	movs	r3, #0
 8006954:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006956:	687b      	ldr	r3, [r7, #4]
    }
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	2000035c 	.word	0x2000035c
 8006968:	20000378 	.word	0x20000378

0800696c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 808e 	beq.w	8006aa0 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006984:	4b49      	ldr	r3, [pc, #292]	@ (8006aac <xTaskPriorityDisinherit+0x140>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	429a      	cmp	r2, r3
 800698c:	d00b      	beq.n	80069a6 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	613b      	str	r3, [r7, #16]
    }
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60fb      	str	r3, [r7, #12]
    }
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ca:	1e5a      	subs	r2, r3, #1
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069d8:	429a      	cmp	r2, r3
 80069da:	d061      	beq.n	8006aa0 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d15d      	bne.n	8006aa0 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe fb27 	bl	800503c <uxListRemove>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	2201      	movs	r2, #1
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43da      	mvns	r2, r3
 8006a00:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab0 <xTaskPriorityDisinherit+0x144>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4013      	ands	r3, r2
 8006a06:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab0 <xTaskPriorityDisinherit+0x144>)
 8006a08:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	f1c3 0205 	rsb	r2, r3, #5
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	2201      	movs	r2, #1
 8006a24:	409a      	lsls	r2, r3
 8006a26:	4b22      	ldr	r3, [pc, #136]	@ (8006ab0 <xTaskPriorityDisinherit+0x144>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	4a20      	ldr	r2, [pc, #128]	@ (8006ab0 <xTaskPriorityDisinherit+0x144>)
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a34:	491f      	ldr	r1, [pc, #124]	@ (8006ab4 <xTaskPriorityDisinherit+0x148>)
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	3304      	adds	r3, #4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	60da      	str	r2, [r3, #12]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	3204      	adds	r2, #4
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	1d1a      	adds	r2, r3, #4
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	609a      	str	r2, [r3, #8]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4a10      	ldr	r2, [pc, #64]	@ (8006ab4 <xTaskPriorityDisinherit+0x148>)
 8006a74:	441a      	add	r2, r3
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	615a      	str	r2, [r3, #20]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7e:	490d      	ldr	r1, [pc, #52]	@ (8006ab4 <xTaskPriorityDisinherit+0x148>)
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	1c59      	adds	r1, r3, #1
 8006a8e:	4809      	ldr	r0, [pc, #36]	@ (8006ab4 <xTaskPriorityDisinherit+0x148>)
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4403      	add	r3, r0
 8006a9a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
    }
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000278 	.word	0x20000278
 8006ab0:	20000358 	.word	0x20000358
 8006ab4:	2000027c 	.word	0x2000027c

08006ab8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	613b      	str	r3, [r7, #16]
    }
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006ae4:	f000 fffa 	bl	8007adc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006ae8:	4b31      	ldr	r3, [pc, #196]	@ (8006bb0 <xTaskGenericNotifyWait+0xf8>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	3354      	adds	r3, #84	@ 0x54
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d022      	beq.n	8006b40 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006afa:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb0 <xTaskGenericNotifyWait+0xf8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	3214      	adds	r2, #20
 8006b02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	43d2      	mvns	r2, r2
 8006b0a:	4011      	ands	r1, r2
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	3214      	adds	r2, #20
 8006b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006b14:	4b26      	ldr	r3, [pc, #152]	@ (8006bb0 <xTaskGenericNotifyWait+0xf8>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3354      	adds	r3, #84	@ 0x54
 8006b1e:	2201      	movs	r2, #1
 8006b20:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b28:	2101      	movs	r1, #1
 8006b2a:	6a38      	ldr	r0, [r7, #32]
 8006b2c:	f000 faca 	bl	80070c4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006b30:	4b20      	ldr	r3, [pc, #128]	@ (8006bb4 <xTaskGenericNotifyWait+0xfc>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006b40:	f000 fffe 	bl	8007b40 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006b44:	f000 ffca 	bl	8007adc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006b4e:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <xTaskGenericNotifyWait+0xf8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	3214      	adds	r2, #20
 8006b56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006b5e:	4b14      	ldr	r3, [pc, #80]	@ (8006bb0 <xTaskGenericNotifyWait+0xf8>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	3354      	adds	r3, #84	@ 0x54
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d002      	beq.n	8006b76 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e00e      	b.n	8006b94 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <xTaskGenericNotifyWait+0xf8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	3214      	adds	r2, #20
 8006b7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	43d2      	mvns	r2, r2
 8006b86:	4011      	ands	r1, r2
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	3214      	adds	r2, #20
 8006b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006b94:	4b06      	ldr	r3, [pc, #24]	@ (8006bb0 <xTaskGenericNotifyWait+0xf8>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3354      	adds	r3, #84	@ 0x54
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006ba2:	f000 ffcd 	bl	8007b40 <vPortExitCritical>

        return xReturn;
 8006ba6:	697b      	ldr	r3, [r7, #20]
    }
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000278 	.word	0x20000278
 8006bb4:	e000ed04 	.word	0xe000ed04

08006bb8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08e      	sub	sp, #56	@ 0x38
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <xTaskGenericNotify+0x30>
        __asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	623b      	str	r3, [r7, #32]
    }
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <xTaskGenericNotify+0x4e>
        __asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fb      	str	r3, [r7, #28]
    }
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8006c0a:	f000 ff67 	bl	8007adc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	3214      	adds	r2, #20
 8006c1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c20:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4413      	add	r3, r2
 8006c28:	3354      	adds	r3, #84	@ 0x54
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4413      	add	r3, r2
 8006c36:	3354      	adds	r3, #84	@ 0x54
 8006c38:	2202      	movs	r2, #2
 8006c3a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d83b      	bhi.n	8006cba <xTaskGenericNotify+0x102>
 8006c42:	a201      	add	r2, pc, #4	@ (adr r2, 8006c48 <xTaskGenericNotify+0x90>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006cdb 	.word	0x08006cdb
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c9f 	.word	0x08006c9f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	3214      	adds	r2, #20
 8006c62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	ea42 0103 	orr.w	r1, r2, r3
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	3214      	adds	r2, #20
 8006c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006c76:	e033      	b.n	8006ce0 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	3214      	adds	r2, #20
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	3214      	adds	r2, #20
 8006c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006c8e:	e027      	b.n	8006ce0 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	3214      	adds	r2, #20
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006c9c:	e020      	b.n	8006ce0 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d006      	beq.n	8006cb4 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	3214      	adds	r2, #20
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006cb2:	e015      	b.n	8006ce0 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8006cb8:	e012      	b.n	8006ce0 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006cba:	4b4d      	ldr	r3, [pc, #308]	@ (8006df0 <xTaskGenericNotify+0x238>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <xTaskGenericNotify+0x126>
        __asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	61bb      	str	r3, [r7, #24]
    }
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <xTaskGenericNotify+0x11e>
                    break;
 8006cda:	bf00      	nop
 8006cdc:	e000      	b.n	8006ce0 <xTaskGenericNotify+0x128>

                    break;
 8006cde:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d17c      	bne.n	8006de2 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf4:	68d2      	ldr	r2, [r2, #12]
 8006cf6:	609a      	str	r2, [r3, #8]
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfe:	6892      	ldr	r2, [r2, #8]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	3304      	adds	r3, #4
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d103      	bne.n	8006d16 <xTaskGenericNotify+0x15e>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	2200      	movs	r2, #0
 8006d1a:	615a      	str	r2, [r3, #20]
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	1e5a      	subs	r2, r3, #1
 8006d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d24:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	4b31      	ldr	r3, [pc, #196]	@ (8006df4 <xTaskGenericNotify+0x23c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	4a2f      	ldr	r2, [pc, #188]	@ (8006df4 <xTaskGenericNotify+0x23c>)
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3c:	492e      	ldr	r1, [pc, #184]	@ (8006df8 <xTaskGenericNotify+0x240>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3304      	adds	r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d62:	3204      	adds	r2, #4
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	609a      	str	r2, [r3, #8]
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006df8 <xTaskGenericNotify+0x240>)
 8006d7c:	441a      	add	r2, r3
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	615a      	str	r2, [r3, #20]
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d86:	491c      	ldr	r1, [pc, #112]	@ (8006df8 <xTaskGenericNotify+0x240>)
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	1c59      	adds	r1, r3, #1
 8006d96:	4818      	ldr	r0, [pc, #96]	@ (8006df8 <xTaskGenericNotify+0x240>)
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4403      	add	r3, r0
 8006da2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <xTaskGenericNotify+0x20c>
        __asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	617b      	str	r3, [r7, #20]
    }
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <xTaskGenericNotify+0x244>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d907      	bls.n	8006de2 <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <xTaskGenericNotify+0x248>)
 8006dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006de2:	f000 fead 	bl	8007b40 <vPortExitCritical>

        return xReturn;
 8006de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8006de8:	4618      	mov	r0, r3
 8006dea:	3738      	adds	r7, #56	@ 0x38
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000354 	.word	0x20000354
 8006df4:	20000358 	.word	0x20000358
 8006df8:	2000027c 	.word	0x2000027c
 8006dfc:	20000278 	.word	0x20000278
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b092      	sub	sp, #72	@ 0x48
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006e12:	2301      	movs	r3, #1
 8006e14:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e52:	f000 ff2b 	bl	8007cac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 8006e5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	623a      	str	r2, [r7, #32]
 8006e70:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006e72:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	3214      	adds	r2, #20
 8006e82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e88:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006e8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4413      	add	r3, r2
 8006e90:	3354      	adds	r3, #84	@ 0x54
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006e98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3354      	adds	r3, #84	@ 0x54
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d83b      	bhi.n	8006f22 <xTaskGenericNotifyFromISR+0x11e>
 8006eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb0 <xTaskGenericNotifyFromISR+0xac>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006f43 	.word	0x08006f43
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ee1 	.word	0x08006ee1
 8006ebc:	08006ef9 	.word	0x08006ef9
 8006ec0:	08006f07 	.word	0x08006f07
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	3214      	adds	r2, #20
 8006eca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	ea42 0103 	orr.w	r1, r2, r3
 8006ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	3214      	adds	r2, #20
 8006eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ede:	e033      	b.n	8006f48 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	3214      	adds	r2, #20
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	3214      	adds	r2, #20
 8006ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ef6:	e027      	b.n	8006f48 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	3214      	adds	r2, #20
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f04:	e020      	b.n	8006f48 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f06:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d006      	beq.n	8006f1c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	3214      	adds	r2, #20
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006f1a:	e015      	b.n	8006f48 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8006f20:	e012      	b.n	8006f48 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006f22:	4b61      	ldr	r3, [pc, #388]	@ (80070a8 <xTaskGenericNotifyFromISR+0x2a4>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	61bb      	str	r3, [r7, #24]
    }
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	e7fd      	b.n	8006f3e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006f46:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f48:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	f040 809f 	bne.w	8007090 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00b      	beq.n	8006f72 <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	617b      	str	r3, [r7, #20]
    }
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f72:	4b4e      	ldr	r3, [pc, #312]	@ (80070ac <xTaskGenericNotifyFromISR+0x2a8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d15e      	bne.n	8007038 <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f86:	68d2      	ldr	r2, [r2, #12]
 8006f88:	609a      	str	r2, [r3, #8]
 8006f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f90:	6892      	ldr	r2, [r2, #8]
 8006f92:	605a      	str	r2, [r3, #4]
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d103      	bne.n	8006fa8 <xTaskGenericNotifyFromISR+0x1a4>
 8006fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006faa:	2200      	movs	r2, #0
 8006fac:	615a      	str	r2, [r3, #20]
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	1e5a      	subs	r2, r3, #1
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80070b0 <xTaskGenericNotifyFromISR+0x2ac>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80070b0 <xTaskGenericNotifyFromISR+0x2ac>)
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fce:	4939      	ldr	r1, [pc, #228]	@ (80070b4 <xTaskGenericNotifyFromISR+0x2b0>)
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	3304      	adds	r3, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fe4:	609a      	str	r2, [r3, #8]
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fec:	60da      	str	r2, [r3, #12]
 8006fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ff4:	3204      	adds	r2, #4
 8006ff6:	605a      	str	r2, [r3, #4]
 8006ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ffa:	1d1a      	adds	r2, r3, #4
 8006ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4a29      	ldr	r2, [pc, #164]	@ (80070b4 <xTaskGenericNotifyFromISR+0x2b0>)
 800700e:	441a      	add	r2, r3
 8007010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007012:	615a      	str	r2, [r3, #20]
 8007014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007018:	4926      	ldr	r1, [pc, #152]	@ (80070b4 <xTaskGenericNotifyFromISR+0x2b0>)
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	1c59      	adds	r1, r3, #1
 8007028:	4822      	ldr	r0, [pc, #136]	@ (80070b4 <xTaskGenericNotifyFromISR+0x2b0>)
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4403      	add	r3, r0
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	e01b      	b.n	8007070 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007038:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <xTaskGenericNotifyFromISR+0x2b4>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	637b      	str	r3, [r7, #52]	@ 0x34
 800703e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007042:	61da      	str	r2, [r3, #28]
 8007044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800704a:	621a      	str	r2, [r3, #32]
 800704c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007052:	3218      	adds	r2, #24
 8007054:	605a      	str	r2, [r3, #4]
 8007056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007058:	f103 0218 	add.w	r2, r3, #24
 800705c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705e:	609a      	str	r2, [r3, #8]
 8007060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007062:	4a15      	ldr	r2, [pc, #84]	@ (80070b8 <xTaskGenericNotifyFromISR+0x2b4>)
 8007064:	629a      	str	r2, [r3, #40]	@ 0x28
 8007066:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <xTaskGenericNotifyFromISR+0x2b4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	4a12      	ldr	r2, [pc, #72]	@ (80070b8 <xTaskGenericNotifyFromISR+0x2b4>)
 800706e:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007074:	4b11      	ldr	r3, [pc, #68]	@ (80070bc <xTaskGenericNotifyFromISR+0x2b8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707a:	429a      	cmp	r2, r3
 800707c:	d908      	bls.n	8007090 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800707e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <xTaskGenericNotifyFromISR+0x2bc>)
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007092:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f383 8811 	msr	BASEPRI, r3
    }
 800709a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800709c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 800709e:	4618      	mov	r0, r3
 80070a0:	3748      	adds	r7, #72	@ 0x48
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000354 	.word	0x20000354
 80070ac:	20000378 	.word	0x20000378
 80070b0:	20000358 	.word	0x20000358
 80070b4:	2000027c 	.word	0x2000027c
 80070b8:	20000310 	.word	0x20000310
 80070bc:	20000278 	.word	0x20000278
 80070c0:	20000364 	.word	0x20000364

080070c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80070ce:	4b36      	ldr	r3, [pc, #216]	@ (80071a8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d4:	4b35      	ldr	r3, [pc, #212]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3304      	adds	r3, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fd ffae 	bl	800503c <uxListRemove>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070e6:	4b31      	ldr	r3, [pc, #196]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ec:	2201      	movs	r2, #1
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43da      	mvns	r2, r3
 80070f4:	4b2e      	ldr	r3, [pc, #184]	@ (80071b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4013      	ands	r3, r2
 80070fa:	4a2d      	ldr	r2, [pc, #180]	@ (80071b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80070fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007104:	d124      	bne.n	8007150 <prvAddCurrentTaskToDelayedList+0x8c>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d021      	beq.n	8007150 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800710c:	4b29      	ldr	r3, [pc, #164]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	4b26      	ldr	r3, [pc, #152]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	609a      	str	r2, [r3, #8]
 800711a:	4b24      	ldr	r3, [pc, #144]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	6892      	ldr	r2, [r2, #8]
 8007122:	60da      	str	r2, [r3, #12]
 8007124:	4b21      	ldr	r3, [pc, #132]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	3204      	adds	r2, #4
 800712e:	605a      	str	r2, [r3, #4]
 8007130:	4b1e      	ldr	r3, [pc, #120]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	1d1a      	adds	r2, r3, #4
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	609a      	str	r2, [r3, #8]
 800713a:	4b1c      	ldr	r3, [pc, #112]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a1d      	ldr	r2, [pc, #116]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007140:	615a      	str	r2, [r3, #20]
 8007142:	4b1c      	ldr	r3, [pc, #112]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a1a      	ldr	r2, [pc, #104]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800714e:	e026      	b.n	800719e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007158:	4b14      	ldr	r3, [pc, #80]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	429a      	cmp	r2, r3
 8007166:	d209      	bcs.n	800717c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007168:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b0f      	ldr	r3, [pc, #60]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fd ff28 	bl	8004fca <vListInsert>
}
 800717a:	e010      	b.n	800719e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800717c:	4b0f      	ldr	r3, [pc, #60]	@ (80071bc <prvAddCurrentTaskToDelayedList+0xf8>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3304      	adds	r3, #4
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f7fd ff1e 	bl	8004fca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800718e:	4b0c      	ldr	r3, [pc, #48]	@ (80071c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	429a      	cmp	r2, r3
 8007196:	d202      	bcs.n	800719e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007198:	4a09      	ldr	r2, [pc, #36]	@ (80071c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000354 	.word	0x20000354
 80071ac:	20000278 	.word	0x20000278
 80071b0:	20000358 	.word	0x20000358
 80071b4:	2000033c 	.word	0x2000033c
 80071b8:	2000030c 	.word	0x2000030c
 80071bc:	20000308 	.word	0x20000308
 80071c0:	20000370 	.word	0x20000370

080071c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80071ce:	f000 faf7 	bl	80077c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80071d2:	4b12      	ldr	r3, [pc, #72]	@ (800721c <xTimerCreateTimerTask+0x58>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80071da:	4b11      	ldr	r3, [pc, #68]	@ (8007220 <xTimerCreateTimerTask+0x5c>)
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	2302      	movs	r3, #2
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80071e8:	490e      	ldr	r1, [pc, #56]	@ (8007224 <xTimerCreateTimerTask+0x60>)
 80071ea:	480f      	ldr	r0, [pc, #60]	@ (8007228 <xTimerCreateTimerTask+0x64>)
 80071ec:	f7fe fcc8 	bl	8005b80 <xTaskCreate>
 80071f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	603b      	str	r3, [r7, #0]
    }
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	e7fd      	b.n	800720c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007210:	687b      	ldr	r3, [r7, #4]
    }
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200003ac 	.word	0x200003ac
 8007220:	200003b0 	.word	0x200003b0
 8007224:	08009110 	.word	0x08009110
 8007228:	08007421 	.word	0x08007421

0800722c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800723a:	202c      	movs	r0, #44	@ 0x2c
 800723c:	f000 fd78 	bl	8007d30 <pvPortMalloc>
 8007240:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00d      	beq.n	8007264 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f805 	bl	800726e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007264:	697b      	ldr	r3, [r7, #20]
        }
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800726e:	b580      	push	{r7, lr}
 8007270:	b086      	sub	sp, #24
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	617b      	str	r3, [r7, #20]
    }
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800729a:	f000 fa91 	bl	80077c0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	6a3a      	ldr	r2, [r7, #32]
 80072b4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd fe78 	bl	8004fb0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072cc:	f043 0304 	orr.w	r3, r3, #4
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80072d8:	bf00      	nop
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	@ 0x28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <xTimerGenericCommand+0x30>
        __asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	623b      	str	r3, [r7, #32]
    }
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	e7fd      	b.n	800730c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007310:	4b19      	ldr	r3, [pc, #100]	@ (8007378 <xTimerGenericCommand+0x98>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d02a      	beq.n	800736e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b05      	cmp	r3, #5
 8007328:	dc18      	bgt.n	800735c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800732a:	f7ff fb01 	bl	8006930 <xTaskGetSchedulerState>
 800732e:	4603      	mov	r3, r0
 8007330:	2b02      	cmp	r3, #2
 8007332:	d109      	bne.n	8007348 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007334:	4b10      	ldr	r3, [pc, #64]	@ (8007378 <xTimerGenericCommand+0x98>)
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	f107 0114 	add.w	r1, r7, #20
 800733c:	2300      	movs	r3, #0
 800733e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007340:	f7fd ffaa 	bl	8005298 <xQueueGenericSend>
 8007344:	6278      	str	r0, [r7, #36]	@ 0x24
 8007346:	e012      	b.n	800736e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007348:	4b0b      	ldr	r3, [pc, #44]	@ (8007378 <xTimerGenericCommand+0x98>)
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	f107 0114 	add.w	r1, r7, #20
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	f7fd ffa0 	bl	8005298 <xQueueGenericSend>
 8007358:	6278      	str	r0, [r7, #36]	@ 0x24
 800735a:	e008      	b.n	800736e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <xTimerGenericCommand+0x98>)
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	f107 0114 	add.w	r1, r7, #20
 8007364:	2300      	movs	r3, #0
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	f7fe f898 	bl	800549c <xQueueGenericSendFromISR>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007370:	4618      	mov	r0, r3
 8007372:	3728      	adds	r7, #40	@ 0x28
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200003ac 	.word	0x200003ac

0800737c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007388:	e008      	b.n	800739c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	699a      	ldr	r2, [r3, #24]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	18d1      	adds	r1, r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f8df 	bl	800756c <prvInsertTimerInActiveList>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1ea      	bne.n	800738a <prvReloadTimer+0xe>
        }
    }
 80073b4:	bf00      	nop
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ca:	4b14      	ldr	r3, [pc, #80]	@ (800741c <prvProcessExpiredTimer+0x5c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fd fe2f 	bl	800503c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff ffc3 	bl	800737c <prvReloadTimer>
 80073f6:	e008      	b.n	800740a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	b2da      	uxtb	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3
    }
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200003a4 	.word	0x200003a4

08007420 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007428:	f107 0308 	add.w	r3, r7, #8
 800742c:	4618      	mov	r0, r3
 800742e:	f000 f859 	bl	80074e4 <prvGetNextExpireTime>
 8007432:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4619      	mov	r1, r3
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f805 	bl	8007448 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800743e:	f000 f8d7 	bl	80075f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007442:	bf00      	nop
 8007444:	e7f0      	b.n	8007428 <prvTimerTask+0x8>
	...

08007448 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007452:	f7fe fd53 	bl	8005efc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007456:	f107 0308 	add.w	r3, r7, #8
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f866 	bl	800752c <prvSampleTimeNow>
 8007460:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d130      	bne.n	80074ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <prvProcessTimerOrBlockTask+0x3c>
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	429a      	cmp	r2, r3
 8007474:	d806      	bhi.n	8007484 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007476:	f7fe fd4f 	bl	8005f18 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ff9f 	bl	80073c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007482:	e024      	b.n	80074ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d008      	beq.n	800749c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800748a:	4b13      	ldr	r3, [pc, #76]	@ (80074d8 <prvProcessTimerOrBlockTask+0x90>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <prvProcessTimerOrBlockTask+0x50>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <prvProcessTimerOrBlockTask+0x52>
 8007498:	2300      	movs	r3, #0
 800749a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800749c:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <prvProcessTimerOrBlockTask+0x94>)
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	f7fe fb35 	bl	8005b18 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80074ae:	f7fe fd33 	bl	8005f18 <xTaskResumeAll>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80074b8:	4b09      	ldr	r3, [pc, #36]	@ (80074e0 <prvProcessTimerOrBlockTask+0x98>)
 80074ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	f3bf 8f6f 	isb	sy
    }
 80074c8:	e001      	b.n	80074ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80074ca:	f7fe fd25 	bl	8005f18 <xTaskResumeAll>
    }
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200003a8 	.word	0x200003a8
 80074dc:	200003ac 	.word	0x200003ac
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <prvGetNextExpireTime+0x44>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <prvGetNextExpireTime+0x16>
 80074f6:	2201      	movs	r2, #1
 80074f8:	e000      	b.n	80074fc <prvGetNextExpireTime+0x18>
 80074fa:	2200      	movs	r2, #0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007508:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <prvGetNextExpireTime+0x44>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	e001      	b.n	8007518 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007518:	68fb      	ldr	r3, [r7, #12]
    }
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	200003a4 	.word	0x200003a4

0800752c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007534:	f7fe fdec 	bl	8006110 <xTaskGetTickCount>
 8007538:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800753a:	4b0b      	ldr	r3, [pc, #44]	@ (8007568 <prvSampleTimeNow+0x3c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	429a      	cmp	r2, r3
 8007542:	d205      	bcs.n	8007550 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007544:	f000 f916 	bl	8007774 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e002      	b.n	8007556 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007556:	4a04      	ldr	r2, [pc, #16]	@ (8007568 <prvSampleTimeNow+0x3c>)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800755c:	68fb      	ldr	r3, [r7, #12]
    }
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200003b4 	.word	0x200003b4

0800756c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	429a      	cmp	r2, r3
 8007590:	d812      	bhi.n	80075b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	429a      	cmp	r2, r3
 800759e:	d302      	bcc.n	80075a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e01b      	b.n	80075de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075a6:	4b10      	ldr	r3, [pc, #64]	@ (80075e8 <prvInsertTimerInActiveList+0x7c>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f7fd fd0a 	bl	8004fca <vListInsert>
 80075b6:	e012      	b.n	80075de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d206      	bcs.n	80075ce <prvInsertTimerInActiveList+0x62>
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d302      	bcc.n	80075ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e007      	b.n	80075de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ce:	4b07      	ldr	r3, [pc, #28]	@ (80075ec <prvInsertTimerInActiveList+0x80>)
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7fd fcf6 	bl	8004fca <vListInsert>
            }
        }

        return xProcessTimerNow;
 80075de:	697b      	ldr	r3, [r7, #20]
    }
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200003a8 	.word	0x200003a8
 80075ec:	200003a4 	.word	0x200003a4

080075f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075f6:	e0a9      	b.n	800774c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f2c0 80a6 	blt.w	800774c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	3304      	adds	r3, #4
 8007610:	4618      	mov	r0, r3
 8007612:	f7fd fd13 	bl	800503c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007616:	1d3b      	adds	r3, r7, #4
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff ff87 	bl	800752c <prvSampleTimeNow>
 800761e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3b01      	subs	r3, #1
 8007624:	2b08      	cmp	r3, #8
 8007626:	f200 808e 	bhi.w	8007746 <prvProcessReceivedCommands+0x156>
 800762a:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <prvProcessReceivedCommands+0x40>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007655 	.word	0x08007655
 8007634:	08007655 	.word	0x08007655
 8007638:	080076bd 	.word	0x080076bd
 800763c:	080076d1 	.word	0x080076d1
 8007640:	0800771d 	.word	0x0800771d
 8007644:	08007655 	.word	0x08007655
 8007648:	08007655 	.word	0x08007655
 800764c:	080076bd 	.word	0x080076bd
 8007650:	080076d1 	.word	0x080076d1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	18d1      	adds	r1, r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	69f8      	ldr	r0, [r7, #28]
 8007674:	f7ff ff7a 	bl	800756c <prvInsertTimerInActiveList>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d065      	beq.n	800774a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	4413      	add	r3, r2
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	4619      	mov	r1, r3
 8007698:	69f8      	ldr	r0, [r7, #28]
 800769a:	f7ff fe6f 	bl	800737c <prvReloadTimer>
 800769e:	e008      	b.n	80076b2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076a6:	f023 0301 	bic.w	r3, r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	69f8      	ldr	r0, [r7, #28]
 80076b8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80076ba:	e046      	b.n	800774a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80076ce:	e03d      	b.n	800774c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076d6:	f043 0301 	orr.w	r3, r3, #1
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	617b      	str	r3, [r7, #20]
    }
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	18d1      	adds	r1, r2, r3
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	69f8      	ldr	r0, [r7, #28]
 8007716:	f7ff ff29 	bl	800756c <prvInsertTimerInActiveList>
                        break;
 800771a:	e017      	b.n	800774c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d103      	bne.n	8007732 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800772a:	69f8      	ldr	r0, [r7, #28]
 800772c:	f000 fbbc 	bl	8007ea8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007730:	e00c      	b.n	800774c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	b2da      	uxtb	r2, r3
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007744:	e002      	b.n	800774c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007746:	bf00      	nop
 8007748:	e000      	b.n	800774c <prvProcessReceivedCommands+0x15c>
                        break;
 800774a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800774c:	4b08      	ldr	r3, [pc, #32]	@ (8007770 <prvProcessReceivedCommands+0x180>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	2200      	movs	r2, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f7fd ff56 	bl	8005608 <xQueueReceive>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	f47f af4a 	bne.w	80075f8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200003ac 	.word	0x200003ac

08007774 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800777a:	e009      	b.n	8007790 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800777c:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <prvSwitchTimerLists+0x44>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007786:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800778a:	6838      	ldr	r0, [r7, #0]
 800778c:	f7ff fe18 	bl	80073c0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007790:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <prvSwitchTimerLists+0x44>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f0      	bne.n	800777c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800779a:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <prvSwitchTimerLists+0x44>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <prvSwitchTimerLists+0x48>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a04      	ldr	r2, [pc, #16]	@ (80077b8 <prvSwitchTimerLists+0x44>)
 80077a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80077a8:	4a04      	ldr	r2, [pc, #16]	@ (80077bc <prvSwitchTimerLists+0x48>)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6013      	str	r3, [r2, #0]
    }
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	200003a4 	.word	0x200003a4
 80077bc:	200003a8 	.word	0x200003a8

080077c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80077c4:	f000 f98a 	bl	8007adc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80077c8:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <prvCheckForValidListAndQueue+0x54>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11d      	bne.n	800780c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80077d0:	4811      	ldr	r0, [pc, #68]	@ (8007818 <prvCheckForValidListAndQueue+0x58>)
 80077d2:	f7fd fbcd 	bl	8004f70 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80077d6:	4811      	ldr	r0, [pc, #68]	@ (800781c <prvCheckForValidListAndQueue+0x5c>)
 80077d8:	f7fd fbca 	bl	8004f70 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80077dc:	4b10      	ldr	r3, [pc, #64]	@ (8007820 <prvCheckForValidListAndQueue+0x60>)
 80077de:	4a0e      	ldr	r2, [pc, #56]	@ (8007818 <prvCheckForValidListAndQueue+0x58>)
 80077e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80077e2:	4b10      	ldr	r3, [pc, #64]	@ (8007824 <prvCheckForValidListAndQueue+0x64>)
 80077e4:	4a0d      	ldr	r2, [pc, #52]	@ (800781c <prvCheckForValidListAndQueue+0x5c>)
 80077e6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80077e8:	2200      	movs	r2, #0
 80077ea:	210c      	movs	r1, #12
 80077ec:	200a      	movs	r0, #10
 80077ee:	f7fd fce1 	bl	80051b4 <xQueueGenericCreate>
 80077f2:	4603      	mov	r3, r0
 80077f4:	4a07      	ldr	r2, [pc, #28]	@ (8007814 <prvCheckForValidListAndQueue+0x54>)
 80077f6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <prvCheckForValidListAndQueue+0x54>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007800:	4b04      	ldr	r3, [pc, #16]	@ (8007814 <prvCheckForValidListAndQueue+0x54>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4908      	ldr	r1, [pc, #32]	@ (8007828 <prvCheckForValidListAndQueue+0x68>)
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f936 	bl	8005a78 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800780c:	f000 f998 	bl	8007b40 <vPortExitCritical>
    }
 8007810:	bf00      	nop
 8007812:	bd80      	pop	{r7, pc}
 8007814:	200003ac 	.word	0x200003ac
 8007818:	2000037c 	.word	0x2000037c
 800781c:	20000390 	.word	0x20000390
 8007820:	200003a4 	.word	0x200003a4
 8007824:	200003a8 	.word	0x200003a8
 8007828:	08009118 	.word	0x08009118

0800782c <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <pvTimerGetTimerID+0x2a>
        __asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	60fb      	str	r3, [r7, #12]
    }
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007856:	f000 f941 	bl	8007adc <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007860:	f000 f96e 	bl	8007b40 <vPortExitCritical>

        return pvReturn;
 8007864:	693b      	ldr	r3, [r7, #16]
    }
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3b04      	subs	r3, #4
 8007880:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007888:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3b04      	subs	r3, #4
 800788e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3b04      	subs	r3, #4
 800789e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80078a0:	4a0c      	ldr	r2, [pc, #48]	@ (80078d4 <pxPortInitialiseStack+0x64>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3b14      	subs	r3, #20
 80078aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3b04      	subs	r3, #4
 80078b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f06f 0202 	mvn.w	r2, #2
 80078be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3b20      	subs	r3, #32
 80078c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80078c6:	68fb      	ldr	r3, [r7, #12]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	080078d9 	.word	0x080078d9

080078d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80078e2:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <prvTaskExitError+0x58>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078ea:	d00b      	beq.n	8007904 <prvTaskExitError+0x2c>
        __asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	60fb      	str	r3, [r7, #12]
    }
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <prvTaskExitError+0x28>
        __asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	60bb      	str	r3, [r7, #8]
    }
 8007916:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007918:	bf00      	nop
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0fc      	beq.n	800791a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000040 	.word	0x20000040
	...

08007940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007940:	4b07      	ldr	r3, [pc, #28]	@ (8007960 <pxCurrentTCBConst2>)
 8007942:	6819      	ldr	r1, [r3, #0]
 8007944:	6808      	ldr	r0, [r1, #0]
 8007946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	f380 8809 	msr	PSP, r0
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f04f 0000 	mov.w	r0, #0
 8007956:	f380 8811 	msr	BASEPRI, r0
 800795a:	4770      	bx	lr
 800795c:	f3af 8000 	nop.w

08007960 <pxCurrentTCBConst2>:
 8007960:	20000278 	.word	0x20000278
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007968:	4808      	ldr	r0, [pc, #32]	@ (800798c <prvPortStartFirstTask+0x24>)
 800796a:	6800      	ldr	r0, [r0, #0]
 800796c:	6800      	ldr	r0, [r0, #0]
 800796e:	f380 8808 	msr	MSP, r0
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f380 8814 	msr	CONTROL, r0
 800797a:	b662      	cpsie	i
 800797c:	b661      	cpsie	f
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	df00      	svc	0
 8007988:	bf00      	nop
 800798a:	0000      	.short	0x0000
 800798c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop

08007994 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800799a:	4b47      	ldr	r3, [pc, #284]	@ (8007ab8 <xPortStartScheduler+0x124>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a47      	ldr	r2, [pc, #284]	@ (8007abc <xPortStartScheduler+0x128>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d10b      	bne.n	80079bc <xPortStartScheduler+0x28>
        __asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	60fb      	str	r3, [r7, #12]
    }
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079bc:	4b3e      	ldr	r3, [pc, #248]	@ (8007ab8 <xPortStartScheduler+0x124>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ac0 <xPortStartScheduler+0x12c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d10b      	bne.n	80079de <xPortStartScheduler+0x4a>
        __asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	613b      	str	r3, [r7, #16]
    }
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	e7fd      	b.n	80079da <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079de:	4b39      	ldr	r3, [pc, #228]	@ (8007ac4 <xPortStartScheduler+0x130>)
 80079e0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	22ff      	movs	r2, #255	@ 0xff
 80079ee:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	4b31      	ldr	r3, [pc, #196]	@ (8007ac8 <xPortStartScheduler+0x134>)
 8007a04:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a06:	4b31      	ldr	r3, [pc, #196]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a08:	2207      	movs	r2, #7
 8007a0a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a0c:	e009      	b.n	8007a22 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8007a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	4a2d      	ldr	r2, [pc, #180]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a16:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2a:	2b80      	cmp	r3, #128	@ 0x80
 8007a2c:	d0ef      	beq.n	8007a0e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a2e:	4b27      	ldr	r3, [pc, #156]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f1c3 0307 	rsb	r3, r3, #7
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d00b      	beq.n	8007a52 <xPortStartScheduler+0xbe>
        __asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	60bb      	str	r3, [r7, #8]
    }
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a52:	4b1e      	ldr	r3, [pc, #120]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	4a1c      	ldr	r2, [pc, #112]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a5a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a64:	4a19      	ldr	r2, [pc, #100]	@ (8007acc <xPortStartScheduler+0x138>)
 8007a66:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007a70:	4b17      	ldr	r3, [pc, #92]	@ (8007ad0 <xPortStartScheduler+0x13c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a16      	ldr	r2, [pc, #88]	@ (8007ad0 <xPortStartScheduler+0x13c>)
 8007a76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007a7c:	4b14      	ldr	r3, [pc, #80]	@ (8007ad0 <xPortStartScheduler+0x13c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a13      	ldr	r2, [pc, #76]	@ (8007ad0 <xPortStartScheduler+0x13c>)
 8007a82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007a88:	f000 f8e0 	bl	8007c4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007a8c:	4b11      	ldr	r3, [pc, #68]	@ (8007ad4 <xPortStartScheduler+0x140>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007a92:	f000 f8ff 	bl	8007c94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a96:	4b10      	ldr	r3, [pc, #64]	@ (8007ad8 <xPortStartScheduler+0x144>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8007ad8 <xPortStartScheduler+0x144>)
 8007a9c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007aa0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007aa2:	f7ff ff61 	bl	8007968 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007aa6:	f7fe fc67 	bl	8006378 <vTaskSwitchContext>
    prvTaskExitError();
 8007aaa:	f7ff ff15 	bl	80078d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	e000ed00 	.word	0xe000ed00
 8007abc:	410fc271 	.word	0x410fc271
 8007ac0:	410fc270 	.word	0x410fc270
 8007ac4:	e000e400 	.word	0xe000e400
 8007ac8:	200003b8 	.word	0x200003b8
 8007acc:	200003bc 	.word	0x200003bc
 8007ad0:	e000ed20 	.word	0xe000ed20
 8007ad4:	20000040 	.word	0x20000040
 8007ad8:	e000ef34 	.word	0xe000ef34

08007adc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
        __asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
    }
 8007af4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007af6:	4b10      	ldr	r3, [pc, #64]	@ (8007b38 <vPortEnterCritical+0x5c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	4a0e      	ldr	r2, [pc, #56]	@ (8007b38 <vPortEnterCritical+0x5c>)
 8007afe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007b00:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <vPortEnterCritical+0x5c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d110      	bne.n	8007b2a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b08:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <vPortEnterCritical+0x60>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <vPortEnterCritical+0x4e>
        __asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	603b      	str	r3, [r7, #0]
    }
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	e7fd      	b.n	8007b26 <vPortEnterCritical+0x4a>
    }
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	20000040 	.word	0x20000040
 8007b3c:	e000ed04 	.word	0xe000ed04

08007b40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007b46:	4b12      	ldr	r3, [pc, #72]	@ (8007b90 <vPortExitCritical+0x50>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <vPortExitCritical+0x26>
        __asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
    }
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007b66:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <vPortExitCritical+0x50>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	4a08      	ldr	r2, [pc, #32]	@ (8007b90 <vPortExitCritical+0x50>)
 8007b6e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007b70:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <vPortExitCritical+0x50>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d105      	bne.n	8007b84 <vPortExitCritical+0x44>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	f383 8811 	msr	BASEPRI, r3
    }
 8007b82:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	20000040 	.word	0x20000040
	...

08007ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007ba0:	f3ef 8009 	mrs	r0, PSP
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	4b15      	ldr	r3, [pc, #84]	@ (8007c00 <pxCurrentTCBConst>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	f01e 0f10 	tst.w	lr, #16
 8007bb0:	bf08      	it	eq
 8007bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bba:	6010      	str	r0, [r2, #0]
 8007bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007bc4:	f380 8811 	msr	BASEPRI, r0
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f7fe fbd2 	bl	8006378 <vTaskSwitchContext>
 8007bd4:	f04f 0000 	mov.w	r0, #0
 8007bd8:	f380 8811 	msr	BASEPRI, r0
 8007bdc:	bc09      	pop	{r0, r3}
 8007bde:	6819      	ldr	r1, [r3, #0]
 8007be0:	6808      	ldr	r0, [r1, #0]
 8007be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be6:	f01e 0f10 	tst.w	lr, #16
 8007bea:	bf08      	it	eq
 8007bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bf0:	f380 8809 	msr	PSP, r0
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst>:
 8007c00:	20000278 	.word	0x20000278
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
        __asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
    }
 8007c20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007c22:	f7fe fa91 	bl	8006148 <xTaskIncrementTick>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <SysTick_Handler+0x40>)
 8007c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
    }
 8007c3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c50:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c56:	4b0b      	ldr	r3, [pc, #44]	@ (8007c84 <vPortSetupTimerInterrupt+0x38>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <vPortSetupTimerInterrupt+0x3c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0a      	ldr	r2, [pc, #40]	@ (8007c8c <vPortSetupTimerInterrupt+0x40>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	4a09      	ldr	r2, [pc, #36]	@ (8007c90 <vPortSetupTimerInterrupt+0x44>)
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c6e:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c70:	2207      	movs	r2, #7
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	e000e010 	.word	0xe000e010
 8007c84:	e000e018 	.word	0xe000e018
 8007c88:	20000034 	.word	0x20000034
 8007c8c:	10624dd3 	.word	0x10624dd3
 8007c90:	e000e014 	.word	0xe000e014

08007c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ca4 <vPortEnableVFP+0x10>
 8007c98:	6801      	ldr	r1, [r0, #0]
 8007c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c9e:	6001      	str	r1, [r0, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	0000      	.short	0x0000
 8007ca4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop

08007cac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007cb2:	f3ef 8305 	mrs	r3, IPSR
 8007cb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	d915      	bls.n	8007cea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cbe:	4a18      	ldr	r2, [pc, #96]	@ (8007d20 <vPortValidateInterruptPriority+0x74>)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cc8:	4b16      	ldr	r3, [pc, #88]	@ (8007d24 <vPortValidateInterruptPriority+0x78>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	7afa      	ldrb	r2, [r7, #11]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d20b      	bcs.n	8007cea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	607b      	str	r3, [r7, #4]
    }
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop
 8007ce8:	e7fd      	b.n	8007ce6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cea:	4b0f      	ldr	r3, [pc, #60]	@ (8007d28 <vPortValidateInterruptPriority+0x7c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d2c <vPortValidateInterruptPriority+0x80>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d90b      	bls.n	8007d12 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	603b      	str	r3, [r7, #0]
    }
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	e7fd      	b.n	8007d0e <vPortValidateInterruptPriority+0x62>
    }
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	e000e3f0 	.word	0xe000e3f0
 8007d24:	200003b8 	.word	0x200003b8
 8007d28:	e000ed0c 	.word	0xe000ed0c
 8007d2c:	200003bc 	.word	0x200003bc

08007d30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08a      	sub	sp, #40	@ 0x28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007d3c:	f7fe f8de 	bl	8005efc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007d40:	4b54      	ldr	r3, [pc, #336]	@ (8007e94 <pvPortMalloc+0x164>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007d48:	f000 f908 	bl	8007f5c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d012      	beq.n	8007d78 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007d52:	2208      	movs	r2, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	43db      	mvns	r3, r3
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d804      	bhi.n	8007d74 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	4413      	add	r3, r2
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	e001      	b.n	8007d78 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	db71      	blt.n	8007e62 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d06e      	beq.n	8007e62 <pvPortMalloc+0x132>
 8007d84:	4b44      	ldr	r3, [pc, #272]	@ (8007e98 <pvPortMalloc+0x168>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d869      	bhi.n	8007e62 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007d8e:	4b43      	ldr	r3, [pc, #268]	@ (8007e9c <pvPortMalloc+0x16c>)
 8007d90:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007d92:	4b42      	ldr	r3, [pc, #264]	@ (8007e9c <pvPortMalloc+0x16c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d98:	e004      	b.n	8007da4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d903      	bls.n	8007db6 <pvPortMalloc+0x86>
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f1      	bne.n	8007d9a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007db6:	4b37      	ldr	r3, [pc, #220]	@ (8007e94 <pvPortMalloc+0x164>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d050      	beq.n	8007e62 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	4413      	add	r3, r2
 8007dc8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	2308      	movs	r3, #8
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d920      	bls.n	8007e24 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4413      	add	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <pvPortMalloc+0xdc>
        __asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	613b      	str	r3, [r7, #16]
    }
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	e7fd      	b.n	8007e08 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e1e:	6978      	ldr	r0, [r7, #20]
 8007e20:	f000 f8f8 	bl	8008014 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e24:	4b1c      	ldr	r3, [pc, #112]	@ (8007e98 <pvPortMalloc+0x168>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e98 <pvPortMalloc+0x168>)
 8007e30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e32:	4b19      	ldr	r3, [pc, #100]	@ (8007e98 <pvPortMalloc+0x168>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea0 <pvPortMalloc+0x170>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d203      	bcs.n	8007e46 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e3e:	4b16      	ldr	r3, [pc, #88]	@ (8007e98 <pvPortMalloc+0x168>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a17      	ldr	r2, [pc, #92]	@ (8007ea0 <pvPortMalloc+0x170>)
 8007e44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007e58:	4b12      	ldr	r3, [pc, #72]	@ (8007ea4 <pvPortMalloc+0x174>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	4a11      	ldr	r2, [pc, #68]	@ (8007ea4 <pvPortMalloc+0x174>)
 8007e60:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007e62:	f7fe f859 	bl	8005f18 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <pvPortMalloc+0x158>
        __asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	60fb      	str	r3, [r7, #12]
    }
 8007e82:	bf00      	nop
 8007e84:	bf00      	nop
 8007e86:	e7fd      	b.n	8007e84 <pvPortMalloc+0x154>
    return pvReturn;
 8007e88:	69fb      	ldr	r3, [r7, #28]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3728      	adds	r7, #40	@ 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20012fc8 	.word	0x20012fc8
 8007e98:	20012fcc 	.word	0x20012fcc
 8007e9c:	20012fc0 	.word	0x20012fc0
 8007ea0:	20012fd0 	.word	0x20012fd0
 8007ea4:	20012fd4 	.word	0x20012fd4

08007ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d047      	beq.n	8007f4a <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007eba:	2308      	movs	r3, #8
 8007ebc:	425b      	negs	r3, r3
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	db0b      	blt.n	8007ee8 <vPortFree+0x40>
        __asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60fb      	str	r3, [r7, #12]
    }
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
 8007ee6:	e7fd      	b.n	8007ee4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <vPortFree+0x60>
        __asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	60bb      	str	r3, [r7, #8]
    }
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	da1c      	bge.n	8007f4a <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d118      	bne.n	8007f4a <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007f24:	f7fd ffea 	bl	8005efc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	4b09      	ldr	r3, [pc, #36]	@ (8007f54 <vPortFree+0xac>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4413      	add	r3, r2
 8007f32:	4a08      	ldr	r2, [pc, #32]	@ (8007f54 <vPortFree+0xac>)
 8007f34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f36:	6938      	ldr	r0, [r7, #16]
 8007f38:	f000 f86c 	bl	8008014 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007f3c:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <vPortFree+0xb0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	4a05      	ldr	r2, [pc, #20]	@ (8007f58 <vPortFree+0xb0>)
 8007f44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007f46:	f7fd ffe7 	bl	8005f18 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20012fcc 	.word	0x20012fcc
 8007f58:	20012fd8 	.word	0x20012fd8

08007f5c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f62:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8007f66:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007f68:	4b25      	ldr	r3, [pc, #148]	@ (8008000 <prvHeapInit+0xa4>)
 8007f6a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00c      	beq.n	8007f90 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3307      	adds	r3, #7
 8007f7a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0307 	bic.w	r3, r3, #7
 8007f82:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008000 <prvHeapInit+0xa4>)
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f94:	4a1b      	ldr	r2, [pc, #108]	@ (8008004 <prvHeapInit+0xa8>)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008004 <prvHeapInit+0xa8>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007fa8:	2208      	movs	r2, #8
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0307 	bic.w	r3, r3, #7
 8007fb6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a13      	ldr	r2, [pc, #76]	@ (8008008 <prvHeapInit+0xac>)
 8007fbc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007fbe:	4b12      	ldr	r3, [pc, #72]	@ (8008008 <prvHeapInit+0xac>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007fc6:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <prvHeapInit+0xac>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	1ad2      	subs	r2, r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008008 <prvHeapInit+0xac>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a08      	ldr	r2, [pc, #32]	@ (800800c <prvHeapInit+0xb0>)
 8007fea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	4a07      	ldr	r2, [pc, #28]	@ (8008010 <prvHeapInit+0xb4>)
 8007ff2:	6013      	str	r3, [r2, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	200003c0 	.word	0x200003c0
 8008004:	20012fc0 	.word	0x20012fc0
 8008008:	20012fc8 	.word	0x20012fc8
 800800c:	20012fd0 	.word	0x20012fd0
 8008010:	20012fcc 	.word	0x20012fcc

08008014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800801c:	4b28      	ldr	r3, [pc, #160]	@ (80080c0 <prvInsertBlockIntoFreeList+0xac>)
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	e002      	b.n	8008028 <prvInsertBlockIntoFreeList+0x14>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	d8f7      	bhi.n	8008022 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d108      	bne.n	8008056 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	441a      	add	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	441a      	add	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d118      	bne.n	800809c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d00d      	beq.n	8008092 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	441a      	add	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e008      	b.n	80080a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e003      	b.n	80080a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d002      	beq.n	80080b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20012fc0 	.word	0x20012fc0
 80080c4:	20012fc8 	.word	0x20012fc8

080080c8 <sniprintf>:
 80080c8:	b40c      	push	{r2, r3}
 80080ca:	b530      	push	{r4, r5, lr}
 80080cc:	4b18      	ldr	r3, [pc, #96]	@ (8008130 <sniprintf+0x68>)
 80080ce:	1e0c      	subs	r4, r1, #0
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	b09d      	sub	sp, #116	@ 0x74
 80080d4:	da08      	bge.n	80080e8 <sniprintf+0x20>
 80080d6:	238b      	movs	r3, #139	@ 0x8b
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080de:	b01d      	add	sp, #116	@ 0x74
 80080e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080e4:	b002      	add	sp, #8
 80080e6:	4770      	bx	lr
 80080e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80080ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80080f6:	bf14      	ite	ne
 80080f8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80080fc:	4623      	moveq	r3, r4
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	9307      	str	r3, [sp, #28]
 8008102:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008106:	9002      	str	r0, [sp, #8]
 8008108:	9006      	str	r0, [sp, #24]
 800810a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800810e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008110:	ab21      	add	r3, sp, #132	@ 0x84
 8008112:	a902      	add	r1, sp, #8
 8008114:	4628      	mov	r0, r5
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	f000 f9a2 	bl	8008460 <_svfiprintf_r>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	bfbc      	itt	lt
 8008120:	238b      	movlt	r3, #139	@ 0x8b
 8008122:	602b      	strlt	r3, [r5, #0]
 8008124:	2c00      	cmp	r4, #0
 8008126:	d0da      	beq.n	80080de <sniprintf+0x16>
 8008128:	9b02      	ldr	r3, [sp, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e7d6      	b.n	80080de <sniprintf+0x16>
 8008130:	20000044 	.word	0x20000044

08008134 <memset>:
 8008134:	4402      	add	r2, r0
 8008136:	4603      	mov	r3, r0
 8008138:	4293      	cmp	r3, r2
 800813a:	d100      	bne.n	800813e <memset+0xa>
 800813c:	4770      	bx	lr
 800813e:	f803 1b01 	strb.w	r1, [r3], #1
 8008142:	e7f9      	b.n	8008138 <memset+0x4>

08008144 <__errno>:
 8008144:	4b01      	ldr	r3, [pc, #4]	@ (800814c <__errno+0x8>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	20000044 	.word	0x20000044

08008150 <__libc_init_array>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	4d0d      	ldr	r5, [pc, #52]	@ (8008188 <__libc_init_array+0x38>)
 8008154:	4c0d      	ldr	r4, [pc, #52]	@ (800818c <__libc_init_array+0x3c>)
 8008156:	1b64      	subs	r4, r4, r5
 8008158:	10a4      	asrs	r4, r4, #2
 800815a:	2600      	movs	r6, #0
 800815c:	42a6      	cmp	r6, r4
 800815e:	d109      	bne.n	8008174 <__libc_init_array+0x24>
 8008160:	4d0b      	ldr	r5, [pc, #44]	@ (8008190 <__libc_init_array+0x40>)
 8008162:	4c0c      	ldr	r4, [pc, #48]	@ (8008194 <__libc_init_array+0x44>)
 8008164:	f000 fc64 	bl	8008a30 <_init>
 8008168:	1b64      	subs	r4, r4, r5
 800816a:	10a4      	asrs	r4, r4, #2
 800816c:	2600      	movs	r6, #0
 800816e:	42a6      	cmp	r6, r4
 8008170:	d105      	bne.n	800817e <__libc_init_array+0x2e>
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	f855 3b04 	ldr.w	r3, [r5], #4
 8008178:	4798      	blx	r3
 800817a:	3601      	adds	r6, #1
 800817c:	e7ee      	b.n	800815c <__libc_init_array+0xc>
 800817e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008182:	4798      	blx	r3
 8008184:	3601      	adds	r6, #1
 8008186:	e7f2      	b.n	800816e <__libc_init_array+0x1e>
 8008188:	080091c0 	.word	0x080091c0
 800818c:	080091c0 	.word	0x080091c0
 8008190:	080091c0 	.word	0x080091c0
 8008194:	080091cc 	.word	0x080091cc

08008198 <__retarget_lock_acquire_recursive>:
 8008198:	4770      	bx	lr

0800819a <__retarget_lock_release_recursive>:
 800819a:	4770      	bx	lr

0800819c <memcpy>:
 800819c:	440a      	add	r2, r1
 800819e:	4291      	cmp	r1, r2
 80081a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80081a4:	d100      	bne.n	80081a8 <memcpy+0xc>
 80081a6:	4770      	bx	lr
 80081a8:	b510      	push	{r4, lr}
 80081aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081b2:	4291      	cmp	r1, r2
 80081b4:	d1f9      	bne.n	80081aa <memcpy+0xe>
 80081b6:	bd10      	pop	{r4, pc}

080081b8 <_free_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4605      	mov	r5, r0
 80081bc:	2900      	cmp	r1, #0
 80081be:	d041      	beq.n	8008244 <_free_r+0x8c>
 80081c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c4:	1f0c      	subs	r4, r1, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	18e4      	addlt	r4, r4, r3
 80081cc:	f000 f8e0 	bl	8008390 <__malloc_lock>
 80081d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <_free_r+0x90>)
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	b933      	cbnz	r3, 80081e4 <_free_r+0x2c>
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	6014      	str	r4, [r2, #0]
 80081da:	4628      	mov	r0, r5
 80081dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e0:	f000 b8dc 	b.w	800839c <__malloc_unlock>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d908      	bls.n	80081fa <_free_r+0x42>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	1821      	adds	r1, r4, r0
 80081ec:	428b      	cmp	r3, r1
 80081ee:	bf01      	itttt	eq
 80081f0:	6819      	ldreq	r1, [r3, #0]
 80081f2:	685b      	ldreq	r3, [r3, #4]
 80081f4:	1809      	addeq	r1, r1, r0
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	e7ed      	b.n	80081d6 <_free_r+0x1e>
 80081fa:	461a      	mov	r2, r3
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b10b      	cbz	r3, 8008204 <_free_r+0x4c>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x42>
 8008204:	6811      	ldr	r1, [r2, #0]
 8008206:	1850      	adds	r0, r2, r1
 8008208:	42a0      	cmp	r0, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x6c>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	4401      	add	r1, r0
 8008210:	1850      	adds	r0, r2, r1
 8008212:	4283      	cmp	r3, r0
 8008214:	6011      	str	r1, [r2, #0]
 8008216:	d1e0      	bne.n	80081da <_free_r+0x22>
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	6053      	str	r3, [r2, #4]
 800821e:	4408      	add	r0, r1
 8008220:	6010      	str	r0, [r2, #0]
 8008222:	e7da      	b.n	80081da <_free_r+0x22>
 8008224:	d902      	bls.n	800822c <_free_r+0x74>
 8008226:	230c      	movs	r3, #12
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	e7d6      	b.n	80081da <_free_r+0x22>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	1821      	adds	r1, r4, r0
 8008230:	428b      	cmp	r3, r1
 8008232:	bf04      	itt	eq
 8008234:	6819      	ldreq	r1, [r3, #0]
 8008236:	685b      	ldreq	r3, [r3, #4]
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	bf04      	itt	eq
 800823c:	1809      	addeq	r1, r1, r0
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	6054      	str	r4, [r2, #4]
 8008242:	e7ca      	b.n	80081da <_free_r+0x22>
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	bf00      	nop
 8008248:	20013120 	.word	0x20013120

0800824c <sbrk_aligned>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4e0f      	ldr	r6, [pc, #60]	@ (800828c <sbrk_aligned+0x40>)
 8008250:	460c      	mov	r4, r1
 8008252:	6831      	ldr	r1, [r6, #0]
 8008254:	4605      	mov	r5, r0
 8008256:	b911      	cbnz	r1, 800825e <sbrk_aligned+0x12>
 8008258:	f000 fba4 	bl	80089a4 <_sbrk_r>
 800825c:	6030      	str	r0, [r6, #0]
 800825e:	4621      	mov	r1, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f000 fb9f 	bl	80089a4 <_sbrk_r>
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	d103      	bne.n	8008272 <sbrk_aligned+0x26>
 800826a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800826e:	4620      	mov	r0, r4
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	1cc4      	adds	r4, r0, #3
 8008274:	f024 0403 	bic.w	r4, r4, #3
 8008278:	42a0      	cmp	r0, r4
 800827a:	d0f8      	beq.n	800826e <sbrk_aligned+0x22>
 800827c:	1a21      	subs	r1, r4, r0
 800827e:	4628      	mov	r0, r5
 8008280:	f000 fb90 	bl	80089a4 <_sbrk_r>
 8008284:	3001      	adds	r0, #1
 8008286:	d1f2      	bne.n	800826e <sbrk_aligned+0x22>
 8008288:	e7ef      	b.n	800826a <sbrk_aligned+0x1e>
 800828a:	bf00      	nop
 800828c:	2001311c 	.word	0x2001311c

08008290 <_malloc_r>:
 8008290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008294:	1ccd      	adds	r5, r1, #3
 8008296:	f025 0503 	bic.w	r5, r5, #3
 800829a:	3508      	adds	r5, #8
 800829c:	2d0c      	cmp	r5, #12
 800829e:	bf38      	it	cc
 80082a0:	250c      	movcc	r5, #12
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	4606      	mov	r6, r0
 80082a6:	db01      	blt.n	80082ac <_malloc_r+0x1c>
 80082a8:	42a9      	cmp	r1, r5
 80082aa:	d904      	bls.n	80082b6 <_malloc_r+0x26>
 80082ac:	230c      	movs	r3, #12
 80082ae:	6033      	str	r3, [r6, #0]
 80082b0:	2000      	movs	r0, #0
 80082b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800838c <_malloc_r+0xfc>
 80082ba:	f000 f869 	bl	8008390 <__malloc_lock>
 80082be:	f8d8 3000 	ldr.w	r3, [r8]
 80082c2:	461c      	mov	r4, r3
 80082c4:	bb44      	cbnz	r4, 8008318 <_malloc_r+0x88>
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff ffbf 	bl	800824c <sbrk_aligned>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	4604      	mov	r4, r0
 80082d2:	d158      	bne.n	8008386 <_malloc_r+0xf6>
 80082d4:	f8d8 4000 	ldr.w	r4, [r8]
 80082d8:	4627      	mov	r7, r4
 80082da:	2f00      	cmp	r7, #0
 80082dc:	d143      	bne.n	8008366 <_malloc_r+0xd6>
 80082de:	2c00      	cmp	r4, #0
 80082e0:	d04b      	beq.n	800837a <_malloc_r+0xea>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	4639      	mov	r1, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	eb04 0903 	add.w	r9, r4, r3
 80082ec:	f000 fb5a 	bl	80089a4 <_sbrk_r>
 80082f0:	4581      	cmp	r9, r0
 80082f2:	d142      	bne.n	800837a <_malloc_r+0xea>
 80082f4:	6821      	ldr	r1, [r4, #0]
 80082f6:	1a6d      	subs	r5, r5, r1
 80082f8:	4629      	mov	r1, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff ffa6 	bl	800824c <sbrk_aligned>
 8008300:	3001      	adds	r0, #1
 8008302:	d03a      	beq.n	800837a <_malloc_r+0xea>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	442b      	add	r3, r5
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	bb62      	cbnz	r2, 800836c <_malloc_r+0xdc>
 8008312:	f8c8 7000 	str.w	r7, [r8]
 8008316:	e00f      	b.n	8008338 <_malloc_r+0xa8>
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	1b52      	subs	r2, r2, r5
 800831c:	d420      	bmi.n	8008360 <_malloc_r+0xd0>
 800831e:	2a0b      	cmp	r2, #11
 8008320:	d917      	bls.n	8008352 <_malloc_r+0xc2>
 8008322:	1961      	adds	r1, r4, r5
 8008324:	42a3      	cmp	r3, r4
 8008326:	6025      	str	r5, [r4, #0]
 8008328:	bf18      	it	ne
 800832a:	6059      	strne	r1, [r3, #4]
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	bf08      	it	eq
 8008330:	f8c8 1000 	streq.w	r1, [r8]
 8008334:	5162      	str	r2, [r4, r5]
 8008336:	604b      	str	r3, [r1, #4]
 8008338:	4630      	mov	r0, r6
 800833a:	f000 f82f 	bl	800839c <__malloc_unlock>
 800833e:	f104 000b 	add.w	r0, r4, #11
 8008342:	1d23      	adds	r3, r4, #4
 8008344:	f020 0007 	bic.w	r0, r0, #7
 8008348:	1ac2      	subs	r2, r0, r3
 800834a:	bf1c      	itt	ne
 800834c:	1a1b      	subne	r3, r3, r0
 800834e:	50a3      	strne	r3, [r4, r2]
 8008350:	e7af      	b.n	80082b2 <_malloc_r+0x22>
 8008352:	6862      	ldr	r2, [r4, #4]
 8008354:	42a3      	cmp	r3, r4
 8008356:	bf0c      	ite	eq
 8008358:	f8c8 2000 	streq.w	r2, [r8]
 800835c:	605a      	strne	r2, [r3, #4]
 800835e:	e7eb      	b.n	8008338 <_malloc_r+0xa8>
 8008360:	4623      	mov	r3, r4
 8008362:	6864      	ldr	r4, [r4, #4]
 8008364:	e7ae      	b.n	80082c4 <_malloc_r+0x34>
 8008366:	463c      	mov	r4, r7
 8008368:	687f      	ldr	r7, [r7, #4]
 800836a:	e7b6      	b.n	80082da <_malloc_r+0x4a>
 800836c:	461a      	mov	r2, r3
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	42a3      	cmp	r3, r4
 8008372:	d1fb      	bne.n	800836c <_malloc_r+0xdc>
 8008374:	2300      	movs	r3, #0
 8008376:	6053      	str	r3, [r2, #4]
 8008378:	e7de      	b.n	8008338 <_malloc_r+0xa8>
 800837a:	230c      	movs	r3, #12
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	4630      	mov	r0, r6
 8008380:	f000 f80c 	bl	800839c <__malloc_unlock>
 8008384:	e794      	b.n	80082b0 <_malloc_r+0x20>
 8008386:	6005      	str	r5, [r0, #0]
 8008388:	e7d6      	b.n	8008338 <_malloc_r+0xa8>
 800838a:	bf00      	nop
 800838c:	20013120 	.word	0x20013120

08008390 <__malloc_lock>:
 8008390:	4801      	ldr	r0, [pc, #4]	@ (8008398 <__malloc_lock+0x8>)
 8008392:	f7ff bf01 	b.w	8008198 <__retarget_lock_acquire_recursive>
 8008396:	bf00      	nop
 8008398:	20013118 	.word	0x20013118

0800839c <__malloc_unlock>:
 800839c:	4801      	ldr	r0, [pc, #4]	@ (80083a4 <__malloc_unlock+0x8>)
 800839e:	f7ff befc 	b.w	800819a <__retarget_lock_release_recursive>
 80083a2:	bf00      	nop
 80083a4:	20013118 	.word	0x20013118

080083a8 <__ssputs_r>:
 80083a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	688e      	ldr	r6, [r1, #8]
 80083ae:	461f      	mov	r7, r3
 80083b0:	42be      	cmp	r6, r7
 80083b2:	680b      	ldr	r3, [r1, #0]
 80083b4:	4682      	mov	sl, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	4690      	mov	r8, r2
 80083ba:	d82d      	bhi.n	8008418 <__ssputs_r+0x70>
 80083bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083c4:	d026      	beq.n	8008414 <__ssputs_r+0x6c>
 80083c6:	6965      	ldr	r5, [r4, #20]
 80083c8:	6909      	ldr	r1, [r1, #16]
 80083ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083ce:	eba3 0901 	sub.w	r9, r3, r1
 80083d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083d6:	1c7b      	adds	r3, r7, #1
 80083d8:	444b      	add	r3, r9
 80083da:	106d      	asrs	r5, r5, #1
 80083dc:	429d      	cmp	r5, r3
 80083de:	bf38      	it	cc
 80083e0:	461d      	movcc	r5, r3
 80083e2:	0553      	lsls	r3, r2, #21
 80083e4:	d527      	bpl.n	8008436 <__ssputs_r+0x8e>
 80083e6:	4629      	mov	r1, r5
 80083e8:	f7ff ff52 	bl	8008290 <_malloc_r>
 80083ec:	4606      	mov	r6, r0
 80083ee:	b360      	cbz	r0, 800844a <__ssputs_r+0xa2>
 80083f0:	6921      	ldr	r1, [r4, #16]
 80083f2:	464a      	mov	r2, r9
 80083f4:	f7ff fed2 	bl	800819c <memcpy>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	6126      	str	r6, [r4, #16]
 8008406:	6165      	str	r5, [r4, #20]
 8008408:	444e      	add	r6, r9
 800840a:	eba5 0509 	sub.w	r5, r5, r9
 800840e:	6026      	str	r6, [r4, #0]
 8008410:	60a5      	str	r5, [r4, #8]
 8008412:	463e      	mov	r6, r7
 8008414:	42be      	cmp	r6, r7
 8008416:	d900      	bls.n	800841a <__ssputs_r+0x72>
 8008418:	463e      	mov	r6, r7
 800841a:	6820      	ldr	r0, [r4, #0]
 800841c:	4632      	mov	r2, r6
 800841e:	4641      	mov	r1, r8
 8008420:	f000 faa6 	bl	8008970 <memmove>
 8008424:	68a3      	ldr	r3, [r4, #8]
 8008426:	1b9b      	subs	r3, r3, r6
 8008428:	60a3      	str	r3, [r4, #8]
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	4433      	add	r3, r6
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	2000      	movs	r0, #0
 8008432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008436:	462a      	mov	r2, r5
 8008438:	f000 fac4 	bl	80089c4 <_realloc_r>
 800843c:	4606      	mov	r6, r0
 800843e:	2800      	cmp	r0, #0
 8008440:	d1e0      	bne.n	8008404 <__ssputs_r+0x5c>
 8008442:	6921      	ldr	r1, [r4, #16]
 8008444:	4650      	mov	r0, sl
 8008446:	f7ff feb7 	bl	80081b8 <_free_r>
 800844a:	230c      	movs	r3, #12
 800844c:	f8ca 3000 	str.w	r3, [sl]
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800845c:	e7e9      	b.n	8008432 <__ssputs_r+0x8a>
	...

08008460 <_svfiprintf_r>:
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	4698      	mov	r8, r3
 8008466:	898b      	ldrh	r3, [r1, #12]
 8008468:	061b      	lsls	r3, r3, #24
 800846a:	b09d      	sub	sp, #116	@ 0x74
 800846c:	4607      	mov	r7, r0
 800846e:	460d      	mov	r5, r1
 8008470:	4614      	mov	r4, r2
 8008472:	d510      	bpl.n	8008496 <_svfiprintf_r+0x36>
 8008474:	690b      	ldr	r3, [r1, #16]
 8008476:	b973      	cbnz	r3, 8008496 <_svfiprintf_r+0x36>
 8008478:	2140      	movs	r1, #64	@ 0x40
 800847a:	f7ff ff09 	bl	8008290 <_malloc_r>
 800847e:	6028      	str	r0, [r5, #0]
 8008480:	6128      	str	r0, [r5, #16]
 8008482:	b930      	cbnz	r0, 8008492 <_svfiprintf_r+0x32>
 8008484:	230c      	movs	r3, #12
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800848c:	b01d      	add	sp, #116	@ 0x74
 800848e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008492:	2340      	movs	r3, #64	@ 0x40
 8008494:	616b      	str	r3, [r5, #20]
 8008496:	2300      	movs	r3, #0
 8008498:	9309      	str	r3, [sp, #36]	@ 0x24
 800849a:	2320      	movs	r3, #32
 800849c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a4:	2330      	movs	r3, #48	@ 0x30
 80084a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008644 <_svfiprintf_r+0x1e4>
 80084aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084ae:	f04f 0901 	mov.w	r9, #1
 80084b2:	4623      	mov	r3, r4
 80084b4:	469a      	mov	sl, r3
 80084b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ba:	b10a      	cbz	r2, 80084c0 <_svfiprintf_r+0x60>
 80084bc:	2a25      	cmp	r2, #37	@ 0x25
 80084be:	d1f9      	bne.n	80084b4 <_svfiprintf_r+0x54>
 80084c0:	ebba 0b04 	subs.w	fp, sl, r4
 80084c4:	d00b      	beq.n	80084de <_svfiprintf_r+0x7e>
 80084c6:	465b      	mov	r3, fp
 80084c8:	4622      	mov	r2, r4
 80084ca:	4629      	mov	r1, r5
 80084cc:	4638      	mov	r0, r7
 80084ce:	f7ff ff6b 	bl	80083a8 <__ssputs_r>
 80084d2:	3001      	adds	r0, #1
 80084d4:	f000 80a7 	beq.w	8008626 <_svfiprintf_r+0x1c6>
 80084d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084da:	445a      	add	r2, fp
 80084dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80084de:	f89a 3000 	ldrb.w	r3, [sl]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 809f 	beq.w	8008626 <_svfiprintf_r+0x1c6>
 80084e8:	2300      	movs	r3, #0
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f2:	f10a 0a01 	add.w	sl, sl, #1
 80084f6:	9304      	str	r3, [sp, #16]
 80084f8:	9307      	str	r3, [sp, #28]
 80084fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008500:	4654      	mov	r4, sl
 8008502:	2205      	movs	r2, #5
 8008504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008508:	484e      	ldr	r0, [pc, #312]	@ (8008644 <_svfiprintf_r+0x1e4>)
 800850a:	f7f7 fe99 	bl	8000240 <memchr>
 800850e:	9a04      	ldr	r2, [sp, #16]
 8008510:	b9d8      	cbnz	r0, 800854a <_svfiprintf_r+0xea>
 8008512:	06d0      	lsls	r0, r2, #27
 8008514:	bf44      	itt	mi
 8008516:	2320      	movmi	r3, #32
 8008518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800851c:	0711      	lsls	r1, r2, #28
 800851e:	bf44      	itt	mi
 8008520:	232b      	movmi	r3, #43	@ 0x2b
 8008522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008526:	f89a 3000 	ldrb.w	r3, [sl]
 800852a:	2b2a      	cmp	r3, #42	@ 0x2a
 800852c:	d015      	beq.n	800855a <_svfiprintf_r+0xfa>
 800852e:	9a07      	ldr	r2, [sp, #28]
 8008530:	4654      	mov	r4, sl
 8008532:	2000      	movs	r0, #0
 8008534:	f04f 0c0a 	mov.w	ip, #10
 8008538:	4621      	mov	r1, r4
 800853a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800853e:	3b30      	subs	r3, #48	@ 0x30
 8008540:	2b09      	cmp	r3, #9
 8008542:	d94b      	bls.n	80085dc <_svfiprintf_r+0x17c>
 8008544:	b1b0      	cbz	r0, 8008574 <_svfiprintf_r+0x114>
 8008546:	9207      	str	r2, [sp, #28]
 8008548:	e014      	b.n	8008574 <_svfiprintf_r+0x114>
 800854a:	eba0 0308 	sub.w	r3, r0, r8
 800854e:	fa09 f303 	lsl.w	r3, r9, r3
 8008552:	4313      	orrs	r3, r2
 8008554:	9304      	str	r3, [sp, #16]
 8008556:	46a2      	mov	sl, r4
 8008558:	e7d2      	b.n	8008500 <_svfiprintf_r+0xa0>
 800855a:	9b03      	ldr	r3, [sp, #12]
 800855c:	1d19      	adds	r1, r3, #4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	9103      	str	r1, [sp, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfbb      	ittet	lt
 8008566:	425b      	neglt	r3, r3
 8008568:	f042 0202 	orrlt.w	r2, r2, #2
 800856c:	9307      	strge	r3, [sp, #28]
 800856e:	9307      	strlt	r3, [sp, #28]
 8008570:	bfb8      	it	lt
 8008572:	9204      	strlt	r2, [sp, #16]
 8008574:	7823      	ldrb	r3, [r4, #0]
 8008576:	2b2e      	cmp	r3, #46	@ 0x2e
 8008578:	d10a      	bne.n	8008590 <_svfiprintf_r+0x130>
 800857a:	7863      	ldrb	r3, [r4, #1]
 800857c:	2b2a      	cmp	r3, #42	@ 0x2a
 800857e:	d132      	bne.n	80085e6 <_svfiprintf_r+0x186>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	1d1a      	adds	r2, r3, #4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	9203      	str	r2, [sp, #12]
 8008588:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800858c:	3402      	adds	r4, #2
 800858e:	9305      	str	r3, [sp, #20]
 8008590:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008654 <_svfiprintf_r+0x1f4>
 8008594:	7821      	ldrb	r1, [r4, #0]
 8008596:	2203      	movs	r2, #3
 8008598:	4650      	mov	r0, sl
 800859a:	f7f7 fe51 	bl	8000240 <memchr>
 800859e:	b138      	cbz	r0, 80085b0 <_svfiprintf_r+0x150>
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	eba0 000a 	sub.w	r0, r0, sl
 80085a6:	2240      	movs	r2, #64	@ 0x40
 80085a8:	4082      	lsls	r2, r0
 80085aa:	4313      	orrs	r3, r2
 80085ac:	3401      	adds	r4, #1
 80085ae:	9304      	str	r3, [sp, #16]
 80085b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b4:	4824      	ldr	r0, [pc, #144]	@ (8008648 <_svfiprintf_r+0x1e8>)
 80085b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085ba:	2206      	movs	r2, #6
 80085bc:	f7f7 fe40 	bl	8000240 <memchr>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d036      	beq.n	8008632 <_svfiprintf_r+0x1d2>
 80085c4:	4b21      	ldr	r3, [pc, #132]	@ (800864c <_svfiprintf_r+0x1ec>)
 80085c6:	bb1b      	cbnz	r3, 8008610 <_svfiprintf_r+0x1b0>
 80085c8:	9b03      	ldr	r3, [sp, #12]
 80085ca:	3307      	adds	r3, #7
 80085cc:	f023 0307 	bic.w	r3, r3, #7
 80085d0:	3308      	adds	r3, #8
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d6:	4433      	add	r3, r6
 80085d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085da:	e76a      	b.n	80084b2 <_svfiprintf_r+0x52>
 80085dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e0:	460c      	mov	r4, r1
 80085e2:	2001      	movs	r0, #1
 80085e4:	e7a8      	b.n	8008538 <_svfiprintf_r+0xd8>
 80085e6:	2300      	movs	r3, #0
 80085e8:	3401      	adds	r4, #1
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	4619      	mov	r1, r3
 80085ee:	f04f 0c0a 	mov.w	ip, #10
 80085f2:	4620      	mov	r0, r4
 80085f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f8:	3a30      	subs	r2, #48	@ 0x30
 80085fa:	2a09      	cmp	r2, #9
 80085fc:	d903      	bls.n	8008606 <_svfiprintf_r+0x1a6>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0c6      	beq.n	8008590 <_svfiprintf_r+0x130>
 8008602:	9105      	str	r1, [sp, #20]
 8008604:	e7c4      	b.n	8008590 <_svfiprintf_r+0x130>
 8008606:	fb0c 2101 	mla	r1, ip, r1, r2
 800860a:	4604      	mov	r4, r0
 800860c:	2301      	movs	r3, #1
 800860e:	e7f0      	b.n	80085f2 <_svfiprintf_r+0x192>
 8008610:	ab03      	add	r3, sp, #12
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	462a      	mov	r2, r5
 8008616:	4b0e      	ldr	r3, [pc, #56]	@ (8008650 <_svfiprintf_r+0x1f0>)
 8008618:	a904      	add	r1, sp, #16
 800861a:	4638      	mov	r0, r7
 800861c:	f3af 8000 	nop.w
 8008620:	1c42      	adds	r2, r0, #1
 8008622:	4606      	mov	r6, r0
 8008624:	d1d6      	bne.n	80085d4 <_svfiprintf_r+0x174>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	065b      	lsls	r3, r3, #25
 800862a:	f53f af2d 	bmi.w	8008488 <_svfiprintf_r+0x28>
 800862e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008630:	e72c      	b.n	800848c <_svfiprintf_r+0x2c>
 8008632:	ab03      	add	r3, sp, #12
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	462a      	mov	r2, r5
 8008638:	4b05      	ldr	r3, [pc, #20]	@ (8008650 <_svfiprintf_r+0x1f0>)
 800863a:	a904      	add	r1, sp, #16
 800863c:	4638      	mov	r0, r7
 800863e:	f000 f879 	bl	8008734 <_printf_i>
 8008642:	e7ed      	b.n	8008620 <_svfiprintf_r+0x1c0>
 8008644:	08009184 	.word	0x08009184
 8008648:	0800918e 	.word	0x0800918e
 800864c:	00000000 	.word	0x00000000
 8008650:	080083a9 	.word	0x080083a9
 8008654:	0800918a 	.word	0x0800918a

08008658 <_printf_common>:
 8008658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	4616      	mov	r6, r2
 800865e:	4698      	mov	r8, r3
 8008660:	688a      	ldr	r2, [r1, #8]
 8008662:	690b      	ldr	r3, [r1, #16]
 8008664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008668:	4293      	cmp	r3, r2
 800866a:	bfb8      	it	lt
 800866c:	4613      	movlt	r3, r2
 800866e:	6033      	str	r3, [r6, #0]
 8008670:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008674:	4607      	mov	r7, r0
 8008676:	460c      	mov	r4, r1
 8008678:	b10a      	cbz	r2, 800867e <_printf_common+0x26>
 800867a:	3301      	adds	r3, #1
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	0699      	lsls	r1, r3, #26
 8008682:	bf42      	ittt	mi
 8008684:	6833      	ldrmi	r3, [r6, #0]
 8008686:	3302      	addmi	r3, #2
 8008688:	6033      	strmi	r3, [r6, #0]
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	f015 0506 	ands.w	r5, r5, #6
 8008690:	d106      	bne.n	80086a0 <_printf_common+0x48>
 8008692:	f104 0a19 	add.w	sl, r4, #25
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	6832      	ldr	r2, [r6, #0]
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	42ab      	cmp	r3, r5
 800869e:	dc26      	bgt.n	80086ee <_printf_common+0x96>
 80086a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	3b00      	subs	r3, #0
 80086a8:	bf18      	it	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	0692      	lsls	r2, r2, #26
 80086ae:	d42b      	bmi.n	8008708 <_printf_common+0xb0>
 80086b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086b4:	4641      	mov	r1, r8
 80086b6:	4638      	mov	r0, r7
 80086b8:	47c8      	blx	r9
 80086ba:	3001      	adds	r0, #1
 80086bc:	d01e      	beq.n	80086fc <_printf_common+0xa4>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	f003 0306 	and.w	r3, r3, #6
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	bf02      	ittt	eq
 80086ca:	68e5      	ldreq	r5, [r4, #12]
 80086cc:	6833      	ldreq	r3, [r6, #0]
 80086ce:	1aed      	subeq	r5, r5, r3
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	bf0c      	ite	eq
 80086d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d8:	2500      	movne	r5, #0
 80086da:	4293      	cmp	r3, r2
 80086dc:	bfc4      	itt	gt
 80086de:	1a9b      	subgt	r3, r3, r2
 80086e0:	18ed      	addgt	r5, r5, r3
 80086e2:	2600      	movs	r6, #0
 80086e4:	341a      	adds	r4, #26
 80086e6:	42b5      	cmp	r5, r6
 80086e8:	d11a      	bne.n	8008720 <_printf_common+0xc8>
 80086ea:	2000      	movs	r0, #0
 80086ec:	e008      	b.n	8008700 <_printf_common+0xa8>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4652      	mov	r2, sl
 80086f2:	4641      	mov	r1, r8
 80086f4:	4638      	mov	r0, r7
 80086f6:	47c8      	blx	r9
 80086f8:	3001      	adds	r0, #1
 80086fa:	d103      	bne.n	8008704 <_printf_common+0xac>
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008704:	3501      	adds	r5, #1
 8008706:	e7c6      	b.n	8008696 <_printf_common+0x3e>
 8008708:	18e1      	adds	r1, r4, r3
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	2030      	movs	r0, #48	@ 0x30
 800870e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008712:	4422      	add	r2, r4
 8008714:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008718:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800871c:	3302      	adds	r3, #2
 800871e:	e7c7      	b.n	80086b0 <_printf_common+0x58>
 8008720:	2301      	movs	r3, #1
 8008722:	4622      	mov	r2, r4
 8008724:	4641      	mov	r1, r8
 8008726:	4638      	mov	r0, r7
 8008728:	47c8      	blx	r9
 800872a:	3001      	adds	r0, #1
 800872c:	d0e6      	beq.n	80086fc <_printf_common+0xa4>
 800872e:	3601      	adds	r6, #1
 8008730:	e7d9      	b.n	80086e6 <_printf_common+0x8e>
	...

08008734 <_printf_i>:
 8008734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	7e0f      	ldrb	r7, [r1, #24]
 800873a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800873c:	2f78      	cmp	r7, #120	@ 0x78
 800873e:	4691      	mov	r9, r2
 8008740:	4680      	mov	r8, r0
 8008742:	460c      	mov	r4, r1
 8008744:	469a      	mov	sl, r3
 8008746:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800874a:	d807      	bhi.n	800875c <_printf_i+0x28>
 800874c:	2f62      	cmp	r7, #98	@ 0x62
 800874e:	d80a      	bhi.n	8008766 <_printf_i+0x32>
 8008750:	2f00      	cmp	r7, #0
 8008752:	f000 80d1 	beq.w	80088f8 <_printf_i+0x1c4>
 8008756:	2f58      	cmp	r7, #88	@ 0x58
 8008758:	f000 80b8 	beq.w	80088cc <_printf_i+0x198>
 800875c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008760:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008764:	e03a      	b.n	80087dc <_printf_i+0xa8>
 8008766:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800876a:	2b15      	cmp	r3, #21
 800876c:	d8f6      	bhi.n	800875c <_printf_i+0x28>
 800876e:	a101      	add	r1, pc, #4	@ (adr r1, 8008774 <_printf_i+0x40>)
 8008770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008774:	080087cd 	.word	0x080087cd
 8008778:	080087e1 	.word	0x080087e1
 800877c:	0800875d 	.word	0x0800875d
 8008780:	0800875d 	.word	0x0800875d
 8008784:	0800875d 	.word	0x0800875d
 8008788:	0800875d 	.word	0x0800875d
 800878c:	080087e1 	.word	0x080087e1
 8008790:	0800875d 	.word	0x0800875d
 8008794:	0800875d 	.word	0x0800875d
 8008798:	0800875d 	.word	0x0800875d
 800879c:	0800875d 	.word	0x0800875d
 80087a0:	080088df 	.word	0x080088df
 80087a4:	0800880b 	.word	0x0800880b
 80087a8:	08008899 	.word	0x08008899
 80087ac:	0800875d 	.word	0x0800875d
 80087b0:	0800875d 	.word	0x0800875d
 80087b4:	08008901 	.word	0x08008901
 80087b8:	0800875d 	.word	0x0800875d
 80087bc:	0800880b 	.word	0x0800880b
 80087c0:	0800875d 	.word	0x0800875d
 80087c4:	0800875d 	.word	0x0800875d
 80087c8:	080088a1 	.word	0x080088a1
 80087cc:	6833      	ldr	r3, [r6, #0]
 80087ce:	1d1a      	adds	r2, r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6032      	str	r2, [r6, #0]
 80087d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087dc:	2301      	movs	r3, #1
 80087de:	e09c      	b.n	800891a <_printf_i+0x1e6>
 80087e0:	6833      	ldr	r3, [r6, #0]
 80087e2:	6820      	ldr	r0, [r4, #0]
 80087e4:	1d19      	adds	r1, r3, #4
 80087e6:	6031      	str	r1, [r6, #0]
 80087e8:	0606      	lsls	r6, r0, #24
 80087ea:	d501      	bpl.n	80087f0 <_printf_i+0xbc>
 80087ec:	681d      	ldr	r5, [r3, #0]
 80087ee:	e003      	b.n	80087f8 <_printf_i+0xc4>
 80087f0:	0645      	lsls	r5, r0, #25
 80087f2:	d5fb      	bpl.n	80087ec <_printf_i+0xb8>
 80087f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	da03      	bge.n	8008804 <_printf_i+0xd0>
 80087fc:	232d      	movs	r3, #45	@ 0x2d
 80087fe:	426d      	negs	r5, r5
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008804:	4858      	ldr	r0, [pc, #352]	@ (8008968 <_printf_i+0x234>)
 8008806:	230a      	movs	r3, #10
 8008808:	e011      	b.n	800882e <_printf_i+0xfa>
 800880a:	6821      	ldr	r1, [r4, #0]
 800880c:	6833      	ldr	r3, [r6, #0]
 800880e:	0608      	lsls	r0, r1, #24
 8008810:	f853 5b04 	ldr.w	r5, [r3], #4
 8008814:	d402      	bmi.n	800881c <_printf_i+0xe8>
 8008816:	0649      	lsls	r1, r1, #25
 8008818:	bf48      	it	mi
 800881a:	b2ad      	uxthmi	r5, r5
 800881c:	2f6f      	cmp	r7, #111	@ 0x6f
 800881e:	4852      	ldr	r0, [pc, #328]	@ (8008968 <_printf_i+0x234>)
 8008820:	6033      	str	r3, [r6, #0]
 8008822:	bf14      	ite	ne
 8008824:	230a      	movne	r3, #10
 8008826:	2308      	moveq	r3, #8
 8008828:	2100      	movs	r1, #0
 800882a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800882e:	6866      	ldr	r6, [r4, #4]
 8008830:	60a6      	str	r6, [r4, #8]
 8008832:	2e00      	cmp	r6, #0
 8008834:	db05      	blt.n	8008842 <_printf_i+0x10e>
 8008836:	6821      	ldr	r1, [r4, #0]
 8008838:	432e      	orrs	r6, r5
 800883a:	f021 0104 	bic.w	r1, r1, #4
 800883e:	6021      	str	r1, [r4, #0]
 8008840:	d04b      	beq.n	80088da <_printf_i+0x1a6>
 8008842:	4616      	mov	r6, r2
 8008844:	fbb5 f1f3 	udiv	r1, r5, r3
 8008848:	fb03 5711 	mls	r7, r3, r1, r5
 800884c:	5dc7      	ldrb	r7, [r0, r7]
 800884e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008852:	462f      	mov	r7, r5
 8008854:	42bb      	cmp	r3, r7
 8008856:	460d      	mov	r5, r1
 8008858:	d9f4      	bls.n	8008844 <_printf_i+0x110>
 800885a:	2b08      	cmp	r3, #8
 800885c:	d10b      	bne.n	8008876 <_printf_i+0x142>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	07df      	lsls	r7, r3, #31
 8008862:	d508      	bpl.n	8008876 <_printf_i+0x142>
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	6861      	ldr	r1, [r4, #4]
 8008868:	4299      	cmp	r1, r3
 800886a:	bfde      	ittt	le
 800886c:	2330      	movle	r3, #48	@ 0x30
 800886e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008872:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008876:	1b92      	subs	r2, r2, r6
 8008878:	6122      	str	r2, [r4, #16]
 800887a:	f8cd a000 	str.w	sl, [sp]
 800887e:	464b      	mov	r3, r9
 8008880:	aa03      	add	r2, sp, #12
 8008882:	4621      	mov	r1, r4
 8008884:	4640      	mov	r0, r8
 8008886:	f7ff fee7 	bl	8008658 <_printf_common>
 800888a:	3001      	adds	r0, #1
 800888c:	d14a      	bne.n	8008924 <_printf_i+0x1f0>
 800888e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008892:	b004      	add	sp, #16
 8008894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	f043 0320 	orr.w	r3, r3, #32
 800889e:	6023      	str	r3, [r4, #0]
 80088a0:	4832      	ldr	r0, [pc, #200]	@ (800896c <_printf_i+0x238>)
 80088a2:	2778      	movs	r7, #120	@ 0x78
 80088a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	6831      	ldr	r1, [r6, #0]
 80088ac:	061f      	lsls	r7, r3, #24
 80088ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80088b2:	d402      	bmi.n	80088ba <_printf_i+0x186>
 80088b4:	065f      	lsls	r7, r3, #25
 80088b6:	bf48      	it	mi
 80088b8:	b2ad      	uxthmi	r5, r5
 80088ba:	6031      	str	r1, [r6, #0]
 80088bc:	07d9      	lsls	r1, r3, #31
 80088be:	bf44      	itt	mi
 80088c0:	f043 0320 	orrmi.w	r3, r3, #32
 80088c4:	6023      	strmi	r3, [r4, #0]
 80088c6:	b11d      	cbz	r5, 80088d0 <_printf_i+0x19c>
 80088c8:	2310      	movs	r3, #16
 80088ca:	e7ad      	b.n	8008828 <_printf_i+0xf4>
 80088cc:	4826      	ldr	r0, [pc, #152]	@ (8008968 <_printf_i+0x234>)
 80088ce:	e7e9      	b.n	80088a4 <_printf_i+0x170>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	f023 0320 	bic.w	r3, r3, #32
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	e7f6      	b.n	80088c8 <_printf_i+0x194>
 80088da:	4616      	mov	r6, r2
 80088dc:	e7bd      	b.n	800885a <_printf_i+0x126>
 80088de:	6833      	ldr	r3, [r6, #0]
 80088e0:	6825      	ldr	r5, [r4, #0]
 80088e2:	6961      	ldr	r1, [r4, #20]
 80088e4:	1d18      	adds	r0, r3, #4
 80088e6:	6030      	str	r0, [r6, #0]
 80088e8:	062e      	lsls	r6, r5, #24
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	d501      	bpl.n	80088f2 <_printf_i+0x1be>
 80088ee:	6019      	str	r1, [r3, #0]
 80088f0:	e002      	b.n	80088f8 <_printf_i+0x1c4>
 80088f2:	0668      	lsls	r0, r5, #25
 80088f4:	d5fb      	bpl.n	80088ee <_printf_i+0x1ba>
 80088f6:	8019      	strh	r1, [r3, #0]
 80088f8:	2300      	movs	r3, #0
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	4616      	mov	r6, r2
 80088fe:	e7bc      	b.n	800887a <_printf_i+0x146>
 8008900:	6833      	ldr	r3, [r6, #0]
 8008902:	1d1a      	adds	r2, r3, #4
 8008904:	6032      	str	r2, [r6, #0]
 8008906:	681e      	ldr	r6, [r3, #0]
 8008908:	6862      	ldr	r2, [r4, #4]
 800890a:	2100      	movs	r1, #0
 800890c:	4630      	mov	r0, r6
 800890e:	f7f7 fc97 	bl	8000240 <memchr>
 8008912:	b108      	cbz	r0, 8008918 <_printf_i+0x1e4>
 8008914:	1b80      	subs	r0, r0, r6
 8008916:	6060      	str	r0, [r4, #4]
 8008918:	6863      	ldr	r3, [r4, #4]
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	2300      	movs	r3, #0
 800891e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008922:	e7aa      	b.n	800887a <_printf_i+0x146>
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	4632      	mov	r2, r6
 8008928:	4649      	mov	r1, r9
 800892a:	4640      	mov	r0, r8
 800892c:	47d0      	blx	sl
 800892e:	3001      	adds	r0, #1
 8008930:	d0ad      	beq.n	800888e <_printf_i+0x15a>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	079b      	lsls	r3, r3, #30
 8008936:	d413      	bmi.n	8008960 <_printf_i+0x22c>
 8008938:	68e0      	ldr	r0, [r4, #12]
 800893a:	9b03      	ldr	r3, [sp, #12]
 800893c:	4298      	cmp	r0, r3
 800893e:	bfb8      	it	lt
 8008940:	4618      	movlt	r0, r3
 8008942:	e7a6      	b.n	8008892 <_printf_i+0x15e>
 8008944:	2301      	movs	r3, #1
 8008946:	4632      	mov	r2, r6
 8008948:	4649      	mov	r1, r9
 800894a:	4640      	mov	r0, r8
 800894c:	47d0      	blx	sl
 800894e:	3001      	adds	r0, #1
 8008950:	d09d      	beq.n	800888e <_printf_i+0x15a>
 8008952:	3501      	adds	r5, #1
 8008954:	68e3      	ldr	r3, [r4, #12]
 8008956:	9903      	ldr	r1, [sp, #12]
 8008958:	1a5b      	subs	r3, r3, r1
 800895a:	42ab      	cmp	r3, r5
 800895c:	dcf2      	bgt.n	8008944 <_printf_i+0x210>
 800895e:	e7eb      	b.n	8008938 <_printf_i+0x204>
 8008960:	2500      	movs	r5, #0
 8008962:	f104 0619 	add.w	r6, r4, #25
 8008966:	e7f5      	b.n	8008954 <_printf_i+0x220>
 8008968:	08009195 	.word	0x08009195
 800896c:	080091a6 	.word	0x080091a6

08008970 <memmove>:
 8008970:	4288      	cmp	r0, r1
 8008972:	b510      	push	{r4, lr}
 8008974:	eb01 0402 	add.w	r4, r1, r2
 8008978:	d902      	bls.n	8008980 <memmove+0x10>
 800897a:	4284      	cmp	r4, r0
 800897c:	4623      	mov	r3, r4
 800897e:	d807      	bhi.n	8008990 <memmove+0x20>
 8008980:	1e43      	subs	r3, r0, #1
 8008982:	42a1      	cmp	r1, r4
 8008984:	d008      	beq.n	8008998 <memmove+0x28>
 8008986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800898a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800898e:	e7f8      	b.n	8008982 <memmove+0x12>
 8008990:	4402      	add	r2, r0
 8008992:	4601      	mov	r1, r0
 8008994:	428a      	cmp	r2, r1
 8008996:	d100      	bne.n	800899a <memmove+0x2a>
 8008998:	bd10      	pop	{r4, pc}
 800899a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800899e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089a2:	e7f7      	b.n	8008994 <memmove+0x24>

080089a4 <_sbrk_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d06      	ldr	r5, [pc, #24]	@ (80089c0 <_sbrk_r+0x1c>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	f7f9 f870 	bl	8001a94 <_sbrk>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_sbrk_r+0x1a>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_sbrk_r+0x1a>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	20013114 	.word	0x20013114

080089c4 <_realloc_r>:
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	4607      	mov	r7, r0
 80089ca:	4614      	mov	r4, r2
 80089cc:	460d      	mov	r5, r1
 80089ce:	b921      	cbnz	r1, 80089da <_realloc_r+0x16>
 80089d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	4611      	mov	r1, r2
 80089d6:	f7ff bc5b 	b.w	8008290 <_malloc_r>
 80089da:	b92a      	cbnz	r2, 80089e8 <_realloc_r+0x24>
 80089dc:	f7ff fbec 	bl	80081b8 <_free_r>
 80089e0:	4625      	mov	r5, r4
 80089e2:	4628      	mov	r0, r5
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	f000 f81a 	bl	8008a20 <_malloc_usable_size_r>
 80089ec:	4284      	cmp	r4, r0
 80089ee:	4606      	mov	r6, r0
 80089f0:	d802      	bhi.n	80089f8 <_realloc_r+0x34>
 80089f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089f6:	d8f4      	bhi.n	80089e2 <_realloc_r+0x1e>
 80089f8:	4621      	mov	r1, r4
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff fc48 	bl	8008290 <_malloc_r>
 8008a00:	4680      	mov	r8, r0
 8008a02:	b908      	cbnz	r0, 8008a08 <_realloc_r+0x44>
 8008a04:	4645      	mov	r5, r8
 8008a06:	e7ec      	b.n	80089e2 <_realloc_r+0x1e>
 8008a08:	42b4      	cmp	r4, r6
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	bf28      	it	cs
 8008a10:	4632      	movcs	r2, r6
 8008a12:	f7ff fbc3 	bl	800819c <memcpy>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7ff fbcd 	bl	80081b8 <_free_r>
 8008a1e:	e7f1      	b.n	8008a04 <_realloc_r+0x40>

08008a20 <_malloc_usable_size_r>:
 8008a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a24:	1f18      	subs	r0, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfbc      	itt	lt
 8008a2a:	580b      	ldrlt	r3, [r1, r0]
 8008a2c:	18c0      	addlt	r0, r0, r3
 8008a2e:	4770      	bx	lr

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
